{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"about/advantages/","text":"Alnoda advantages Every solution for containerized development environments has its own set of pros and cons. However, Alnoda workspaces stand out with their distinctive features that effectively tackle most of the limitations found in existing solutions. Info Alnoda workspaces have unique features and offer many advantages over other containerized development options. Ease of use With Alnoda workspaces, you are abstracted from the intricacies and complexities of Docker. Setting up a sophisticated workspace with many running applications, packages and processes does not require in-depth knowledge of Docker. \"The Alnoda Hub offers a wide range of applications that can be easily installed with just one command! This ever-expanding collection of apps is continuously growing.\" Universal The base Alnoda workspace is not restricted to a specific project but offer extensive flexibility and extensibility. You can customize and shape Alnoda workspace according to your specific requirements. This versatility allows to create a workspace that optimally supports your unique development needs without any limitations. We develop and maintain a collection of workspaces crafted for the specific tasks. This gives an opportunity to get started faster, and provide examples how to easily develop specific workspaces. Batteries included Alnoda workspaces are based on Ubuntu, and have a set of common apps installed, includinng Git, ZSH, CLI text editors, network utilities, Nix package manager, Python 3 and cron. All Alnoda workspaces also include browser-based terminal and file manager. Workspace UI All Alnoda workspaces have browser-based UI, where you can see what apps are installed, what are the runing processes, explore workspace image legacy, see project name and description. Workspace admin Each Alnoda workspace includes an administrative interface that allows to customize the appearance of the workspace UI, modify project details such as name and description, adjust colors, fonts, and icons, initiate new processes, configure terminal environmental variables and aliases, and login to the Alnoda Hub. Moreover, through the workspace admin, you can grant internet-based access to your colleagues, regardless of whether the workspace is hosted on your personal computer. Runtime extandability You can install more applications in the Alnoda workspace even at runtime! You won't need to rebuild the workspace image from scratch. Note Alnoda workspaces have a unique feature that allow to install new applications and start more services even at runtime! Truly portabile One of the key advantages of Alnoda workspaces is true portability. You can move workspaces from one computer to anoter, from PC to a cloud server or Kubernetes cluster. You can save workspaces on S3, in Docker registry, Google Drive and utilize them on any computer, eliminating the hassle of setting up complex development environments repeatedly. Whether you are working on a personal machine, a shared workstation, or a cloud server, your containerized workspace remains consistent, ensuring a smooth and uninterrupted workflow. Alnoda workspaces are self-contained environments, encompassing all the necessary tools, applications, and packages you require. This makes it highly portable and eliminates the need to configure integrations with IDEs or terminals. You only need Docker to run a workspace, and only browser to use it. All applications in Alnoda workspaces are browser-based. No matter where you have deployed your workspace - you only need a web browser to work with it. This flexibility allows for seamless work across different devices and locations, making it ideal for remote work, collaboration, and on-the-go development. Easily shareable Alnoda workspaces strive to enhance collaboration by simplifying the sharing process. Whether you need to share a file, code collaboratively, grant your colleague access to your workspace's terminal or file browser, Alnoda workspaces make it effortless. Even if you are using a local setup on your laptop, you can easily share any workspace with anyone worldwide over the Internet! You can share any workspace application, give access to any WEB UI, developed app or API with a single click. Fully browser-based workspaces facilitate seamless collaboration and sharing among team members. Note Alnoda workspaces have a unique feature that allows you to share your workspace online with your teammates even when running workspace on your own laptop! Deployment flexibility Alnoda workspaces support a variety of deployment options to cater to different needs. You can use these containerized workspaces locally, self-host them on your infrastructure, deploy inn cloud or leverage the scalability and orchestration capabilities of Kubernetes. This flexibility ensures that our solution adapts to your unique requirements, whether you are an individual developer or a large-scale enterprise. Manage workspace The Alnoda desktop application simplifies workspace management, allowing for easy initiation, termination, saving, and synchronization of workspaces with just a click. With the Alnoda desktop app, launching multiple workspaces on the same PC, transferring workspaces between laptops, and deploying or migrating workspaces to your cloud server becomes effortless. Info You can use Alnoda workspaces without desktop app. Any Alnoda workspace is just a docker images that you can start with a simple docker run command Warning Alnoda desktop app is in active development and not available for public use yet.","title":"Alnoda advantages"},{"location":"about/advantages/#alnoda-advantages","text":"Every solution for containerized development environments has its own set of pros and cons. However, Alnoda workspaces stand out with their distinctive features that effectively tackle most of the limitations found in existing solutions. Info Alnoda workspaces have unique features and offer many advantages over other containerized development options.","title":"Alnoda advantages"},{"location":"about/advantages/#ease-of-use","text":"With Alnoda workspaces, you are abstracted from the intricacies and complexities of Docker. Setting up a sophisticated workspace with many running applications, packages and processes does not require in-depth knowledge of Docker. \"The Alnoda Hub offers a wide range of applications that can be easily installed with just one command! This ever-expanding collection of apps is continuously growing.\"","title":"Ease of use"},{"location":"about/advantages/#universal","text":"The base Alnoda workspace is not restricted to a specific project but offer extensive flexibility and extensibility. You can customize and shape Alnoda workspace according to your specific requirements. This versatility allows to create a workspace that optimally supports your unique development needs without any limitations. We develop and maintain a collection of workspaces crafted for the specific tasks. This gives an opportunity to get started faster, and provide examples how to easily develop specific workspaces.","title":"Universal"},{"location":"about/advantages/#batteries-included","text":"Alnoda workspaces are based on Ubuntu, and have a set of common apps installed, includinng Git, ZSH, CLI text editors, network utilities, Nix package manager, Python 3 and cron. All Alnoda workspaces also include browser-based terminal and file manager.","title":"Batteries included"},{"location":"about/advantages/#workspace-ui","text":"All Alnoda workspaces have browser-based UI, where you can see what apps are installed, what are the runing processes, explore workspace image legacy, see project name and description.","title":"Workspace UI"},{"location":"about/advantages/#workspace-admin","text":"Each Alnoda workspace includes an administrative interface that allows to customize the appearance of the workspace UI, modify project details such as name and description, adjust colors, fonts, and icons, initiate new processes, configure terminal environmental variables and aliases, and login to the Alnoda Hub. Moreover, through the workspace admin, you can grant internet-based access to your colleagues, regardless of whether the workspace is hosted on your personal computer.","title":"Workspace admin"},{"location":"about/advantages/#runtime-extandability","text":"You can install more applications in the Alnoda workspace even at runtime! You won't need to rebuild the workspace image from scratch. Note Alnoda workspaces have a unique feature that allow to install new applications and start more services even at runtime!","title":"Runtime extandability"},{"location":"about/advantages/#truly-portabile","text":"One of the key advantages of Alnoda workspaces is true portability. You can move workspaces from one computer to anoter, from PC to a cloud server or Kubernetes cluster. You can save workspaces on S3, in Docker registry, Google Drive and utilize them on any computer, eliminating the hassle of setting up complex development environments repeatedly. Whether you are working on a personal machine, a shared workstation, or a cloud server, your containerized workspace remains consistent, ensuring a smooth and uninterrupted workflow. Alnoda workspaces are self-contained environments, encompassing all the necessary tools, applications, and packages you require. This makes it highly portable and eliminates the need to configure integrations with IDEs or terminals. You only need Docker to run a workspace, and only browser to use it. All applications in Alnoda workspaces are browser-based. No matter where you have deployed your workspace - you only need a web browser to work with it. This flexibility allows for seamless work across different devices and locations, making it ideal for remote work, collaboration, and on-the-go development.","title":"Truly portabile"},{"location":"about/advantages/#easily-shareable","text":"Alnoda workspaces strive to enhance collaboration by simplifying the sharing process. Whether you need to share a file, code collaboratively, grant your colleague access to your workspace's terminal or file browser, Alnoda workspaces make it effortless. Even if you are using a local setup on your laptop, you can easily share any workspace with anyone worldwide over the Internet! You can share any workspace application, give access to any WEB UI, developed app or API with a single click. Fully browser-based workspaces facilitate seamless collaboration and sharing among team members. Note Alnoda workspaces have a unique feature that allows you to share your workspace online with your teammates even when running workspace on your own laptop!","title":"Easily shareable"},{"location":"about/advantages/#deployment-flexibility","text":"Alnoda workspaces support a variety of deployment options to cater to different needs. You can use these containerized workspaces locally, self-host them on your infrastructure, deploy inn cloud or leverage the scalability and orchestration capabilities of Kubernetes. This flexibility ensures that our solution adapts to your unique requirements, whether you are an individual developer or a large-scale enterprise.","title":"Deployment flexibility"},{"location":"about/advantages/#manage-workspace","text":"The Alnoda desktop application simplifies workspace management, allowing for easy initiation, termination, saving, and synchronization of workspaces with just a click. With the Alnoda desktop app, launching multiple workspaces on the same PC, transferring workspaces between laptops, and deploying or migrating workspaces to your cloud server becomes effortless. Info You can use Alnoda workspaces without desktop app. Any Alnoda workspace is just a docker images that you can start with a simple docker run command Warning Alnoda desktop app is in active development and not available for public use yet.","title":"Manage workspace"},{"location":"about/collaboration/","text":"Improve collaboration Alnoda workspaces have the potential to enhance the productivity of your team, foster better collaboration with stakeholders, streamline the process of showcasing outcomes to your employer, and accelerate the integration of your open-source project. Code together The most seamless approach to collaborative work involves initiating a workspace on a cloud server or within a Kubernetes cluster. This method enables you and your team to access the same workspace via a browser, allowing all members to utilize workspace applications such as code editors, notebooks, file browsers, or terminals. There's no immediate requirement to initiate your workspace on a cloud server. You always have the option to halt your local workspace and then restart it on the server. The Alnoda desktop app will manage the synchronization process. Share local workspace A unique feature of Alnoda workspaces is the ability to grant access to any workspace application over the Internet, even when running workspace locally on your personal computer. The process simply involves selecting the application you wish to share and forwarding a confidential link to your peer. Once your peer opens the link in their browser, they'll have direct access to the chosen workspace application. Note Alnoda workspaces have a unique feature that allows you to share your workspace online with your teammates even when running workspace on your own laptop! This function is ideal for brief pairing sessions, showcasing accomplishments to your team during standups, aligning with stakeholders on completed features, sharing files and artifacts, or seeking assistance from a more experienced colleague when you encounter a roadblock. Preconfigured team workspaces Collaboration and teamwork are also enhanced through containerized workspaces. Distributed teams can easily onboard new members by providing them with pre-configured workspaces, reducing setup time and ensuring consistent development environments for everyone. Smart tools The extendability of the workspaces helps with various unique collaboration requirements. For instance, professionals such as researchers, data scientists, or business intelligence engineers often need to share the results of regular research or analyses. Configuring your workspace to carry out an automated analysis, scheduling its execution, and sharing the results via a file browser can be quite straightforward. Start by initiating your workspace on a cloud server. Next, write a script for automated analysis. Browse the Alnoda Hub and select from the numerous scheduling tools available, such as Cronicle, and add it to your workspace. You can also find user-interface tools, like Olive Tin, that trigger on-demand script execution. Your colleagues will then have the ability to download the results at a specific time or simply execute the analysis on-demand. Info The Alnoda Hub has hundreds of applications that can help with a wide array of requirements and use-cases. Create public workspace Are you an author of an open-source framework or library? You may very well create a public workspace with all the system and programming language requirements installed, your package set up and pre-configured, and examples included. Doing so will make it easier for the community to explore and experiment with your new framework.","title":"Improve collaboration"},{"location":"about/collaboration/#improve-collaboration","text":"Alnoda workspaces have the potential to enhance the productivity of your team, foster better collaboration with stakeholders, streamline the process of showcasing outcomes to your employer, and accelerate the integration of your open-source project.","title":"Improve collaboration"},{"location":"about/collaboration/#code-together","text":"The most seamless approach to collaborative work involves initiating a workspace on a cloud server or within a Kubernetes cluster. This method enables you and your team to access the same workspace via a browser, allowing all members to utilize workspace applications such as code editors, notebooks, file browsers, or terminals. There's no immediate requirement to initiate your workspace on a cloud server. You always have the option to halt your local workspace and then restart it on the server. The Alnoda desktop app will manage the synchronization process.","title":"Code together"},{"location":"about/collaboration/#share-local-workspace","text":"A unique feature of Alnoda workspaces is the ability to grant access to any workspace application over the Internet, even when running workspace locally on your personal computer. The process simply involves selecting the application you wish to share and forwarding a confidential link to your peer. Once your peer opens the link in their browser, they'll have direct access to the chosen workspace application. Note Alnoda workspaces have a unique feature that allows you to share your workspace online with your teammates even when running workspace on your own laptop! This function is ideal for brief pairing sessions, showcasing accomplishments to your team during standups, aligning with stakeholders on completed features, sharing files and artifacts, or seeking assistance from a more experienced colleague when you encounter a roadblock.","title":"Share local workspace"},{"location":"about/collaboration/#preconfigured-team-workspaces","text":"Collaboration and teamwork are also enhanced through containerized workspaces. Distributed teams can easily onboard new members by providing them with pre-configured workspaces, reducing setup time and ensuring consistent development environments for everyone.","title":"Preconfigured team workspaces"},{"location":"about/collaboration/#smart-tools","text":"The extendability of the workspaces helps with various unique collaboration requirements. For instance, professionals such as researchers, data scientists, or business intelligence engineers often need to share the results of regular research or analyses. Configuring your workspace to carry out an automated analysis, scheduling its execution, and sharing the results via a file browser can be quite straightforward. Start by initiating your workspace on a cloud server. Next, write a script for automated analysis. Browse the Alnoda Hub and select from the numerous scheduling tools available, such as Cronicle, and add it to your workspace. You can also find user-interface tools, like Olive Tin, that trigger on-demand script execution. Your colleagues will then have the ability to download the results at a specific time or simply execute the analysis on-demand. Info The Alnoda Hub has hundreds of applications that can help with a wide array of requirements and use-cases.","title":"Smart tools"},{"location":"about/collaboration/#create-public-workspace","text":"Are you an author of an open-source framework or library? You may very well create a public workspace with all the system and programming language requirements installed, your package set up and pre-configured, and examples included. Doing so will make it easier for the community to explore and experiment with your new framework.","title":"Create public workspace"},{"location":"about/containers/","text":"Containers The core concept of containerization lies in encapsulating all the necessary dependencies, code, configurations and other artifacts required for a project within a self-contained unit known as a container. Docker has been widely adopted and successfully used to isolate development environments. It provides a lightweight and efficient solution for creating isolated and reproducible development environments. Existing solutions The concept of utilizing Docker containers for isolated development environments has gained significant popularity, and there exists a wide range of solutions that facilitate this approach. Some of the notable examples are: Docker Compose: Docker Compose is a tool that allows you to define and manage multi-container Docker applications. It simplifies the process of defining and running complex multi-container setups, making it easier to set up and manage development environments. Visual Studio Dev Containers: Visual Studio Code (VS Code) has an extension that enables developers to use Docker containers as development environments directly within the VS Code editor. It provides a seamless integration and allows for a consistent development experience across different machines. Gitpod: Gitpod is a cloud-based development environment that leverages Docker containers. It provides a fully configured and isolated development environment for each project, enabling developers to start coding instantly without worrying about environment setup. Code-server: Code-server is an open-source project that allows you to run Visual Studio Code in a local or remote Docker container. It enables developers to access a full-fledged VS Code environment through a web browser, making it convenient for remote development or collaborative coding. DevSpace: DevSpace is a development tool that simplifies the workflow of developing applications with Kubernetes and Docker. It provides features like hot reloading, efficient image building, and deployment synchronization, making it easier to develop and test applications within containerized environments. Docksal: Docksal is a development tool that offers a complete local development environment based on Docker. It provides a standardized and reproducible setup for different projects, including web servers, databases, and other services. Limitations of existing solutions Attention Despite Docker was widely adopted to isolate development environments, and there are may great tools that allow us to develop directly in containers, each of existing solutions have significant limitations Docker introduces an additional layer of complexity to the development workflow. Developers need to learn Docker concepts, commands, and best practices, which may require upfront time investment and ongoing maintenance. Portability issues. One of the challenges regarding portability is encountered when using multi-container solutions like Docker Compose, as well as cloud services. These solutions can make it arduous, if not impossible, to migrate the development environment from one PC to another or transfer it to a cloud server or Kubernetes cluster. Other existinng solutions often rely on specific tooling, configurations, or extensions that are tightly integrated with their respective environments. Moving these environments to different setups may require additional effort to ensure compatibility and proper functioning. Complexity of Configuration. Setting up the development environment with local IDE to work within Docker containers can involve configuring various files and settings, such as the Dockerfile, devcontainer.json, and extensions within the container. Managing these configurations and ensuring compatibility with specific project requirements may introduce additional complexity. Insufficient flexibility. Certain available choices are tailored to specific projects and lack extensibility. These options come with a predefined set of installed tools, making it challenging to add new tools as it often involves the complexity of building a new Docker image. Team Collaboration Challenges. Collaborating with team members who are not using specific tooling (for example, Visual Studio Dev Containers) or who have different development environments can present challenges. Synchronizing configurations, ensuring compatibility, and maintaining consistency across the team may require additional coordination and effort. Info The Alnoda project strives to address the aforementioned limitations by offering highly convenient containerized environments that leverage the power of Docker containers. Explore Alnoda features to know how we tackle these challenges effectively.","title":"Containerized environments"},{"location":"about/containers/#containers","text":"The core concept of containerization lies in encapsulating all the necessary dependencies, code, configurations and other artifacts required for a project within a self-contained unit known as a container. Docker has been widely adopted and successfully used to isolate development environments. It provides a lightweight and efficient solution for creating isolated and reproducible development environments.","title":"Containers"},{"location":"about/containers/#existing-solutions","text":"The concept of utilizing Docker containers for isolated development environments has gained significant popularity, and there exists a wide range of solutions that facilitate this approach. Some of the notable examples are: Docker Compose: Docker Compose is a tool that allows you to define and manage multi-container Docker applications. It simplifies the process of defining and running complex multi-container setups, making it easier to set up and manage development environments. Visual Studio Dev Containers: Visual Studio Code (VS Code) has an extension that enables developers to use Docker containers as development environments directly within the VS Code editor. It provides a seamless integration and allows for a consistent development experience across different machines. Gitpod: Gitpod is a cloud-based development environment that leverages Docker containers. It provides a fully configured and isolated development environment for each project, enabling developers to start coding instantly without worrying about environment setup. Code-server: Code-server is an open-source project that allows you to run Visual Studio Code in a local or remote Docker container. It enables developers to access a full-fledged VS Code environment through a web browser, making it convenient for remote development or collaborative coding. DevSpace: DevSpace is a development tool that simplifies the workflow of developing applications with Kubernetes and Docker. It provides features like hot reloading, efficient image building, and deployment synchronization, making it easier to develop and test applications within containerized environments. Docksal: Docksal is a development tool that offers a complete local development environment based on Docker. It provides a standardized and reproducible setup for different projects, including web servers, databases, and other services.","title":"Existing solutions"},{"location":"about/containers/#limitations-of-existing-solutions","text":"Attention Despite Docker was widely adopted to isolate development environments, and there are may great tools that allow us to develop directly in containers, each of existing solutions have significant limitations Docker introduces an additional layer of complexity to the development workflow. Developers need to learn Docker concepts, commands, and best practices, which may require upfront time investment and ongoing maintenance. Portability issues. One of the challenges regarding portability is encountered when using multi-container solutions like Docker Compose, as well as cloud services. These solutions can make it arduous, if not impossible, to migrate the development environment from one PC to another or transfer it to a cloud server or Kubernetes cluster. Other existinng solutions often rely on specific tooling, configurations, or extensions that are tightly integrated with their respective environments. Moving these environments to different setups may require additional effort to ensure compatibility and proper functioning. Complexity of Configuration. Setting up the development environment with local IDE to work within Docker containers can involve configuring various files and settings, such as the Dockerfile, devcontainer.json, and extensions within the container. Managing these configurations and ensuring compatibility with specific project requirements may introduce additional complexity. Insufficient flexibility. Certain available choices are tailored to specific projects and lack extensibility. These options come with a predefined set of installed tools, making it challenging to add new tools as it often involves the complexity of building a new Docker image. Team Collaboration Challenges. Collaborating with team members who are not using specific tooling (for example, Visual Studio Dev Containers) or who have different development environments can present challenges. Synchronizing configurations, ensuring compatibility, and maintaining consistency across the team may require additional coordination and effort. Info The Alnoda project strives to address the aforementioned limitations by offering highly convenient containerized environments that leverage the power of Docker containers. Explore Alnoda features to know how we tackle these challenges effectively.","title":"Limitations of existing solutions"},{"location":"about/contribution/","text":"Cotribution Info We value and welcome any assistance and contributions! How you can help There are several ways through which you can support our project: Begin by using workspaces and informing us of any issues or challenges you encounter. You can do so by creating an issue in the main GitHub repository or sending an email to bluxmit@gmail.com . Note We are a very small team, and without extra help we might not be able to react fast or work on the features beyod our roadmap. Create an account on the Alnoda Hub and register applications that you find valuable. Develop your own workspaces and submit pull requests to our repository, enabling everyone to benefit from your contributions. Contribute to the improvement of our documentation, helping us enhance its clarity and comprehensiveness. Review open issues and help to fix them. Consider providing financial sponsorship to further the advancement of our project. For any suggestions or questions, please feel free to reach out to us via email at bluxmit@gmail.com . We value your input!","title":"Contribution"},{"location":"about/contribution/#cotribution","text":"Info We value and welcome any assistance and contributions!","title":"Cotribution"},{"location":"about/contribution/#how-you-can-help","text":"There are several ways through which you can support our project: Begin by using workspaces and informing us of any issues or challenges you encounter. You can do so by creating an issue in the main GitHub repository or sending an email to bluxmit@gmail.com . Note We are a very small team, and without extra help we might not be able to react fast or work on the features beyod our roadmap. Create an account on the Alnoda Hub and register applications that you find valuable. Develop your own workspaces and submit pull requests to our repository, enabling everyone to benefit from your contributions. Contribute to the improvement of our documentation, helping us enhance its clarity and comprehensiveness. Review open issues and help to fix them. Consider providing financial sponsorship to further the advancement of our project. For any suggestions or questions, please feel free to reach out to us via email at bluxmit@gmail.com . We value your input!","title":"How you can help"},{"location":"about/intro/","text":"Intro In an ever-evolving technological landscape, software developers, web developers, data engineers, data scientists, DevOps professionals, sysadmins, data analysts, and other IT specialists face unique challenges when it comes to managing their work environments effectively. This is where our project comes in. Our goal The Alnoda team is dedicated to developing open-source solutions aimed at providing containerized development environments. Our primary goal is to empower software developers, analysts, data scientists, researchers, DevOps professionals, platform engineers, infrastructure engineers, and various other IT professionals and teams. By leveraging our solutions, individuals and organizations can enhance their productivity and efficiency in their respective fields of work. We believe in fostering a collaborative environment where the collective expertise of the community can contribute to the continual improvement and evolution of these solutions, enabling a more streamlined and effective approach to software development and IT operations. Our project Our open-source project focuses on providing containerized portable development environments that empower professionals across various domains to work seamlessly, regardless of their physical location or the resources available to them. Info Alnoda aims to offer user-friendly containerized workspaces for diverse IT professionals. By leveraging the power of containerization, we enable users to isolate their projects, back up their work, conduct isolated experiments, work on any computer, share workspaces, and collaborate effortlessly. Warning These Alnoda features are in active development, and not publicly available yet: 1) workspace deployment on cloud server; 2) workspace deployment in Kubernetes; 3) Alnoda desktop app","title":"Intro"},{"location":"about/intro/#intro","text":"In an ever-evolving technological landscape, software developers, web developers, data engineers, data scientists, DevOps professionals, sysadmins, data analysts, and other IT specialists face unique challenges when it comes to managing their work environments effectively. This is where our project comes in.","title":"Intro"},{"location":"about/intro/#our-goal","text":"The Alnoda team is dedicated to developing open-source solutions aimed at providing containerized development environments. Our primary goal is to empower software developers, analysts, data scientists, researchers, DevOps professionals, platform engineers, infrastructure engineers, and various other IT professionals and teams. By leveraging our solutions, individuals and organizations can enhance their productivity and efficiency in their respective fields of work. We believe in fostering a collaborative environment where the collective expertise of the community can contribute to the continual improvement and evolution of these solutions, enabling a more streamlined and effective approach to software development and IT operations.","title":"Our goal"},{"location":"about/intro/#our-project","text":"Our open-source project focuses on providing containerized portable development environments that empower professionals across various domains to work seamlessly, regardless of their physical location or the resources available to them. Info Alnoda aims to offer user-friendly containerized workspaces for diverse IT professionals. By leveraging the power of containerization, we enable users to isolate their projects, back up their work, conduct isolated experiments, work on any computer, share workspaces, and collaborate effortlessly. Warning These Alnoda features are in active development, and not publicly available yet: 1) workspace deployment on cloud server; 2) workspace deployment in Kubernetes; 3) Alnoda desktop app","title":"Our project"},{"location":"about/limitations/","text":"Limitations While Alnoda workspaces offer many important benefits, such as project isolation and workspace portability, they also have some constraints which limit their usage. Performance Users engage with workspaces through a browser-based terminal and the workspace applications' browser-based interfaces. The speed of a browser-based integrated development environment (IDE) and browser-based terminal tends to be slower than a native system terminal or native IDE. Resource consumption Workspaces are running within Docker containers, and this can consume more computer resources, such as CPU, memory, and disk space. Limited GUI support Alnoda workspaces are primarily designed for command-line applications and browser-based applications. The current workspace design doesn't support running desktop applications with a graphical user interface within the workspaces. As a result, this restricts the potential to develop desktop applications or install them within the workspace environment.","title":"Alnoda limitations"},{"location":"about/limitations/#limitations","text":"While Alnoda workspaces offer many important benefits, such as project isolation and workspace portability, they also have some constraints which limit their usage.","title":"Limitations"},{"location":"about/limitations/#performance","text":"Users engage with workspaces through a browser-based terminal and the workspace applications' browser-based interfaces. The speed of a browser-based integrated development environment (IDE) and browser-based terminal tends to be slower than a native system terminal or native IDE.","title":"Performance"},{"location":"about/limitations/#resource-consumption","text":"Workspaces are running within Docker containers, and this can consume more computer resources, such as CPU, memory, and disk space.","title":"Resource consumption"},{"location":"about/limitations/#limited-gui-support","text":"Alnoda workspaces are primarily designed for command-line applications and browser-based applications. The current workspace design doesn't support running desktop applications with a graphical user interface within the workspaces. As a result, this restricts the potential to develop desktop applications or install them within the workspace environment.","title":"Limited GUI support"},{"location":"about/productivity/","text":"Increase productivity No matter if you are a software developer, data analyst or site reliability engineer, Alnoda workspaces can make your work more efficient. Check out how you can become more productive with Alnoda workspaces. Kickstart projects faster Setting up a new development environment for a project can become easier. Explore Alnoda workspaces, where you may discover a valuable workspace image that can accelerate your project's initial stages. Build a foundational workspace encompassing repositories, configurations, and other reusable components utilized across multiple projects. Initiate new projects by cloning this foundational workspace, kickstarting your projects faster. Create your personal repository of foundational project workspaces and share with others. Isolate projects Each project may require a different set of tools, libraries, or even coding languages. Every Alnoda workspace container runs in isolation, meaning changes made in one container do not affect other containers. You can install different versions of programming languages, packages and libraries without the risk of affecting other projects. Store configurations, secrets, files, datasets and other artifacts together. Quick context switching Switching between different projects becomes faster and easier with the Alnoda workspaces. Without the workspace we often need to make several steps such as switching to another Git branch, activating a virtual environment, setting environmental variables. Sometimes even more actions are required, for example changing AWS profile, switching to another kubectl context, altering terraform workspace, etc. Failing to execute even a single step can result in irrevocable damage and a time-consuming recovery process. Alnoda workspace can be configured to suit a particular project, encompassing aspects such as the cloud profile, terraform workspace, code repositories, kubeconfig files, environmental variables and everything else. All of these components are set into motion the moment you launch the workspace, eliminating the need for numerous individual actions. Backup projects Do you have a fully functional proof-of-concept (POC) for a web application or service, scripts for provisioning cloud infrastructure, or setting up a Kubernetes cluster? Perhaps you have research or simulations that produce tangible results? Or a machine learning model with impressive predictive performance? If so, now is the ideal moment to secure your entire project, encompassing all configuration files, artifacts, environmental variables, bootstrap scripts, and Markdown or LaTeX documents. Preserve and back up your entire workspace. This will allow you to continue developing software, run new simulations with varied parameters, and train machine learning models on new datasets - all while mitigating the risk of losing your achieved milestones without the ability to replicate them. Move between computers and servers Do you find yourself coding at the office and wish to proceed with your work over the weekend at home, without having to carry your work laptop? That's not an issue. All you need to do is pause the workspace on your work laptop, and resume it once you're at home. Alnoda will handle the task of synchronizing the workspace across different computers. Are simulations on your laptop or training of machine learning model taking longer than expected? That's no cause for concern. You can simply halt the workspace on your laptop and start it on a beefy cloud server with a GPU. Conduct your experiments, train your machine learning model, and then continue working on your laptop. And this moves can be achieved with just a few click of Alnoda desktop apps. This eliminates the need to provision a cloud server and going through the cumbersome process of installing dependencies and packages. Experimentation Another notable feature of Alnoda workspaces - is the ability to conduct isolated experiments. Each project can have its own dedicated container, allowing developers to experiment with different libraries, frameworks, and configurations without affecting their main development environment. This enables rapid prototyping, iterative development, and easy rollback to previous states, providing a flexible and risk-free environment for innovation. From dev to POC Do you have a proof-of-concept (POC) for a web app or API service that you're eager to showcase to clients, coworkers, or even friends? You can easily save your entire workspace and transfer it to a cloud server using a few clicks within the Alnoda desktop app. This process allows you to host your web application online without having to construct a distinct Docker image solely for the POC demonstration. Info With the ability to isolate projects, backup work, conduct isolated experiments, work on any computer, Alnoda workspaces empowers you to focus on what you do best: building exceptional software and driving technological advancements. Get ready to unleash your productivity and creativity with our containerized workspaces!","title":"Increase productivity"},{"location":"about/productivity/#increase-productivity","text":"No matter if you are a software developer, data analyst or site reliability engineer, Alnoda workspaces can make your work more efficient. Check out how you can become more productive with Alnoda workspaces.","title":"Increase productivity"},{"location":"about/productivity/#kickstart-projects-faster","text":"Setting up a new development environment for a project can become easier. Explore Alnoda workspaces, where you may discover a valuable workspace image that can accelerate your project's initial stages. Build a foundational workspace encompassing repositories, configurations, and other reusable components utilized across multiple projects. Initiate new projects by cloning this foundational workspace, kickstarting your projects faster. Create your personal repository of foundational project workspaces and share with others.","title":"Kickstart projects faster"},{"location":"about/productivity/#isolate-projects","text":"Each project may require a different set of tools, libraries, or even coding languages. Every Alnoda workspace container runs in isolation, meaning changes made in one container do not affect other containers. You can install different versions of programming languages, packages and libraries without the risk of affecting other projects. Store configurations, secrets, files, datasets and other artifacts together.","title":"Isolate projects"},{"location":"about/productivity/#quick-context-switching","text":"Switching between different projects becomes faster and easier with the Alnoda workspaces. Without the workspace we often need to make several steps such as switching to another Git branch, activating a virtual environment, setting environmental variables. Sometimes even more actions are required, for example changing AWS profile, switching to another kubectl context, altering terraform workspace, etc. Failing to execute even a single step can result in irrevocable damage and a time-consuming recovery process. Alnoda workspace can be configured to suit a particular project, encompassing aspects such as the cloud profile, terraform workspace, code repositories, kubeconfig files, environmental variables and everything else. All of these components are set into motion the moment you launch the workspace, eliminating the need for numerous individual actions.","title":"Quick context switching"},{"location":"about/productivity/#backup-projects","text":"Do you have a fully functional proof-of-concept (POC) for a web application or service, scripts for provisioning cloud infrastructure, or setting up a Kubernetes cluster? Perhaps you have research or simulations that produce tangible results? Or a machine learning model with impressive predictive performance? If so, now is the ideal moment to secure your entire project, encompassing all configuration files, artifacts, environmental variables, bootstrap scripts, and Markdown or LaTeX documents. Preserve and back up your entire workspace. This will allow you to continue developing software, run new simulations with varied parameters, and train machine learning models on new datasets - all while mitigating the risk of losing your achieved milestones without the ability to replicate them.","title":"Backup projects"},{"location":"about/productivity/#move-between-computers-and-servers","text":"Do you find yourself coding at the office and wish to proceed with your work over the weekend at home, without having to carry your work laptop? That's not an issue. All you need to do is pause the workspace on your work laptop, and resume it once you're at home. Alnoda will handle the task of synchronizing the workspace across different computers. Are simulations on your laptop or training of machine learning model taking longer than expected? That's no cause for concern. You can simply halt the workspace on your laptop and start it on a beefy cloud server with a GPU. Conduct your experiments, train your machine learning model, and then continue working on your laptop. And this moves can be achieved with just a few click of Alnoda desktop apps. This eliminates the need to provision a cloud server and going through the cumbersome process of installing dependencies and packages.","title":"Move between computers and servers"},{"location":"about/productivity/#experimentation","text":"Another notable feature of Alnoda workspaces - is the ability to conduct isolated experiments. Each project can have its own dedicated container, allowing developers to experiment with different libraries, frameworks, and configurations without affecting their main development environment. This enables rapid prototyping, iterative development, and easy rollback to previous states, providing a flexible and risk-free environment for innovation.","title":"Experimentation"},{"location":"about/productivity/#from-dev-to-poc","text":"Do you have a proof-of-concept (POC) for a web app or API service that you're eager to showcase to clients, coworkers, or even friends? You can easily save your entire workspace and transfer it to a cloud server using a few clicks within the Alnoda desktop app. This process allows you to host your web application online without having to construct a distinct Docker image solely for the POC demonstration. Info With the ability to isolate projects, backup work, conduct isolated experiments, work on any computer, Alnoda workspaces empowers you to focus on what you do best: building exceptional software and driving technological advancements. Get ready to unleash your productivity and creativity with our containerized workspaces!","title":"From dev to POC"},{"location":"about/separation/","text":"Workspace separation In today's landscape, IT specialists often engage in concurrent work on multiple projects. Additionally, the rapid pace of technology necessitates continuous learning of new languages, exploration of novel tools and frameworks. Failing to segregate environments can lead to disorder and complexity Separation Issues Attention Mixing all projects in a single environment can lead to many problems! Typical problems that arise due to the absence of workspace separation include: Dependency Conflicts: Different projects may require different versions of libraries, frameworks, or packages. When you mix all projects in one environment, there is a higher chance of dependency conflicts. Conflicting dependencies can cause errors, incompatibilities, and hinder the proper functioning of the projects. Inconsistent Configurations: Each project may have its specific configurations, such as environment variables, database settings, or API keys. Mixing projects in a single environment can lead to inconsistent configurations, making it challenging to manage and maintain the settings for each project independently. Lack of Isolation: Projects often involve experimentation, testing, and modifications. Mixing all projects in one environment eliminates isolation between them. A bug or change in one project can potentially impact the functionality or stability of other projects, making it difficult to troubleshoot or isolate issues. Development Environment Setup Overhead: When working on a project, developers typically need to set up the necessary tools, dependencies, and configurations. Mixing all projects in one environment means repeating this setup process each time you switch between projects, leading to unnecessary overhead and potentially time-consuming configurations. Collaboration Challenges: Mixing projects in a single environment can make collaboration and team coordination more challenging. It becomes difficult to assign specific projects to team members, track progress, or manage development workflows. It can also lead to conflicts when multiple team members try to work on different projects simultaneously. Difficulty in Reproducibility: Mixing projects makes it harder to reproduce specific development setups or debug issues. It becomes challenging to pinpoint the exact environment and dependencies used for a particular project at a given point in time. This lack of reproducibility can impede troubleshooting and hinder project maintenance. Security Risks: Combining all projects in one environment increases the security risks. If one project or component within the environment is compromised, it puts all projects at risk. Isolating projects in separate environments limits the potential impact of security breaches, minimizing the scope of damage. Overall, mixing all projects in a single environment can lead to dependency conflicts, configuration inconsistencies, lack of isolation, collaboration challenges, reduced reproducibility, and increased security risks. Maintaining separate environments for each project helps mitigate these issues and allows for better organization, efficiency, and project management. While existing solutions for workspace separation, like virtual environments, offer numerous advantages, they also come with several drawbacks. These drawbacks include the overhead of configuration management and a steep learning curve. Additionally, switching between projects often involves multiple steps and lacks the ability to isolate configurations and secrets, as well as system dependencies. Info Alnoda aims to deliver a convenient solution for project isolation through the utilization of Docker containers. Our primary objective is to establish workspace isolation in the most user-friendly manner possible.","title":"Workspace separation"},{"location":"about/separation/#workspace-separation","text":"In today's landscape, IT specialists often engage in concurrent work on multiple projects. Additionally, the rapid pace of technology necessitates continuous learning of new languages, exploration of novel tools and frameworks. Failing to segregate environments can lead to disorder and complexity","title":"Workspace separation"},{"location":"about/separation/#separation-issues","text":"Attention Mixing all projects in a single environment can lead to many problems! Typical problems that arise due to the absence of workspace separation include: Dependency Conflicts: Different projects may require different versions of libraries, frameworks, or packages. When you mix all projects in one environment, there is a higher chance of dependency conflicts. Conflicting dependencies can cause errors, incompatibilities, and hinder the proper functioning of the projects. Inconsistent Configurations: Each project may have its specific configurations, such as environment variables, database settings, or API keys. Mixing projects in a single environment can lead to inconsistent configurations, making it challenging to manage and maintain the settings for each project independently. Lack of Isolation: Projects often involve experimentation, testing, and modifications. Mixing all projects in one environment eliminates isolation between them. A bug or change in one project can potentially impact the functionality or stability of other projects, making it difficult to troubleshoot or isolate issues. Development Environment Setup Overhead: When working on a project, developers typically need to set up the necessary tools, dependencies, and configurations. Mixing all projects in one environment means repeating this setup process each time you switch between projects, leading to unnecessary overhead and potentially time-consuming configurations. Collaboration Challenges: Mixing projects in a single environment can make collaboration and team coordination more challenging. It becomes difficult to assign specific projects to team members, track progress, or manage development workflows. It can also lead to conflicts when multiple team members try to work on different projects simultaneously. Difficulty in Reproducibility: Mixing projects makes it harder to reproduce specific development setups or debug issues. It becomes challenging to pinpoint the exact environment and dependencies used for a particular project at a given point in time. This lack of reproducibility can impede troubleshooting and hinder project maintenance. Security Risks: Combining all projects in one environment increases the security risks. If one project or component within the environment is compromised, it puts all projects at risk. Isolating projects in separate environments limits the potential impact of security breaches, minimizing the scope of damage. Overall, mixing all projects in a single environment can lead to dependency conflicts, configuration inconsistencies, lack of isolation, collaboration challenges, reduced reproducibility, and increased security risks. Maintaining separate environments for each project helps mitigate these issues and allows for better organization, efficiency, and project management. While existing solutions for workspace separation, like virtual environments, offer numerous advantages, they also come with several drawbacks. These drawbacks include the overhead of configuration management and a steep learning curve. Additionally, switching between projects often involves multiple steps and lacks the ability to isolate configurations and secrets, as well as system dependencies. Info Alnoda aims to deliver a convenient solution for project isolation through the utilization of Docker containers. Our primary objective is to establish workspace isolation in the most user-friendly manner possible.","title":"Separation Issues"},{"location":"about/use-cases/","text":"Use-cases Alnoda workspaces offer containerized environments for a wide range of IT specialists, including software developers, data analysts, DevOps professionals, site reliability engineers, data scientists, cloud infrastructure engineers, data engineers, and more. By leveraging Alnoda workspaces, users can enjoy numerous benefits and advantages. Dockerized workspaces can be especially useful in the following cases. Info Alnoda workspaces can be particularly useful when dealing with remote work scenarios, environments that involve multiple complex projects, and cloud infrastructures. Distributed team Distributed software development teams frequently encounter difficulties related to communication, coordination, and the knowledge sharing. You can use Alnoda workspaces to alleviate some of these issues: Configure the workspace environment once and all team members can replicate it exactly, eliminating the classic \"it works on my machine\" problem. The workspace encapsulates everything needed to run the application - code, runtime, system tools, libraries - ensuring consistency across various setups. Onboard newcomers faster. Alnoda workspaces can significantly reduce the time needed to onboard new team members. Instead of spending time setting up their development environment, downloading dependencies, and aligning their setup with the existing team's setup, newcomers can simply pull the pre-configured container and be up and running quickly. This not only expedites their ability to contribute to the project but also ensures they have the exact same setup as existing team members. Share your workspace with your teammates and collaborate efficiently. Whether you're operating your workspace in the cloud or on your personal laptop, granting access to your workspace terminal or any workspace applications to your team members is straightforward. This simplifies the process of coding in the same IDE, experimenting within the same Jupyter notebook, seeking guidance from a more experienced colleague, or showcasing your work outcomes without needing to take any additional steps. Cloud infrastructure If you're dealing with self-hosted databases, message queues, data processing clusters, or numerous services within a Kubernetes cluster or simply in a private cloud network, administrative tasks such as database management, workload testing, backup scheduling, or HTTP benchmarking of deployed services can pose a challenge. In such scenarios, Alnoda workspaces can be particularly useful. On-Site administration inside kubernetes clusters. You can launch an admin workspace directly inside your Kubernetes cluster and manage databases deployed there. From within this workspace, you can apply Data Definition Language (DDL) operations, schedule backups, send and consume test messages from the event stream, ping microservices, and conduct HTTP/gRPC benchmarking. Internal development platform: you can create an enntire internal development platform for your team by launching personal workspaces directly in the Kubernetes cluster on private virtual servers. This setup encourages a seamless and consistent working environment, further facilitating project development and team collaboration. Management of cloud infrastructures: Alnoda workspaces can be utilized to uniformly develop and manage cloud infrastructures within private networks. All you need to do is deploy the workspace within the private network and create a load balancer to enable interaction with the workspace over the Internet. Startup For startups, agility and speed are paramount. Alnoda workspaces can significantly contribute to maintaining this rapid pace by offering flexible and efficient development solutions. Here's how: Fast project initiation: Alnoda Hub has many pre-configured workspaces for various projects. By choosing an appropriate workspace for your project, you can start working faster without spending significant time setting up your development environment. This feature is particularly beneficial when you want to quickly explore a new idea or technology, as it allows you to get started in a matter of minutes, not hours or days. Seamless cloud deployment and collaboration: with Alnoda workspaces, you can launch your workspace on a cloud server and use it as the development deployment for your proof-of-concept (POC). This means your team members can work together in the same workspace, regardless of their physical location. They can code, test, and see the results in real time without needing to go through the time-consuming process of deploying the application after every change. This feature greatly enhances team collaboration and enables a faster iteration cycle, both of which are crucial for startups aiming to move fast and adapt quickly. Easy prototype demonstration: Alnoda workspaces also facilitate the demonstration of prototypes to potential customers or investors. You can provide access to your workspace over the internet, allowing external stakeholders to interact with your application directly within the workspace. This eliminates the need for setting up a separate demonstration environment or worrying about software compatibility issues on the recipient's end. It also provides a more immersive experience for the viewer, which can help in getting more valuable feedback or convincing potential investors. Process optimisation All businesses grapple with the task of automating and optimizing their business processes and IT operations. This often includes activities such as data exchange and reporting between departments, statistical analysis, A/B testing, data synchronization between disparate systems, web scraping, black-box testing, and more. Alnoda workspaces can greatly simplify these operations: Fast and efficient automation of online scripts. By running workspaces in your cloud infrastructure, you can write automation scripts online and schedule them without the need for any CI/CD or deployment processes. This approach can significantly speed up experimentation and automation efforts, often proving sufficient for process automation and operational optimization. Data sharing via the workspace Filebrowser. Alnoda workspaces offer the ability to share data with other teams using the built-in Filebrowser. This feature facilitates seamless data exchange between teams, making collaboration more effective and efficient. Customization with applications from Alnoda Hub. The Alnoda Hub allows for the addition of applications to meet your specific needs. For example, you could install Olive Tin to enable your users to run scripts on demand. This adaptability ensures your workspace remains a versatile tool that evolves with your business requirements. Freelancer Freelancers frequently juggle multiple projects for various clients, which can sometimes make it challenging to transition smoothly from one task to another. Furthermore, returning to old projects or tasks can become a hurdle when the development environment has changed, making it hard to reproduce past results. Alnoda workspaces can be an excellent solution for freelancers to overcome these issues by offering the following advantages: Project Isolation: With Alnoda workspaces, freelancers can create containerized isolated environments for each project. This means that each workspace contains only the specific tools, libraries, and configurations needed for that particular project. As such, changes made for one project won't affect others, and the risk of software conflicts is significantly reduced. This level of isolation is especially beneficial when working on projects with differing requirements. Seamless context switching: Alnoda workspaces simplify the process of switching between different projects. With each project's environment contained in its own workspace, freelancers can simply switch from one workspace to another without needing to make several steps for reconfiguring their development environment each time. Easy demonstration over the Internet: Alnoda workspaces also provide the ability to demonstrate work results over the Internet from your laptop with just a single click. This feature makes it very simple for freelancers to share their work with clients or collaborators without needeing to deploy the POC solution in cloud. The work can be shared and viewed directly in the workspace, making collaboration and feedback processes much more straightforward. Researcher Reproducibility of results is essential in the field of research. Researchers typically deal with intricate and quite complex environments that incorporate a multitude of scientific packages and system dependencies. These packages frequently undergo updates, are hard to set up and may be in conflict with one another. Moreover, researchers often make alterations to their environment as part of their experimentation, which adds to the challenge of achieving reproducible research. Alnoda workspaces offer valuable solutions to these issues: Preconfigured workspaces from Alnoda Hub: Alnoda Hub might already have a workspace tailored to research and experimentation needs. For instance, if the research requires the Julia, Python, and R programming languages in conjunction with RStudio and JupyterLab, these you might find it in the Alnoda Hub. Even if a workspace isn't readily available, the wide array of applications within the Alnoda Hub allows researchers to easily construct the workspace that fits their requirements. Workspace backup, save, and restore: with Alnoda workspaces, researchers can back up, save, and restore their entire workspace, including all system and scientific dependencies, datasets, configurations, generated reports, and documentation. This capability enhances the reproducibility and shareability of research, making it possible to replicate studies fully. True workspace portability: seamless workspace mobility between personal laptop and cloud server. Often, researchers need to perform complex computations, simulations, or train machine learning models that necessitate the use of a powerful server or GPU. Setting up such an intricate environment on a server can be time-consuming. Alnoda workspaces alleviate this problem by enabling the seamless \"movement\" of the workspace to a cloud server, bypassing any additional server configuration. This feature allows for an effortless transition between local and server-based work, significantly increasing efficiency and productivity. Digital nomad If you're a digital nomad, traversing the globe while working, Alnoda Workspaces can prove to be highly beneficial. The ability to transfer your workspace between the cloud and your personal computer allows for enhanced flexibility. You can work in the cloud through an internet connection or operate offline on your laptop, making it a perfect fit for a mobile, globe-trotting lifestyle. Hobby projects If you're engaging in personal hobby projects, Alnoda workspaces could offer distinct advantages: The real appeal of Alnoda workspaces lies in their portability. You can seamlessly transfer them from your personal computer to a cloud server whenever required. This means that as long as you have an internet connection, you can pick up where you left off on your project, making use of every spare minute. Containing a project, with all its dependencies and artifacts, within a containerized workspace simplifies the task of switching contexts. You can quickly alternate between work and your personal project in a matter of minutes, optimizing your productivity and time management.","title":"Use-cases"},{"location":"about/use-cases/#use-cases","text":"Alnoda workspaces offer containerized environments for a wide range of IT specialists, including software developers, data analysts, DevOps professionals, site reliability engineers, data scientists, cloud infrastructure engineers, data engineers, and more. By leveraging Alnoda workspaces, users can enjoy numerous benefits and advantages. Dockerized workspaces can be especially useful in the following cases. Info Alnoda workspaces can be particularly useful when dealing with remote work scenarios, environments that involve multiple complex projects, and cloud infrastructures.","title":"Use-cases"},{"location":"about/use-cases/#distributed-team","text":"Distributed software development teams frequently encounter difficulties related to communication, coordination, and the knowledge sharing. You can use Alnoda workspaces to alleviate some of these issues: Configure the workspace environment once and all team members can replicate it exactly, eliminating the classic \"it works on my machine\" problem. The workspace encapsulates everything needed to run the application - code, runtime, system tools, libraries - ensuring consistency across various setups. Onboard newcomers faster. Alnoda workspaces can significantly reduce the time needed to onboard new team members. Instead of spending time setting up their development environment, downloading dependencies, and aligning their setup with the existing team's setup, newcomers can simply pull the pre-configured container and be up and running quickly. This not only expedites their ability to contribute to the project but also ensures they have the exact same setup as existing team members. Share your workspace with your teammates and collaborate efficiently. Whether you're operating your workspace in the cloud or on your personal laptop, granting access to your workspace terminal or any workspace applications to your team members is straightforward. This simplifies the process of coding in the same IDE, experimenting within the same Jupyter notebook, seeking guidance from a more experienced colleague, or showcasing your work outcomes without needing to take any additional steps.","title":"Distributed team"},{"location":"about/use-cases/#cloud-infrastructure","text":"If you're dealing with self-hosted databases, message queues, data processing clusters, or numerous services within a Kubernetes cluster or simply in a private cloud network, administrative tasks such as database management, workload testing, backup scheduling, or HTTP benchmarking of deployed services can pose a challenge. In such scenarios, Alnoda workspaces can be particularly useful. On-Site administration inside kubernetes clusters. You can launch an admin workspace directly inside your Kubernetes cluster and manage databases deployed there. From within this workspace, you can apply Data Definition Language (DDL) operations, schedule backups, send and consume test messages from the event stream, ping microservices, and conduct HTTP/gRPC benchmarking. Internal development platform: you can create an enntire internal development platform for your team by launching personal workspaces directly in the Kubernetes cluster on private virtual servers. This setup encourages a seamless and consistent working environment, further facilitating project development and team collaboration. Management of cloud infrastructures: Alnoda workspaces can be utilized to uniformly develop and manage cloud infrastructures within private networks. All you need to do is deploy the workspace within the private network and create a load balancer to enable interaction with the workspace over the Internet.","title":"Cloud infrastructure"},{"location":"about/use-cases/#startup","text":"For startups, agility and speed are paramount. Alnoda workspaces can significantly contribute to maintaining this rapid pace by offering flexible and efficient development solutions. Here's how: Fast project initiation: Alnoda Hub has many pre-configured workspaces for various projects. By choosing an appropriate workspace for your project, you can start working faster without spending significant time setting up your development environment. This feature is particularly beneficial when you want to quickly explore a new idea or technology, as it allows you to get started in a matter of minutes, not hours or days. Seamless cloud deployment and collaboration: with Alnoda workspaces, you can launch your workspace on a cloud server and use it as the development deployment for your proof-of-concept (POC). This means your team members can work together in the same workspace, regardless of their physical location. They can code, test, and see the results in real time without needing to go through the time-consuming process of deploying the application after every change. This feature greatly enhances team collaboration and enables a faster iteration cycle, both of which are crucial for startups aiming to move fast and adapt quickly. Easy prototype demonstration: Alnoda workspaces also facilitate the demonstration of prototypes to potential customers or investors. You can provide access to your workspace over the internet, allowing external stakeholders to interact with your application directly within the workspace. This eliminates the need for setting up a separate demonstration environment or worrying about software compatibility issues on the recipient's end. It also provides a more immersive experience for the viewer, which can help in getting more valuable feedback or convincing potential investors.","title":"Startup"},{"location":"about/use-cases/#process-optimisation","text":"All businesses grapple with the task of automating and optimizing their business processes and IT operations. This often includes activities such as data exchange and reporting between departments, statistical analysis, A/B testing, data synchronization between disparate systems, web scraping, black-box testing, and more. Alnoda workspaces can greatly simplify these operations: Fast and efficient automation of online scripts. By running workspaces in your cloud infrastructure, you can write automation scripts online and schedule them without the need for any CI/CD or deployment processes. This approach can significantly speed up experimentation and automation efforts, often proving sufficient for process automation and operational optimization. Data sharing via the workspace Filebrowser. Alnoda workspaces offer the ability to share data with other teams using the built-in Filebrowser. This feature facilitates seamless data exchange between teams, making collaboration more effective and efficient. Customization with applications from Alnoda Hub. The Alnoda Hub allows for the addition of applications to meet your specific needs. For example, you could install Olive Tin to enable your users to run scripts on demand. This adaptability ensures your workspace remains a versatile tool that evolves with your business requirements.","title":"Process optimisation"},{"location":"about/use-cases/#freelancer","text":"Freelancers frequently juggle multiple projects for various clients, which can sometimes make it challenging to transition smoothly from one task to another. Furthermore, returning to old projects or tasks can become a hurdle when the development environment has changed, making it hard to reproduce past results. Alnoda workspaces can be an excellent solution for freelancers to overcome these issues by offering the following advantages: Project Isolation: With Alnoda workspaces, freelancers can create containerized isolated environments for each project. This means that each workspace contains only the specific tools, libraries, and configurations needed for that particular project. As such, changes made for one project won't affect others, and the risk of software conflicts is significantly reduced. This level of isolation is especially beneficial when working on projects with differing requirements. Seamless context switching: Alnoda workspaces simplify the process of switching between different projects. With each project's environment contained in its own workspace, freelancers can simply switch from one workspace to another without needing to make several steps for reconfiguring their development environment each time. Easy demonstration over the Internet: Alnoda workspaces also provide the ability to demonstrate work results over the Internet from your laptop with just a single click. This feature makes it very simple for freelancers to share their work with clients or collaborators without needeing to deploy the POC solution in cloud. The work can be shared and viewed directly in the workspace, making collaboration and feedback processes much more straightforward.","title":"Freelancer"},{"location":"about/use-cases/#researcher","text":"Reproducibility of results is essential in the field of research. Researchers typically deal with intricate and quite complex environments that incorporate a multitude of scientific packages and system dependencies. These packages frequently undergo updates, are hard to set up and may be in conflict with one another. Moreover, researchers often make alterations to their environment as part of their experimentation, which adds to the challenge of achieving reproducible research. Alnoda workspaces offer valuable solutions to these issues: Preconfigured workspaces from Alnoda Hub: Alnoda Hub might already have a workspace tailored to research and experimentation needs. For instance, if the research requires the Julia, Python, and R programming languages in conjunction with RStudio and JupyterLab, these you might find it in the Alnoda Hub. Even if a workspace isn't readily available, the wide array of applications within the Alnoda Hub allows researchers to easily construct the workspace that fits their requirements. Workspace backup, save, and restore: with Alnoda workspaces, researchers can back up, save, and restore their entire workspace, including all system and scientific dependencies, datasets, configurations, generated reports, and documentation. This capability enhances the reproducibility and shareability of research, making it possible to replicate studies fully. True workspace portability: seamless workspace mobility between personal laptop and cloud server. Often, researchers need to perform complex computations, simulations, or train machine learning models that necessitate the use of a powerful server or GPU. Setting up such an intricate environment on a server can be time-consuming. Alnoda workspaces alleviate this problem by enabling the seamless \"movement\" of the workspace to a cloud server, bypassing any additional server configuration. This feature allows for an effortless transition between local and server-based work, significantly increasing efficiency and productivity.","title":"Researcher"},{"location":"about/use-cases/#digital-nomad","text":"If you're a digital nomad, traversing the globe while working, Alnoda Workspaces can prove to be highly beneficial. The ability to transfer your workspace between the cloud and your personal computer allows for enhanced flexibility. You can work in the cloud through an internet connection or operate offline on your laptop, making it a perfect fit for a mobile, globe-trotting lifestyle.","title":"Digital nomad"},{"location":"about/use-cases/#hobby-projects","text":"If you're engaging in personal hobby projects, Alnoda workspaces could offer distinct advantages: The real appeal of Alnoda workspaces lies in their portability. You can seamlessly transfer them from your personal computer to a cloud server whenever required. This means that as long as you have an internet connection, you can pick up where you left off on your project, making use of every spare minute. Containing a project, with all its dependencies and artifacts, within a containerized workspace simplifies the task of switching contexts. You can quickly alternate between work and your personal project in a matter of minutes, optimizing your productivity and time management.","title":"Hobby projects"},{"location":"about/what-is-workspace/","text":"Workspace A typical workspace often includes a range of tools that facilitate coding, debugging, collaboration, version control, and project management. Depending on the user's role and project purpose, workspace can include tools to develop and orchestrate workflows, interact and query databases, explore datasets, train ML models, track experiments, work with cloud servises and much more! Info Workspace - is a designated environment where developers, engineers, analysts, scientists and other professionals carry out their work. It is a digital space that encompasses the tools, resources, and configurations required for productive and efficient work on projects. Depending on the role, IT professionals use workspaces with different unique set of tools. Below you will find couple of workspace examples. Basic Workspace A very basic workspace can have the following tools: Integrated Development Environment (IDE) or Code Editors: For example, Visual Studio Code, Vim, Emacs. Some of these tools have syntax highlighting, auto-completion, debugging features. Command Line Interface (CLI): The command-line interface (terminal) allows to execute commands, run scripts, manage dependencies, and interact with the file system. Version Control System: Git is the most widely used version control system. In addition, platforms like GitHub or GitLab have their own CLI tools that can improve your experience and productivity. Developer Workspace A software developer workspace is a personalized environment where software developers create, modify, and maintain software applications. It includes a range of tools, technologies, and resources to support the development process. Programming Languages and Runtimes, for example, Java Runtime Environment (JRE) or Java Development Kit (JDK), to develop and run Java applications. Similarly, Python interpreter, Go runtime, etc. Package Managers to manage project dependencies and libraries. Examples include npm for JavaScript, pip for Python, Maven for Java, or RubyGems for Ruby. Testing Frameworks such as JUnit for Java, pytest for Python, Mocha for JavaScript, or NUnit for .NET provide tools for automated unit testing and test-driven development (TDD). Build and Automation Tools: Tools like Make, Gradle, Maven, or Ant help automate build processes, compile code, manage dependencies, and run tests. Local instances of databases and message queues: Postgres, Kafka, Redis, RabbitMQ and other. Data engineer workspace A data engineer workspace is a specialized environment tailored to the needs of data engineers who work with large-scale data processing, data integration, and data infrastructure. It includes a range of tools, technologies, and resources to support the design, development, and maintenance of data pipelines, databases, and data systems. Scripting Languages: languages like Python, R or Scala are commonly used for scripting, data transformations, and automation. ELT tools used to extract data from varions sources, load into analytical databases and transform for reporting, such as Singer, Meltano, Airbyte, DBT Wokrkflow Orchestration Tools that enable creation of complex multi-step pipelines and schedule their executions. Data Processing Frameworks such as Apache Spark, Apache Hadoop, or Apache Flink. Data Integration Tools: Apache Kafka, Apache NiFi, Apache Airflow for data ingestion, data streaming, and workflow management. Database Systems Exploration and Management Tools - tools that allow to explore and query data, fix data issues, ingest/download datasets. Data Modeling and ETL Tools: Data engineers employ tools like Apache Hive, Apache Pig, or Talend for data modeling and ETL (Extract, Transform, Load) processes. These tools help in organizing, transforming, and preparing data for analysis and consumption. Data Quality and Testing Tools: Data engineers employ tools like Great Expectations, Apache Hudi, or Apache Griffin to validate data quality, perform data profiling, and ensure the accuracy and reliability of data pipelines and systems.","title":"What is workspace"},{"location":"about/what-is-workspace/#workspace","text":"A typical workspace often includes a range of tools that facilitate coding, debugging, collaboration, version control, and project management. Depending on the user's role and project purpose, workspace can include tools to develop and orchestrate workflows, interact and query databases, explore datasets, train ML models, track experiments, work with cloud servises and much more! Info Workspace - is a designated environment where developers, engineers, analysts, scientists and other professionals carry out their work. It is a digital space that encompasses the tools, resources, and configurations required for productive and efficient work on projects. Depending on the role, IT professionals use workspaces with different unique set of tools. Below you will find couple of workspace examples.","title":"Workspace"},{"location":"about/what-is-workspace/#basic-workspace","text":"A very basic workspace can have the following tools: Integrated Development Environment (IDE) or Code Editors: For example, Visual Studio Code, Vim, Emacs. Some of these tools have syntax highlighting, auto-completion, debugging features. Command Line Interface (CLI): The command-line interface (terminal) allows to execute commands, run scripts, manage dependencies, and interact with the file system. Version Control System: Git is the most widely used version control system. In addition, platforms like GitHub or GitLab have their own CLI tools that can improve your experience and productivity.","title":"Basic Workspace"},{"location":"about/what-is-workspace/#developer-workspace","text":"A software developer workspace is a personalized environment where software developers create, modify, and maintain software applications. It includes a range of tools, technologies, and resources to support the development process. Programming Languages and Runtimes, for example, Java Runtime Environment (JRE) or Java Development Kit (JDK), to develop and run Java applications. Similarly, Python interpreter, Go runtime, etc. Package Managers to manage project dependencies and libraries. Examples include npm for JavaScript, pip for Python, Maven for Java, or RubyGems for Ruby. Testing Frameworks such as JUnit for Java, pytest for Python, Mocha for JavaScript, or NUnit for .NET provide tools for automated unit testing and test-driven development (TDD). Build and Automation Tools: Tools like Make, Gradle, Maven, or Ant help automate build processes, compile code, manage dependencies, and run tests. Local instances of databases and message queues: Postgres, Kafka, Redis, RabbitMQ and other.","title":"Developer Workspace"},{"location":"about/what-is-workspace/#data-engineer-workspace","text":"A data engineer workspace is a specialized environment tailored to the needs of data engineers who work with large-scale data processing, data integration, and data infrastructure. It includes a range of tools, technologies, and resources to support the design, development, and maintenance of data pipelines, databases, and data systems. Scripting Languages: languages like Python, R or Scala are commonly used for scripting, data transformations, and automation. ELT tools used to extract data from varions sources, load into analytical databases and transform for reporting, such as Singer, Meltano, Airbyte, DBT Wokrkflow Orchestration Tools that enable creation of complex multi-step pipelines and schedule their executions. Data Processing Frameworks such as Apache Spark, Apache Hadoop, or Apache Flink. Data Integration Tools: Apache Kafka, Apache NiFi, Apache Airflow for data ingestion, data streaming, and workflow management. Database Systems Exploration and Management Tools - tools that allow to explore and query data, fix data issues, ingest/download datasets. Data Modeling and ETL Tools: Data engineers employ tools like Apache Hive, Apache Pig, or Talend for data modeling and ETL (Extract, Transform, Load) processes. These tools help in organizing, transforming, and preparing data for analysis and consumption. Data Quality and Testing Tools: Data engineers employ tools like Great Expectations, Apache Hudi, or Apache Griffin to validate data quality, perform data profiling, and ensure the accuracy and reliability of data pipelines and systems.","title":"Data engineer workspace"},{"location":"get-started/enhance-terminal/","text":"","title":"Enhance terminal"},{"location":"get-started/file-browser/","text":"File browser Filebrowser allows seamless uploading and downloading of files to and from the workspace, whether it is running on your personal computer or a cloud server. It eliminates the requirement for folder mounting and serves as a convenient file exchange mechanism when the workspace is deployed in the cloud. Info Filebrowser is installed in every workspace by default. It makes it easy to manage files and folders in the worspace, view images or videos and edit files. var animation = bodymovin.loadAnimation({ container: document.getElementById('lottieAnimation'), renderer: 'svg', loop: true, autoplay: true, path: '../img/arrow-circle-right.json' });","title":"File browser"},{"location":"get-started/file-browser/#file-browser","text":"Filebrowser allows seamless uploading and downloading of files to and from the workspace, whether it is running on your personal computer or a cloud server. It eliminates the requirement for folder mounting and serves as a convenient file exchange mechanism when the workspace is deployed in the cloud. Info Filebrowser is installed in every workspace by default. It makes it easy to manage files and folders in the worspace, view images or videos and edit files. var animation = bodymovin.loadAnimation({ container: document.getElementById('lottieAnimation'), renderer: 'svg', loop: true, autoplay: true, path: '../img/arrow-circle-right.json' });","title":"File browser"},{"location":"get-started/install-code-editor/","text":"Install Code Editor Adding a code editor to any Alnoda workspace is a very easy. Alnoda Hub offers a vast collection of browser-based code editors, including versatile IDEs like VSCode, as well as specialized IDEs like RStudio. Tip Explore Alnoda Hub to find your favourite code editor. Let's add one of the VSCode versions. You only need to execute wrk install openvscode in the workspace terminal $ wrk install openvscode \u2728 starting... \u26a0\ufe0f Please DO NOT close this terminal window untill app is fully installed! \u27a1\ufe0f checking workspace compatibility... \u27a1\ufe0f checking app compatibility... \u27a1\ufe0f assigning port... \u27a1\ufe0f executing installation script... \u2714\ufe0f app installed \u27a1\ufe0f setting startup configuration... ------------------------------------------------------------- - \u26a0\ufe0f application will start after workspace is restarted \u26a0\ufe0f - --- restart workspace with 'wrk kill' --- ------------------------------------------------------------- \u27a1\ufe0f updating workspace UI... \u27a1\ufe0f adding workspace tags... \u2757 Could not update workspace app history at alnoda.org: Not authenticated at alnoda.org \u270d\ufe0f If app is not working try restarting terminal window or entire workspace \ud83d\ude80 done R E S T A R T T E R M I N A L N O W ( CTRL+D ) !!!!!!!! Note After installation of applications it is necessary to restart workspace! Restart workspace with the command wrk kill $ wrk kill \u26a0\ufe0f WARNING: this will stop the workspace. Do you want to continue \u2753 [ y/N ] : After worksapce is restarted you can open IDE from the workspace home page. Explore Alnoda Hub to find many more awesome applications to install var animation = bodymovin.loadAnimation({ container: document.getElementById('lottieAnimation'), renderer: 'svg', loop: true, autoplay: true, path: '../img/arrow-circle-right.json' });","title":"Install Code Editor"},{"location":"get-started/install-code-editor/#install-code-editor","text":"Adding a code editor to any Alnoda workspace is a very easy. Alnoda Hub offers a vast collection of browser-based code editors, including versatile IDEs like VSCode, as well as specialized IDEs like RStudio. Tip Explore Alnoda Hub to find your favourite code editor. Let's add one of the VSCode versions. You only need to execute wrk install openvscode in the workspace terminal $ wrk install openvscode \u2728 starting... \u26a0\ufe0f Please DO NOT close this terminal window untill app is fully installed! \u27a1\ufe0f checking workspace compatibility... \u27a1\ufe0f checking app compatibility... \u27a1\ufe0f assigning port... \u27a1\ufe0f executing installation script... \u2714\ufe0f app installed \u27a1\ufe0f setting startup configuration... ------------------------------------------------------------- - \u26a0\ufe0f application will start after workspace is restarted \u26a0\ufe0f - --- restart workspace with 'wrk kill' --- ------------------------------------------------------------- \u27a1\ufe0f updating workspace UI... \u27a1\ufe0f adding workspace tags... \u2757 Could not update workspace app history at alnoda.org: Not authenticated at alnoda.org \u270d\ufe0f If app is not working try restarting terminal window or entire workspace \ud83d\ude80 done R E S T A R T T E R M I N A L N O W ( CTRL+D ) !!!!!!!! Note After installation of applications it is necessary to restart workspace! Restart workspace with the command wrk kill $ wrk kill \u26a0\ufe0f WARNING: this will stop the workspace. Do you want to continue \u2753 [ y/N ] : After worksapce is restarted you can open IDE from the workspace home page. Explore Alnoda Hub to find many more awesome applications to install var animation = bodymovin.loadAnimation({ container: document.getElementById('lottieAnimation'), renderer: 'svg', loop: true, autoplay: true, path: '../img/arrow-circle-right.json' });","title":"Install Code Editor"},{"location":"get-started/install-desktop/","text":"Install Desktop Do you want to get even more desktop experience? Install browser-based desktop from Alnoda Hub! KodExplorer is windows-style desktop environment with file manager and code editor. $ wrk install kodexplorer \u2728 starting... \u26a0\ufe0f Please DO NOT close this terminal window untill app is fully installed! \u27a1\ufe0f checking workspace compatibility... \u27a1\ufe0f checking app compatibility... \u27a1\ufe0f assigning port... \u27a1\ufe0f executing installation script... \u2714\ufe0f app installed \u27a1\ufe0f setting startup configuration... ------------------------------------------------------------- - \u26a0\ufe0f application will start after workspace is restarted \u26a0\ufe0f - --- restart workspace with 'wrk kill' --- ------------------------------------------------------------- \u27a1\ufe0f updating workspace UI... \u27a1\ufe0f adding workspace tags... \u2757 Could not update workspace app history at alnoda.org: Not authenticated at alnoda.org \u270d\ufe0f If app is not working try restarting terminal window or entire workspace \ud83d\ude80 done R E S T A R T T E R M I N A L N O W ( CTRL+D ) !!!!!!!! Note After installation of applications it is necessary to restart workspace! Restart workspace with the command wrk kill $ wrk kill \u26a0\ufe0f WARNING: this will stop the workspace. Do you want to continue \u2753 [ y/N ] : After worksapce is restarted you can open KodExplorer from the workspace home page. \ud83d\udca1 Explore Alnoda Hub to find many more awesome applications to install var animation = bodymovin.loadAnimation({ container: document.getElementById('lottieAnimation'), renderer: 'svg', loop: true, autoplay: true, path: '../img/arrow-circle-right.json' });","title":"Install Desktop"},{"location":"get-started/install-desktop/#install-desktop","text":"Do you want to get even more desktop experience? Install browser-based desktop from Alnoda Hub! KodExplorer is windows-style desktop environment with file manager and code editor. $ wrk install kodexplorer \u2728 starting... \u26a0\ufe0f Please DO NOT close this terminal window untill app is fully installed! \u27a1\ufe0f checking workspace compatibility... \u27a1\ufe0f checking app compatibility... \u27a1\ufe0f assigning port... \u27a1\ufe0f executing installation script... \u2714\ufe0f app installed \u27a1\ufe0f setting startup configuration... ------------------------------------------------------------- - \u26a0\ufe0f application will start after workspace is restarted \u26a0\ufe0f - --- restart workspace with 'wrk kill' --- ------------------------------------------------------------- \u27a1\ufe0f updating workspace UI... \u27a1\ufe0f adding workspace tags... \u2757 Could not update workspace app history at alnoda.org: Not authenticated at alnoda.org \u270d\ufe0f If app is not working try restarting terminal window or entire workspace \ud83d\ude80 done R E S T A R T T E R M I N A L N O W ( CTRL+D ) !!!!!!!! Note After installation of applications it is necessary to restart workspace! Restart workspace with the command wrk kill $ wrk kill \u26a0\ufe0f WARNING: this will stop the workspace. Do you want to continue \u2753 [ y/N ] : After worksapce is restarted you can open KodExplorer from the workspace home page. \ud83d\udca1 Explore Alnoda Hub to find many more awesome applications to install var animation = bodymovin.loadAnimation({ container: document.getElementById('lottieAnimation'), renderer: 'svg', loop: true, autoplay: true, path: '../img/arrow-circle-right.json' });","title":"Install Desktop"},{"location":"get-started/install-file-manager/","text":"Install file manager In Alnoda Hub you can find many applications that would improve your workspace experience. One of them is Cloud Commander - browser-based file manager which has many very useful features: 2 classic panels 3 built-in editors with support of syntax highlighting Console with support of the default OS command line Built-in archives extract: zip, tar, gz, bz2, .tar.gz and .tar.bz2 To istall Cloud Commander execute wrk install cloud-commander in the workspace terminal $ wrk install cloud-commander \u2728 starting... \u26a0\ufe0f Please DO NOT close this terminal window untill app is fully installed! \u27a1\ufe0f checking workspace compatibility... \u27a1\ufe0f checking app compatibility... \u27a1\ufe0f assigning port... \u27a1\ufe0f executing installation script... \u2714\ufe0f app installed \u27a1\ufe0f setting startup configuration... ------------------------------------------------------------- - \u26a0\ufe0f application will start after workspace is restarted \u26a0\ufe0f - --- restart workspace with 'wrk kill' --- ------------------------------------------------------------- \u27a1\ufe0f updating workspace UI... \u27a1\ufe0f adding workspace tags... \u2757 Could not update workspace app history at alnoda.org: Not authenticated at alnoda.org \u270d\ufe0f If app is not working try restarting terminal window or entire workspace \ud83d\ude80 done R E S T A R T T E R M I N A L N O W ( CTRL+D ) !!!!!!!! Note After installation of applications it is necessary to restart workspace! Restart workspace with the command wrk kill $ wrk kill \u26a0\ufe0f WARNING: this will stop the workspace. Do you want to continue \u2753 [ y/N ] : After worksapce is restarted you can open Cloud Commander from the workspace home page. Explore Alnoda Hub to find many more awesome applications to install var animation = bodymovin.loadAnimation({ container: document.getElementById('lottieAnimation'), renderer: 'svg', loop: true, autoplay: true, path: '../img/arrow-circle-right.json' });","title":"Install File Manager"},{"location":"get-started/install-file-manager/#install-file-manager","text":"In Alnoda Hub you can find many applications that would improve your workspace experience. One of them is Cloud Commander - browser-based file manager which has many very useful features: 2 classic panels 3 built-in editors with support of syntax highlighting Console with support of the default OS command line Built-in archives extract: zip, tar, gz, bz2, .tar.gz and .tar.bz2 To istall Cloud Commander execute wrk install cloud-commander in the workspace terminal $ wrk install cloud-commander \u2728 starting... \u26a0\ufe0f Please DO NOT close this terminal window untill app is fully installed! \u27a1\ufe0f checking workspace compatibility... \u27a1\ufe0f checking app compatibility... \u27a1\ufe0f assigning port... \u27a1\ufe0f executing installation script... \u2714\ufe0f app installed \u27a1\ufe0f setting startup configuration... ------------------------------------------------------------- - \u26a0\ufe0f application will start after workspace is restarted \u26a0\ufe0f - --- restart workspace with 'wrk kill' --- ------------------------------------------------------------- \u27a1\ufe0f updating workspace UI... \u27a1\ufe0f adding workspace tags... \u2757 Could not update workspace app history at alnoda.org: Not authenticated at alnoda.org \u270d\ufe0f If app is not working try restarting terminal window or entire workspace \ud83d\ude80 done R E S T A R T T E R M I N A L N O W ( CTRL+D ) !!!!!!!! Note After installation of applications it is necessary to restart workspace! Restart workspace with the command wrk kill $ wrk kill \u26a0\ufe0f WARNING: this will stop the workspace. Do you want to continue \u2753 [ y/N ] : After worksapce is restarted you can open Cloud Commander from the workspace home page. Explore Alnoda Hub to find many more awesome applications to install var animation = bodymovin.loadAnimation({ container: document.getElementById('lottieAnimation'), renderer: 'svg', loop: true, autoplay: true, path: '../img/arrow-circle-right.json' });","title":"Install file manager"},{"location":"get-started/launch-workspace/","text":"Launch workspace It is very easy to launch Alnoda workspace - it is just a Docker image, and all you need is to have Docker on your computer. If you don't have Docker installed, visit docker.com To start a basic Alnoda workspace simply execute this command in your terminal shell, it will work in any system docker run --name space-1 -d -p 8020-8040:8020-8040 --restart=always alnoda/alnoda-workspace Open your WEB browser and navigate to http://localhost:8020 The workspace UI home page includes default applications: a terminal and a file browser. You can open them directly from the page. Info You can launch a fully equipped development environment with many applications already installed. Explore Alnoda Hub to discover pre-configured workspaces. Lets explore default workspace applications: terminal and file browser. var animation = bodymovin.loadAnimation({ container: document.getElementById('lottieAnimation'), renderer: 'svg', loop: true, autoplay: true, path: '../img/arrow-circle-right.json' });","title":"Launch workspace"},{"location":"get-started/launch-workspace/#launch-workspace","text":"It is very easy to launch Alnoda workspace - it is just a Docker image, and all you need is to have Docker on your computer. If you don't have Docker installed, visit docker.com To start a basic Alnoda workspace simply execute this command in your terminal shell, it will work in any system docker run --name space-1 -d -p 8020-8040:8020-8040 --restart=always alnoda/alnoda-workspace Open your WEB browser and navigate to http://localhost:8020 The workspace UI home page includes default applications: a terminal and a file browser. You can open them directly from the page. Info You can launch a fully equipped development environment with many applications already installed. Explore Alnoda Hub to discover pre-configured workspaces. Lets explore default workspace applications: terminal and file browser. var animation = bodymovin.loadAnimation({ container: document.getElementById('lottieAnimation'), renderer: 'svg', loop: true, autoplay: true, path: '../img/arrow-circle-right.json' });","title":"Launch workspace"},{"location":"get-started/personalize/","text":"Personalize workspace To facilitate seamless switching between workspaces, personalizing each workspace can be very useful. This includes customizing its name, description, fonts, colors, and icons. By tailoring these aspects to your preferences, you can create a more intuitive and visually appealing workspace environment that suits your needs. Open workspace Admin page, and change workspace name and author: Modify fonts, colors, and icons: Info As a font you can use any Google font . Simply update the name of the font. Note Don't forget to sign in from your workspace to Alnoda Hub! You will be able to log your workspaces and applications you installed. var animation = bodymovin.loadAnimation({ container: document.getElementById('lottieAnimation'), renderer: 'svg', loop: true, autoplay: true, path: '../img/arrow-circle-right.json' });","title":"Personalize workspace"},{"location":"get-started/personalize/#personalize-workspace","text":"To facilitate seamless switching between workspaces, personalizing each workspace can be very useful. This includes customizing its name, description, fonts, colors, and icons. By tailoring these aspects to your preferences, you can create a more intuitive and visually appealing workspace environment that suits your needs. Open workspace Admin page, and change workspace name and author: Modify fonts, colors, and icons: Info As a font you can use any Google font . Simply update the name of the font. Note Don't forget to sign in from your workspace to Alnoda Hub! You will be able to log your workspaces and applications you installed. var animation = bodymovin.loadAnimation({ container: document.getElementById('lottieAnimation'), renderer: 'svg', loop: true, autoplay: true, path: '../img/arrow-circle-right.json' });","title":"Personalize workspace"},{"location":"get-started/share/","text":"Share workspace Ready for an online pair coding session? Grant your friend remote access to your code editor over the internet, enabling collaborative coding in real-time. Open Admin, and select VSCode application to share Accept terms and click button \"Share via Internet\" Send the secret link to your peer. From her browser she will have direct access to VSCode, even if the workspace is running on your PC. Warning Don't close the Admin page - this will stop the sharing session. Info After session ends you can start the sharing session again. Note You can share any application with browser-based UI including terminal, file manager or desktop. Hint Sign in from your workspace to Alnoda Hub and you will be have longer sessions.","title":"Share workspace"},{"location":"get-started/share/#share-workspace","text":"Ready for an online pair coding session? Grant your friend remote access to your code editor over the internet, enabling collaborative coding in real-time. Open Admin, and select VSCode application to share Accept terms and click button \"Share via Internet\" Send the secret link to your peer. From her browser she will have direct access to VSCode, even if the workspace is running on your PC. Warning Don't close the Admin page - this will stop the sharing session. Info After session ends you can start the sharing session again. Note You can share any application with browser-based UI including terminal, file manager or desktop. Hint Sign in from your workspace to Alnoda Hub and you will be have longer sessions.","title":"Share workspace"},{"location":"get-started/terminal/","text":"Terminal Terminal with a command-line interface (CLI) allows to interact with the workspace: execute commands, run programs, navigate the file system, manage files and directories, etc. Info Workspaces are based on Linux (Ubuntu) hence you can execute any Linux commands. Info Workspaces come with commonly used applications pre-installed, eliminating the need for repetitive installations when creating containerized environments. Try it out Let's clone GitHub repository and explore it with the pre-installed terminal file manager $ <font color = \"#5EA702\" >git</font> clone https://github.com/dbarnett/python-helloworld.git Cloning into 'python-helloworld' ... remote: Enumerating objects: 41 , done . remote: Counting objects: 100 % ( 8 /8 ) , done . remote: Compressing objects: 100 % ( 8 /8 ) , done . remote: Total 41 ( delta 2 ) , reused 0 ( delta 0 ) , pack-reused 33 Unpacking objects: 100 % ( 41 /41 ) , 10 .59 KiB | 349 .00 KiB/s, done . $ <font color = \"#5EA702\" >cd</font> python-helloworld $ mc Execute the command mc in the terminal to open the visual file manager Midnight Commander In the terminal file manager you can browse directories, view and edit files var animation = bodymovin.loadAnimation({ container: document.getElementById('lottieAnimation'), renderer: 'svg', loop: true, autoplay: true, path: '../img/arrow-circle-right.json' });","title":"Terminal"},{"location":"get-started/terminal/#terminal","text":"Terminal with a command-line interface (CLI) allows to interact with the workspace: execute commands, run programs, navigate the file system, manage files and directories, etc. Info Workspaces are based on Linux (Ubuntu) hence you can execute any Linux commands. Info Workspaces come with commonly used applications pre-installed, eliminating the need for repetitive installations when creating containerized environments.","title":"Terminal"},{"location":"get-started/terminal/#try-it-out","text":"Let's clone GitHub repository and explore it with the pre-installed terminal file manager $ <font color = \"#5EA702\" >git</font> clone https://github.com/dbarnett/python-helloworld.git Cloning into 'python-helloworld' ... remote: Enumerating objects: 41 , done . remote: Counting objects: 100 % ( 8 /8 ) , done . remote: Compressing objects: 100 % ( 8 /8 ) , done . remote: Total 41 ( delta 2 ) , reused 0 ( delta 0 ) , pack-reused 33 Unpacking objects: 100 % ( 41 /41 ) , 10 .59 KiB | 349 .00 KiB/s, done . $ <font color = \"#5EA702\" >cd</font> python-helloworld $ mc Execute the command mc in the terminal to open the visual file manager Midnight Commander In the terminal file manager you can browse directories, view and edit files var animation = bodymovin.loadAnimation({ container: document.getElementById('lottieAnimation'), renderer: 'svg', loop: true, autoplay: true, path: '../img/arrow-circle-right.json' });","title":"Try it out"},{"location":"user-guide/customize-ui/","text":"","title":"Customize ui"},{"location":"user-guide/extend-workspace/","text":"","title":"Extend workspace"},{"location":"user-guide/images/","text":"","title":"Images"},{"location":"user-guide/schedule-script/","text":"This tutorial shows how to scrap Google news on schedule. We use Python for the demonstration purpose. To start, open workspace terminal and install Python package GNews pip install gnews Create python script nano scraper.py Paste the following code snippet. This is scrapper, that will output results to a file from gnews import GNews import json google_news = GNews () usa_news = google_news . get_news ( 'USA' ) with open ( 'usa_news.json' , 'w' ) as f : json . dump ( usa_news , f ) Save the file with Ctrl+s and return to the terminal with Ctrl+x . Execute the script python3 scraper.py Navigate to Quickstart and Open file browser. View and download the output file Schedule daily executions with Cronicle Cron Note: you can also use cron scheduler to schedule executions of your tasks and jobs. Cron is pure terminal-based application. It is well-known and a greatly adopted tool. Check out this tutorial to learn how you can use cron in the workspace.","title":"Schedule script"},{"location":"user-guide/schedule-script/#cron","text":"Note: you can also use cron scheduler to schedule executions of your tasks and jobs. Cron is pure terminal-based application. It is well-known and a greatly adopted tool. Check out this tutorial to learn how you can use cron in the workspace.","title":"Cron"},{"location":"user-guide/admin/apps-services/","text":"Applications and services Persistent service Alnoda workspaces enable you to make any application or service persistently operational. This is facilitated by the supervisord process control system, which serves a function similar to that of the systemd service manager found in many Linux distributions, though systemd is not included in Alnoda workspaces. Supervisord ensures that all persistent services are initiated whenever a workspace container starts, facilitating the concurrent operation of multiple processes within the workspaces. While it's possible for you to manually adjust supervisord configuration files, the Alnoda Admin offers a user interface tool for this task. Within the 'Apps & Services' tab, you'll have the ability to create and delete services operating within the workspace. Here you can also see the logs and errors from the runninng or failed to start services. Warning After creating a new persistent service it is required to restart the worksapce for the new service to get up and runnig. You can do it with wrk kill command. As an example, let's create a service for a built-in static file server that will serve /home/project folder and listen to port 8028 makig it accessble via the shortcut \"My app on port 8028\" of the \"My apps\" tab. To do this perform the following steps: Open \"Admin\" tab of the workspace UI and then \"Workspace admin\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command cd /home/project/ ; python -m http.server 8028 Give it any name you want Click \"Save\" Restart workspace After workspace is restarted you can open \"My app on port 8028\" and see that static file server is operational. Application shortcuts If a persistent application has browser-based user interface you can create a shortcut and place it on one of the tabs: Home , My apps or Admin . Such functionality is provided on the 'Interface tab' of the Workspace Admin. As an example let's add shortcut for the persistent static file server, that we have created in the previous section of this doc. To do this follow the next steps: Upload the shortcut image to the workspace, i.e. with file browser Go to the \"Interface\" tab of the Workspace Admin chose the workspace tab and select \"CREATE NEW\" from the picklist Give it any title and description In the field \"Port\" enter port 8028 In the file picker find your image Leave field \"path\" blank and click \"Save\" You will see that the new shortcut has appeared on the respective page of the workspace UI Hint Rather than following the steps indicated in this example, you can simply employ the command wrk install static-server-python to install the static file server from the Alnoda Hub. The installation of apps from the Alnoda Hub automatically creates persistent services and adds application shortcuts.","title":"Apps and services"},{"location":"user-guide/admin/apps-services/#applications-and-services","text":"","title":"Applications and services"},{"location":"user-guide/admin/apps-services/#persistent-service","text":"Alnoda workspaces enable you to make any application or service persistently operational. This is facilitated by the supervisord process control system, which serves a function similar to that of the systemd service manager found in many Linux distributions, though systemd is not included in Alnoda workspaces. Supervisord ensures that all persistent services are initiated whenever a workspace container starts, facilitating the concurrent operation of multiple processes within the workspaces. While it's possible for you to manually adjust supervisord configuration files, the Alnoda Admin offers a user interface tool for this task. Within the 'Apps & Services' tab, you'll have the ability to create and delete services operating within the workspace. Here you can also see the logs and errors from the runninng or failed to start services. Warning After creating a new persistent service it is required to restart the worksapce for the new service to get up and runnig. You can do it with wrk kill command. As an example, let's create a service for a built-in static file server that will serve /home/project folder and listen to port 8028 makig it accessble via the shortcut \"My app on port 8028\" of the \"My apps\" tab. To do this perform the following steps: Open \"Admin\" tab of the workspace UI and then \"Workspace admin\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command cd /home/project/ ; python -m http.server 8028 Give it any name you want Click \"Save\" Restart workspace After workspace is restarted you can open \"My app on port 8028\" and see that static file server is operational.","title":"Persistent service"},{"location":"user-guide/admin/apps-services/#application-shortcuts","text":"If a persistent application has browser-based user interface you can create a shortcut and place it on one of the tabs: Home , My apps or Admin . Such functionality is provided on the 'Interface tab' of the Workspace Admin. As an example let's add shortcut for the persistent static file server, that we have created in the previous section of this doc. To do this follow the next steps: Upload the shortcut image to the workspace, i.e. with file browser Go to the \"Interface\" tab of the Workspace Admin chose the workspace tab and select \"CREATE NEW\" from the picklist Give it any title and description In the field \"Port\" enter port 8028 In the file picker find your image Leave field \"path\" blank and click \"Save\" You will see that the new shortcut has appeared on the respective page of the workspace UI Hint Rather than following the steps indicated in this example, you can simply employ the command wrk install static-server-python to install the static file server from the Alnoda Hub. The installation of apps from the Alnoda Hub automatically creates persistent services and adds application shortcuts.","title":"Application shortcuts"},{"location":"user-guide/admin/info/","text":"Workspace Admin Alnoda Admin is an application integrated within the workspace. It helps to fine-tune and customize the workspace according to your specific project requirements. With the help of Alnoda Admin you can: customize workspace UI: change colors, icons and fonts edit workspace metadata: name, version, author edit wrokspace or project description create persistent workspace services add custom application shortcuts to the workspace UI tabs set terminal aliases and environmental variables manage project links and cheatsheet sign in to Alnoda Hub share workspace browser-based applications over the interet Tip You can open Workspace Admin from the Workspace UI Admin tab Sign in to Alnoda Hub After setting up an account with Alnoda Hub, you can log in from your workspaces using either the wrk tool or the Alnoda Admin app . Logging into the Alnoda Hub from your workspace allows you to monitor the applications installed in your workspaces. This feature aids in replicating workspaces and maintaining a record of the applications used for different projects. Note To log into the Alnoda Hub from your workspace, you will use a security token, which can be found on the profile page of your Alnoda Hub user account.","title":"Info"},{"location":"user-guide/admin/info/#workspace-admin","text":"Alnoda Admin is an application integrated within the workspace. It helps to fine-tune and customize the workspace according to your specific project requirements. With the help of Alnoda Admin you can: customize workspace UI: change colors, icons and fonts edit workspace metadata: name, version, author edit wrokspace or project description create persistent workspace services add custom application shortcuts to the workspace UI tabs set terminal aliases and environmental variables manage project links and cheatsheet sign in to Alnoda Hub share workspace browser-based applications over the interet Tip You can open Workspace Admin from the Workspace UI Admin tab","title":"Workspace Admin"},{"location":"user-guide/admin/info/#sign-in-to-alnoda-hub","text":"After setting up an account with Alnoda Hub, you can log in from your workspaces using either the wrk tool or the Alnoda Admin app . Logging into the Alnoda Hub from your workspace allows you to monitor the applications installed in your workspaces. This feature aids in replicating workspaces and maintaining a record of the applications used for different projects. Note To log into the Alnoda Hub from your workspace, you will use a security token, which can be found on the profile page of your Alnoda Hub user account.","title":"Sign in to Alnoda Hub"},{"location":"user-guide/admin/meta/","text":"Metadata You can edit workspace metadata such as the name, version, author, tags, and documentation link with the help of Workspace Admin. To modify this metadata, open the Workspace Admin and navigate to the 'Meta' tab. You can then alter the respective fields and save your modifications: To edit workspace description open Workspace Admin and then 'Description' tab: Hint You can use Markdown to write description After you save the changes to meta or description you will see Workspace UI updated.","title":"Metadata"},{"location":"user-guide/admin/meta/#metadata","text":"You can edit workspace metadata such as the name, version, author, tags, and documentation link with the help of Workspace Admin. To modify this metadata, open the Workspace Admin and navigate to the 'Meta' tab. You can then alter the respective fields and save your modifications: To edit workspace description open Workspace Admin and then 'Description' tab: Hint You can use Markdown to write description After you save the changes to meta or description you will see Workspace UI updated.","title":"Metadata"},{"location":"user-guide/admin/notes/","text":"Project notes Workspace UI has 2 tabs that help to keep worksapce specific commands (cheatsheet) and collection of relevant Internet links, and Workspace Admin helps to manage them. You can edit both workspace links and cheatsheet of useful commands in the Workspace Admin 'Notes' tab. Hint In the Alnoda Hub you will find many more apps that you can use to store workspace-related notes, links, compose your own cheatsheets and even create collections of code snippets.","title":"Notes"},{"location":"user-guide/admin/notes/#project-notes","text":"Workspace UI has 2 tabs that help to keep worksapce specific commands (cheatsheet) and collection of relevant Internet links, and Workspace Admin helps to manage them. You can edit both workspace links and cheatsheet of useful commands in the Workspace Admin 'Notes' tab. Hint In the Alnoda Hub you will find many more apps that you can use to store workspace-related notes, links, compose your own cheatsheets and even create collections of code snippets.","title":"Project notes"},{"location":"user-guide/admin/share/","text":"Share workspaces Alnoda workspaces offer a unique function that lets you share any workspace application with a web-based UI across the internet through a secure link. Simply navigate to the 'Share' tab in the Workspace Admin, select the application you wish to share, and then send a secure link to your colleague. Note Each sharing session is time-bound. It will also terminate once you close the Workspace Admin. After a session ends, you are free to initiate a new one. Hint You can extend the duration of a session if you sign in to the Alnoda Hub from the workspace.","title":"Share"},{"location":"user-guide/admin/share/#share-workspaces","text":"Alnoda workspaces offer a unique function that lets you share any workspace application with a web-based UI across the internet through a secure link. Simply navigate to the 'Share' tab in the Workspace Admin, select the application you wish to share, and then send a secure link to your colleague. Note Each sharing session is time-bound. It will also terminate once you close the Workspace Admin. After a session ends, you are free to initiate a new one. Hint You can extend the duration of a session if you sign in to the Alnoda Hub from the workspace.","title":"Share workspaces"},{"location":"user-guide/admin/terminal/","text":"Termial experience In diverse projects, the terminal is used frequently. Workspace Admin enhances this experience with features for setting environmental variables, creating aliases, and configuring toolchains. Warning Settings detailed in this document are applicable only to the zsh interactive shell. As an example, environmental variables or aliases won't be accessible for the start command of a persistent service. Environmental variables Using the Workspace Admin, you can set environment variables for the zsh terminal shell. This is particularly useful for setting parameters such as AWS keys and secrets, environment definition, or database connection parameters via environment variables, as required by your application or other tools you utilize. Set an environmental variable for the terminal zsh shell: Open Workspace Admin and go to the 'Terminal' tab Make sure you are on the 'Env vars' tab and select \"ADD NEW\" from the picklist Enter environmental variable name and value Save the new variable Warning To activate the new environment variables in your terminal session, you must restart the terminal window Aliases Aliases are a way to define our own commands or create shortcuts for existing commands. Aliases are quite handy for saving time, particularly when a command is complex or frequently used. Here are a few examples where you would use aliases: Navigate to a Frequently Accessed Directory: Suppose you often navigate to a directory with a long path, e.g., /home/user/documents/projects/my_project/ . Instead of typing cd /home/user/documents/projects/my_project/ each time, you could create an alias: cdp = cd /home/user/documents/projects/my_project/ . Now, typing cdp in the terminal will navigate to that directory. Shorten Long Commands: if for example you often need to check the status of your Git repository with the command git status . Instead of typing out the full command each time, you could create an alias gs = git status Correct Common Typos: If you often mistype a command, an alias can correct it for you. For example, if you frequently type sl instead of ls , you could make an alias to fix this, i.e. sl = ls . Make Commands More Memorable: If you have trouble remembering a particular command, you can create an alias that's easier for you to recall. For example, if you can never remember the command to display disk usage du -sh * , you might create an alias like showdisk = du -sh * . Warning The standard alias command is present in the workspaces, but aliases created with it will not persist after workspace is restarted. Creating persistent aliases is possible with Workspace Admin. To create an alias follow these steps: Open Workspace Admin and go to the 'Terminal' tab Make sure you are on the 'Aliases' tab and select \"ADD NEW\" from the picklist Enter alias and the value Save the new variable Warning To use the newly created alias you need to restart the terminal window Info The Alnoda workspaces come pre-configured with a few handy aliases. For instance, typing cd ~p in the terminal will navigate you directly to the /home/project directory. The alias p is a shortcut for rich , a utility that provides aesthetically pleasing file printing in the terminal, complete with syntax highlighting. Moreover, l serves as an alias for ls -lah , a command that displays a detailed list of all files in the current folder. Toolchains You can leverage workspace aliases to create a chain of commands separating them with command separators & , && or ; ; (semicolon): This separator allows you to run multiple commands sequentially, regardless of whether each previous command succeeds or not. The commands are executed in the order they are written. && (double ampersand): This separator allows you to run multiple commands sequentially, but only if each previous command succeeds (returns a zero exit status). If any command fails (returns a non-zero exit status), the remaining commands will not be executed. & (single ampersand): This operator allows you to run commands in parallel, in the background. When you append & after a command, the shell does not wait for the command to finish, and you can continue to enter further commands. For instance, you could establish a toolchain to automatically stage all modified files, commit them with a default message 'no msg', and push them to the remote repository. This could be achieved with the following sequence: G = git add . && git commit -m 'no msg' && git push . Tip Enhance your terminal productivity by installing tools from the Alnoda Hub which offeres a huge collection of popular CLI tools, some with terminal user interfaces, such as terminal multiplexers, terminal workspaces, advanced file managers and even full-fledged terminal IDEs!","title":"Terminal"},{"location":"user-guide/admin/terminal/#termial-experience","text":"In diverse projects, the terminal is used frequently. Workspace Admin enhances this experience with features for setting environmental variables, creating aliases, and configuring toolchains. Warning Settings detailed in this document are applicable only to the zsh interactive shell. As an example, environmental variables or aliases won't be accessible for the start command of a persistent service.","title":"Termial experience"},{"location":"user-guide/admin/terminal/#environmental-variables","text":"Using the Workspace Admin, you can set environment variables for the zsh terminal shell. This is particularly useful for setting parameters such as AWS keys and secrets, environment definition, or database connection parameters via environment variables, as required by your application or other tools you utilize. Set an environmental variable for the terminal zsh shell: Open Workspace Admin and go to the 'Terminal' tab Make sure you are on the 'Env vars' tab and select \"ADD NEW\" from the picklist Enter environmental variable name and value Save the new variable Warning To activate the new environment variables in your terminal session, you must restart the terminal window","title":"Environmental variables"},{"location":"user-guide/admin/terminal/#aliases","text":"Aliases are a way to define our own commands or create shortcuts for existing commands. Aliases are quite handy for saving time, particularly when a command is complex or frequently used. Here are a few examples where you would use aliases: Navigate to a Frequently Accessed Directory: Suppose you often navigate to a directory with a long path, e.g., /home/user/documents/projects/my_project/ . Instead of typing cd /home/user/documents/projects/my_project/ each time, you could create an alias: cdp = cd /home/user/documents/projects/my_project/ . Now, typing cdp in the terminal will navigate to that directory. Shorten Long Commands: if for example you often need to check the status of your Git repository with the command git status . Instead of typing out the full command each time, you could create an alias gs = git status Correct Common Typos: If you often mistype a command, an alias can correct it for you. For example, if you frequently type sl instead of ls , you could make an alias to fix this, i.e. sl = ls . Make Commands More Memorable: If you have trouble remembering a particular command, you can create an alias that's easier for you to recall. For example, if you can never remember the command to display disk usage du -sh * , you might create an alias like showdisk = du -sh * . Warning The standard alias command is present in the workspaces, but aliases created with it will not persist after workspace is restarted. Creating persistent aliases is possible with Workspace Admin. To create an alias follow these steps: Open Workspace Admin and go to the 'Terminal' tab Make sure you are on the 'Aliases' tab and select \"ADD NEW\" from the picklist Enter alias and the value Save the new variable Warning To use the newly created alias you need to restart the terminal window Info The Alnoda workspaces come pre-configured with a few handy aliases. For instance, typing cd ~p in the terminal will navigate you directly to the /home/project directory. The alias p is a shortcut for rich , a utility that provides aesthetically pleasing file printing in the terminal, complete with syntax highlighting. Moreover, l serves as an alias for ls -lah , a command that displays a detailed list of all files in the current folder.","title":"Aliases"},{"location":"user-guide/admin/terminal/#toolchains","text":"You can leverage workspace aliases to create a chain of commands separating them with command separators & , && or ; ; (semicolon): This separator allows you to run multiple commands sequentially, regardless of whether each previous command succeeds or not. The commands are executed in the order they are written. && (double ampersand): This separator allows you to run multiple commands sequentially, but only if each previous command succeeds (returns a zero exit status). If any command fails (returns a non-zero exit status), the remaining commands will not be executed. & (single ampersand): This operator allows you to run commands in parallel, in the background. When you append & after a command, the shell does not wait for the command to finish, and you can continue to enter further commands. For instance, you could establish a toolchain to automatically stage all modified files, commit them with a default message 'no msg', and push them to the remote repository. This could be achieved with the following sequence: G = git add . && git commit -m 'no msg' && git push . Tip Enhance your terminal productivity by installing tools from the Alnoda Hub which offeres a huge collection of popular CLI tools, some with terminal user interfaces, such as terminal multiplexers, terminal workspaces, advanced file managers and even full-fledged terminal IDEs!","title":"Toolchains"},{"location":"user-guide/admin/ui-customization/","text":"UI Customization The Appearance tab within Workspace Admin allows you to customize the aesthetic of the workspace UI. By altering colors, fonts, and icons, you can create a visually distinct workspace. This customization can facilitate easier transitions when switching between different workspaces. Info As a font you can use any Google font . Simply update the name of the font. Warning Don't forget to Save changes after modifying UI appearance.","title":"UI customization"},{"location":"user-guide/admin/ui-customization/#ui-customization","text":"The Appearance tab within Workspace Admin allows you to customize the aesthetic of the workspace UI. By altering colors, fonts, and icons, you can create a visually distinct workspace. This customization can facilitate easier transitions when switching between different workspaces. Info As a font you can use any Google font . Simply update the name of the font. Warning Don't forget to Save changes after modifying UI appearance.","title":"UI Customization"},{"location":"user-guide/build-workspaces/dockerfile/","text":"Dockerfile Build new workspaces easily using a Dockerfile. Start from the base A Alnoda workspace or any derived Alnoda workspaces to create your customized workspace. Hint wrk tool can be used in Dockerfile Install apps In Dockerfiles, you can utilize wrk install to install applications from Alnoda Hub. For instance: FROM alnoda/alnnoda-workspace:1.1 RUN wrk install openvscode RUN wrk install cronicle == 0 .9.10 admin RUN wrk install serve == 14 .0.1 RUN wrk install terraform == 1 .2.8 RUN wrk install terrascan == 1 .15.2 RUN wrk install tfsec == 1 .27.5 RUN wrk install tflint == 0 .39.3 RUN wrk install terraform-docs == 0 .15.0 RUN wrk install inframap == 0 .6.7 RUN wrk install blast-radius == 0 .1.23 RUN wrk install rover-terraform-visualizer == 0 .3.3 wrk build wrk CLI tool includes commad build , which provides a way to configure workspaces using workspace.yaml configuration file: Set workspace metadata: name, colors, fonts, icons, links Add workspace UI shortcuts Start applications and services To use wrk build create workspace.yaml configuration file: --- # Meta (mandatory) name : Extended workspace doc_url : https://extended-workspace/ author : myself version : 1.0.1 description : | # Extended workspace General-purpose portable containerized browser-based environment for code development and execution. Includes code editor, terminal, file browser, Git manager and visual jobs scheduler. tags : task-scheduler, static-file-server # UI icons (optional) logo : extended-workspace-white.svg favicon : extended-workspace.svg # Homepage UI appearance (optional) styles : colors : light : primary : \"#2A2D2E\" accent : \"#E77260\" dark : primary : \"#3C3C3C\" accent : \"#E77260\" background : \"#1E1E1E\" title : \"#9CDCFE\" text : \"#9CDCFE\" code_text : \"#EAB676\" code_background : \"#3C3C3C\" common_colors : nav : \"#eab676\" # Add shortcuts to the workspace UI (optional) pages : home : - name : Static file server port : 8028 path : / title : Static File Server description : \"Serve any static websites like a breeze\" image : static-file-server.png admin : - name : Cronicle port : 8029 path : / title : Cronicle description : \"Schedule jobs, manage schedules, observe and monitor executions (user/pass - admin/admin)\" image : cronicle.jpg # Start applications and services (optional) start : - name : Static file server folder : $STATIC_FILESERVER_DIR cmd : . env/bin/activate; serve -p 8028 /home/static-server - name : Cronicle folder : $CRONICLE_DIR cmd : rm ./logs/cronicled.pid || true; . env/bin/activate; $CRONICLE_DIR/bin/control.sh setup; $CRONICLE_DIR/bin/control.sh start In Dockerfile COPY into the image a folder with workspace.yaml together with the assets (images and icons) and run wrk build : COPY --chown = abc:abc workspace /tmp/workspace RUN wrk build /tmp/workspace RUN rm -rf /tmp/workspace","title":"Dockerfile"},{"location":"user-guide/build-workspaces/dockerfile/#dockerfile","text":"Build new workspaces easily using a Dockerfile. Start from the base A Alnoda workspace or any derived Alnoda workspaces to create your customized workspace. Hint wrk tool can be used in Dockerfile","title":"Dockerfile"},{"location":"user-guide/build-workspaces/dockerfile/#install-apps","text":"In Dockerfiles, you can utilize wrk install to install applications from Alnoda Hub. For instance: FROM alnoda/alnnoda-workspace:1.1 RUN wrk install openvscode RUN wrk install cronicle == 0 .9.10 admin RUN wrk install serve == 14 .0.1 RUN wrk install terraform == 1 .2.8 RUN wrk install terrascan == 1 .15.2 RUN wrk install tfsec == 1 .27.5 RUN wrk install tflint == 0 .39.3 RUN wrk install terraform-docs == 0 .15.0 RUN wrk install inframap == 0 .6.7 RUN wrk install blast-radius == 0 .1.23 RUN wrk install rover-terraform-visualizer == 0 .3.3","title":"Install apps"},{"location":"user-guide/build-workspaces/dockerfile/#wrk-build","text":"wrk CLI tool includes commad build , which provides a way to configure workspaces using workspace.yaml configuration file: Set workspace metadata: name, colors, fonts, icons, links Add workspace UI shortcuts Start applications and services To use wrk build create workspace.yaml configuration file: --- # Meta (mandatory) name : Extended workspace doc_url : https://extended-workspace/ author : myself version : 1.0.1 description : | # Extended workspace General-purpose portable containerized browser-based environment for code development and execution. Includes code editor, terminal, file browser, Git manager and visual jobs scheduler. tags : task-scheduler, static-file-server # UI icons (optional) logo : extended-workspace-white.svg favicon : extended-workspace.svg # Homepage UI appearance (optional) styles : colors : light : primary : \"#2A2D2E\" accent : \"#E77260\" dark : primary : \"#3C3C3C\" accent : \"#E77260\" background : \"#1E1E1E\" title : \"#9CDCFE\" text : \"#9CDCFE\" code_text : \"#EAB676\" code_background : \"#3C3C3C\" common_colors : nav : \"#eab676\" # Add shortcuts to the workspace UI (optional) pages : home : - name : Static file server port : 8028 path : / title : Static File Server description : \"Serve any static websites like a breeze\" image : static-file-server.png admin : - name : Cronicle port : 8029 path : / title : Cronicle description : \"Schedule jobs, manage schedules, observe and monitor executions (user/pass - admin/admin)\" image : cronicle.jpg # Start applications and services (optional) start : - name : Static file server folder : $STATIC_FILESERVER_DIR cmd : . env/bin/activate; serve -p 8028 /home/static-server - name : Cronicle folder : $CRONICLE_DIR cmd : rm ./logs/cronicled.pid || true; . env/bin/activate; $CRONICLE_DIR/bin/control.sh setup; $CRONICLE_DIR/bin/control.sh start In Dockerfile COPY into the image a folder with workspace.yaml together with the assets (images and icons) and run wrk build : COPY --chown = abc:abc workspace /tmp/workspace RUN wrk build /tmp/workspace RUN rm -rf /tmp/workspace","title":"wrk build"},{"location":"user-guide/build-workspaces/images/","text":"Images Alnoda workspaces are Docker images, enabling you to perform all the typical Docker image operations such as building, committing, pushing, and pulling. You can also build new workspaces from existing ones, enhancing their functionality. Base image Alnoda workspace acts as a base image for other Alnoda workspaces. It contains essential components such as workspace UI, terminal, file browser, wrk CLI tool , and Alnoda admin . New workspaces can be built directly from the base image, or from other Alnoda workspaces that derive from it. Why building workspaces There are several reasons: Preserve valuable workspaces by creating new images as backups. Establish a foundation image for all your projects, encompassing secrets, environmental variables, and GitHub credentials. Construct team workspaces with a wide array of tools and configurations. Commit to image The easiest method to generate a new workspace image is by committing a running or stopped workspace into a fresh image. This image will encapsulate all the installed applications and packages, user configurations, as well as cloned repositories and uploaded artifacts. For example, if your workspace called my-workspace you can create new workspace image with a sinngle command: docker commit my-workspace my-new-workspace:2023-05-01 Of course, instead of my-new-workspace:2023-05-01 you can use any name and tag.","title":"Info"},{"location":"user-guide/build-workspaces/images/#images","text":"Alnoda workspaces are Docker images, enabling you to perform all the typical Docker image operations such as building, committing, pushing, and pulling. You can also build new workspaces from existing ones, enhancing their functionality.","title":"Images"},{"location":"user-guide/build-workspaces/images/#base-image","text":"Alnoda workspace acts as a base image for other Alnoda workspaces. It contains essential components such as workspace UI, terminal, file browser, wrk CLI tool , and Alnoda admin . New workspaces can be built directly from the base image, or from other Alnoda workspaces that derive from it.","title":"Base image"},{"location":"user-guide/build-workspaces/images/#why-building-workspaces","text":"There are several reasons: Preserve valuable workspaces by creating new images as backups. Establish a foundation image for all your projects, encompassing secrets, environmental variables, and GitHub credentials. Construct team workspaces with a wide array of tools and configurations.","title":"Why building workspaces"},{"location":"user-guide/build-workspaces/images/#commit-to-image","text":"The easiest method to generate a new workspace image is by committing a running or stopped workspace into a fresh image. This image will encapsulate all the installed applications and packages, user configurations, as well as cloned repositories and uploaded artifacts. For example, if your workspace called my-workspace you can create new workspace image with a sinngle command: docker commit my-workspace my-new-workspace:2023-05-01 Of course, instead of my-new-workspace:2023-05-01 you can use any name and tag.","title":"Commit to image"},{"location":"user-guide/cloud-deployment/kubernetes/","text":"Kubernetes You can install Alnoda workspaces in your Kubernetes cluster using the helm chart. Add Helm repository: helm repo add alnoda https://bluxmit.github.io/alnoda-charts/ Update your Helm chart list: helm repo update Create Helm values file, for example file values.yaml : ingress : enabled : true className : nginx host : example.com Install the workspace: helm install my-workspace alnoda/alnoda-workspace -f values.yaml Note You can find out information about the chart defaults and values in the alnoda-charts repository","title":"Kubernetes"},{"location":"user-guide/cloud-deployment/kubernetes/#kubernetes","text":"You can install Alnoda workspaces in your Kubernetes cluster using the helm chart. Add Helm repository: helm repo add alnoda https://bluxmit.github.io/alnoda-charts/ Update your Helm chart list: helm repo update Create Helm values file, for example file values.yaml : ingress : enabled : true className : nginx host : example.com Install the workspace: helm install my-workspace alnoda/alnoda-workspace -f values.yaml Note You can find out information about the chart defaults and values in the alnoda-charts repository","title":"Kubernetes"},{"location":"user-guide/cloud-deployment/server/","text":"Cloud Server Alnoda workspaces can be easily deployed in the cloud, with the simplest approach being the launch of workspaces as Docker containers. When starting workspace on a server it is necessary to set a container environmetal variable WRK_HOST equal to the IP or the host name of the server. You can set this variable in the docker run command passing an argumentt -e WRK_HOST=\"<ip-of-your-remote-server>\" . For example, if the IP of your server is 204.35.20.100 you will start workspace on a server with a following command: docker run --name space-1 -d -p 8020 -8040:8020-8040 --restart = always -e WRK_HOST = 204 .35.20.100 alnoda/alnoda-workspace Note Please make sure that ports from the range 8020-8040 are not blocked by the firewall. Ope browser on :8020 However, when running on a cloud server with a public IP and accessing the workspace over the internet, it becomes necessary to establish a secure and encrypted connection with at least some authentication. You can do this using docker-compose. We have a companion repository with docker-compose file and instructions. HTTPS and authentication To launch an Alnoda workspace on a cloud server with basic authentication over HTTPS using a self-signed certificate, follow these steps: Ensure that the server has Docker and Docker Compose installed. Verify that ports 8020 to 8040 are not blocked by the firewall. For instance, on Ubuntu/Debian, you can run the following command: ufw allow 8020 :8040/tcp Clone the repository: git clone https://github.com/bluxmit/wrk-compose.git cd wrk-compose Set the environmental variable WRK_HOST to the public server IP that allows access over the internet. For example: export WRK_HOST = 34 .194.12 Start the workspace: cd basic-auth-https docker-compose up -d Now you can open your browser and visit https://[WRK_HOST]:8020 to access the Alnoda workspace securely. Workspace selection By default, the latest version of the base Alnoda workspace will be launched. If you wish to start another workspace, you can do so by setting the environmental variable WRK_IMAGE. For example: export WRK_IMAGE = 'alnoda/codeserver-workspace:5.0' This allows you to specify a different workspace image, such as alnoda/codeserver-workspace:5.0 , to be used when starting the workspace. Authentication The default authentication credentials are as follows: Username: admin Password: admin When you wish to create a new login for the workspace use htpasswd . If you don't know how to install htpasswd in your system or on the server, you can install it in any of the Alnoda workspaces using the following command: sudo apt-get install apache2-utils -y Generate a new user:password pair: echo $( htpasswd -nB <username> ) | sed -e s/ \\\\ $/ \\\\ $ \\\\ $/g Replace with the desired username. You will be prompted to enter a password, and htpasswd will generate the corresponding credentials. For example: someuser:$$2y$$05$$t2MSJSPp2V9HdLWYq9z.UeYFz2R3un9ZuiBitSjeiN3Osz6fGNZ7u . Replace the credentials in the respective docker-compose YAML file, locate the label of the traefik service traefik.http.middlewares.basic-auth.basicauth.users=admin:$$2y$$05$$eub6CV.CwUYCCQjNBvSf5uZnzdRmVwGZ/ncxecb9O7WxCR8aLuM3K and replace admin:$$2y$$05$$eub6CV.CwUYCCQjNBvSf5uZnzdRmVwGZ/ncxecb9O7WxCR8aLuM3K with the generated credentials. HTTP Warning Using HTTP to access workspaces on a cloud server over public IP lacks the necessary security measures as it is not encrypted like HTTPS. This approach should be avoided unless you are operating within a secure internal network. To start an Alnoda workspace on a cloud server with basic authentication over HTTP, you can utilize a separate docker-compose file: cd basic-auth-http docker-compose up -d","title":"Cloud server"},{"location":"user-guide/cloud-deployment/server/#cloud-server","text":"Alnoda workspaces can be easily deployed in the cloud, with the simplest approach being the launch of workspaces as Docker containers. When starting workspace on a server it is necessary to set a container environmetal variable WRK_HOST equal to the IP or the host name of the server. You can set this variable in the docker run command passing an argumentt -e WRK_HOST=\"<ip-of-your-remote-server>\" . For example, if the IP of your server is 204.35.20.100 you will start workspace on a server with a following command: docker run --name space-1 -d -p 8020 -8040:8020-8040 --restart = always -e WRK_HOST = 204 .35.20.100 alnoda/alnoda-workspace Note Please make sure that ports from the range 8020-8040 are not blocked by the firewall. Ope browser on :8020 However, when running on a cloud server with a public IP and accessing the workspace over the internet, it becomes necessary to establish a secure and encrypted connection with at least some authentication. You can do this using docker-compose. We have a companion repository with docker-compose file and instructions.","title":"Cloud Server"},{"location":"user-guide/cloud-deployment/server/#https-and-authentication","text":"To launch an Alnoda workspace on a cloud server with basic authentication over HTTPS using a self-signed certificate, follow these steps: Ensure that the server has Docker and Docker Compose installed. Verify that ports 8020 to 8040 are not blocked by the firewall. For instance, on Ubuntu/Debian, you can run the following command: ufw allow 8020 :8040/tcp Clone the repository: git clone https://github.com/bluxmit/wrk-compose.git cd wrk-compose Set the environmental variable WRK_HOST to the public server IP that allows access over the internet. For example: export WRK_HOST = 34 .194.12 Start the workspace: cd basic-auth-https docker-compose up -d Now you can open your browser and visit https://[WRK_HOST]:8020 to access the Alnoda workspace securely.","title":"HTTPS and authentication"},{"location":"user-guide/cloud-deployment/server/#workspace-selection","text":"By default, the latest version of the base Alnoda workspace will be launched. If you wish to start another workspace, you can do so by setting the environmental variable WRK_IMAGE. For example: export WRK_IMAGE = 'alnoda/codeserver-workspace:5.0' This allows you to specify a different workspace image, such as alnoda/codeserver-workspace:5.0 , to be used when starting the workspace.","title":"Workspace selection"},{"location":"user-guide/cloud-deployment/server/#authentication","text":"The default authentication credentials are as follows: Username: admin Password: admin When you wish to create a new login for the workspace use htpasswd . If you don't know how to install htpasswd in your system or on the server, you can install it in any of the Alnoda workspaces using the following command: sudo apt-get install apache2-utils -y Generate a new user:password pair: echo $( htpasswd -nB <username> ) | sed -e s/ \\\\ $/ \\\\ $ \\\\ $/g Replace with the desired username. You will be prompted to enter a password, and htpasswd will generate the corresponding credentials. For example: someuser:$$2y$$05$$t2MSJSPp2V9HdLWYq9z.UeYFz2R3un9ZuiBitSjeiN3Osz6fGNZ7u . Replace the credentials in the respective docker-compose YAML file, locate the label of the traefik service traefik.http.middlewares.basic-auth.basicauth.users=admin:$$2y$$05$$eub6CV.CwUYCCQjNBvSf5uZnzdRmVwGZ/ncxecb9O7WxCR8aLuM3K and replace admin:$$2y$$05$$eub6CV.CwUYCCQjNBvSf5uZnzdRmVwGZ/ncxecb9O7WxCR8aLuM3K with the generated credentials.","title":"Authentication"},{"location":"user-guide/cloud-deployment/server/#http","text":"Warning Using HTTP to access workspaces on a cloud server over public IP lacks the necessary security measures as it is not encrypted like HTTPS. This approach should be avoided unless you are operating within a secure internal network. To start an Alnoda workspace on a cloud server with basic authentication over HTTP, you can utilize a separate docker-compose file: cd basic-auth-http docker-compose up -d","title":"HTTP"},{"location":"user-guide/install-apps/alnoda-hub/","text":"Alnoda Hub The Alnoda Hub simplifies the process of installing applications in workspaces. When utilizing the Hub for installations, you don't need to concern yourself with service start-ups, home page shortcut creation, or environmental variable setting. Even workspace features like tags, aliases, and links are conveniently updated for you. This seamless process helps you to configure workspace fast. Info Aloda Hub is the most convenient way to install applications in the workspaces. Alnoda Hub apps To install application from Alnoda Hub use command wrk install following by the application name. For example, to install Postgres database in the workspace execute: $ wrk install postgresql \u2728 starting... \u26a0\ufe0f Please DO NOT close this terminal window untill app is fully installed! \u27a1\ufe0f checking workspace compatibility... \u27a1\ufe0f checking app compatibility... \u27a1\ufe0f executing installation script... \u2714\ufe0f app installed \u27a1\ufe0f setting startup configuration... ------------------------------------------------------------- - \u26a0\ufe0f application will start after workspace is restarted \u26a0\ufe0f - --- restart workspace with 'wrk kill' --- ------------------------------------------------------------- \u27a1\ufe0f adding workspace tags... \u2757 Could not update workspace app history at alnoda.org: Not authenticated at alnoda.org \u270d\ufe0f If app is not working try restarting terminal window or entire workspace \ud83d\ude80 done R E S T A R T T E R M I N A L N O W (CTRL+D) !!!!!!!! *********************************************** psql *********************************************** You can also install a specific version of the application: $ wrk install apache-airflow==2.5.2 \u2728 starting... \u26a0\ufe0f Please DO NOT close this terminal window untill app is fully installed! \u27a1\ufe0f checking workspace compatibility... \u27a1\ufe0f checking app compatibility... \u27a1\ufe0f assigning port... \u27a1\ufe0f executing installation script... \u2714\ufe0f app installed \u27a1\ufe0f setting startup configuration... ------------------------------------------------------------- - \u26a0\ufe0f application will start after workspace is restarted \u26a0\ufe0f - --- restart workspace with 'wrk kill' --- ------------------------------------------------------------- \u27a1\ufe0f updating workspace UI... \u27a1\ufe0f adding workspace tags... \u2757 Could not update workspace app history at alnoda.org: Not authenticated at alnoda.org \u270d\ufe0f If app is not working try restarting terminal window or entire workspace \ud83d\ude80 done R E S T A R T T E R M I N A L N O W (CTRL+D) !!!!!!!! *********************************************** Airflow development installation with SQLite db, sequential executor and WEB UI. Use to develop and test locally Airflow DAGs. 1. WEB UI auth (user/pass): admin/admin 2. Airflow DAG folder: /home/abc/airflow/dags (place your dags here and refresh web ui) *********************************************** Warning Always review the results from executing wrk install . A workspace restart may be required after the application installation. You can restart workspace with the comand wrk kill Note It's important to restart your terminal after the installation process concludes. This step ensures the proper activation of the environment, allowing for the smooth operation of the newly installed application. Hint Remember to log into Alnoda Hub from your workspace. This keeps track of your logged workspaces and installed applications, significantly enhancing the reproducibility of workspace environments. Adding apps to Alnoda Hub Should you require an application across multiple workspaces, think about adding it to Alnoda Hub. Applications in Alnoda Hub are merely setup and startup scripts, supplemented with metadata such as tags and usage hints. Take a look at applications in Alnoda Hub, examine their installation scripts, and see how straightforward it is to add applications to the Alnoda Hub. Alnoda Hub collections With Alnoda Hub, you can install a bundle of applications using just one command. For instance, the following command installs the VSCode IDE, a file manager, a desktop environment, and a terminal workspace: <font color=\"#5EA702\">wrk</font> install bluxmit This Alnoda Hub application - is just several wrk install commands wrk install openvscode wrk install kodexplorer wrk install cloud-commander wrk install zellij-ui Create your own set of frequently used applications, save it as an application within Alnoda Hub, and install them in your new workspaces using a single command.","title":"Alnoda Hub"},{"location":"user-guide/install-apps/alnoda-hub/#alnoda-hub","text":"The Alnoda Hub simplifies the process of installing applications in workspaces. When utilizing the Hub for installations, you don't need to concern yourself with service start-ups, home page shortcut creation, or environmental variable setting. Even workspace features like tags, aliases, and links are conveniently updated for you. This seamless process helps you to configure workspace fast. Info Aloda Hub is the most convenient way to install applications in the workspaces.","title":"Alnoda Hub"},{"location":"user-guide/install-apps/alnoda-hub/#alnoda-hub-apps","text":"To install application from Alnoda Hub use command wrk install following by the application name. For example, to install Postgres database in the workspace execute: $ wrk install postgresql \u2728 starting... \u26a0\ufe0f Please DO NOT close this terminal window untill app is fully installed! \u27a1\ufe0f checking workspace compatibility... \u27a1\ufe0f checking app compatibility... \u27a1\ufe0f executing installation script... \u2714\ufe0f app installed \u27a1\ufe0f setting startup configuration... ------------------------------------------------------------- - \u26a0\ufe0f application will start after workspace is restarted \u26a0\ufe0f - --- restart workspace with 'wrk kill' --- ------------------------------------------------------------- \u27a1\ufe0f adding workspace tags... \u2757 Could not update workspace app history at alnoda.org: Not authenticated at alnoda.org \u270d\ufe0f If app is not working try restarting terminal window or entire workspace \ud83d\ude80 done R E S T A R T T E R M I N A L N O W (CTRL+D) !!!!!!!! *********************************************** psql *********************************************** You can also install a specific version of the application: $ wrk install apache-airflow==2.5.2 \u2728 starting... \u26a0\ufe0f Please DO NOT close this terminal window untill app is fully installed! \u27a1\ufe0f checking workspace compatibility... \u27a1\ufe0f checking app compatibility... \u27a1\ufe0f assigning port... \u27a1\ufe0f executing installation script... \u2714\ufe0f app installed \u27a1\ufe0f setting startup configuration... ------------------------------------------------------------- - \u26a0\ufe0f application will start after workspace is restarted \u26a0\ufe0f - --- restart workspace with 'wrk kill' --- ------------------------------------------------------------- \u27a1\ufe0f updating workspace UI... \u27a1\ufe0f adding workspace tags... \u2757 Could not update workspace app history at alnoda.org: Not authenticated at alnoda.org \u270d\ufe0f If app is not working try restarting terminal window or entire workspace \ud83d\ude80 done R E S T A R T T E R M I N A L N O W (CTRL+D) !!!!!!!! *********************************************** Airflow development installation with SQLite db, sequential executor and WEB UI. Use to develop and test locally Airflow DAGs. 1. WEB UI auth (user/pass): admin/admin 2. Airflow DAG folder: /home/abc/airflow/dags (place your dags here and refresh web ui) *********************************************** Warning Always review the results from executing wrk install . A workspace restart may be required after the application installation. You can restart workspace with the comand wrk kill Note It's important to restart your terminal after the installation process concludes. This step ensures the proper activation of the environment, allowing for the smooth operation of the newly installed application. Hint Remember to log into Alnoda Hub from your workspace. This keeps track of your logged workspaces and installed applications, significantly enhancing the reproducibility of workspace environments.","title":"Alnoda Hub apps"},{"location":"user-guide/install-apps/alnoda-hub/#adding-apps-to-alnoda-hub","text":"Should you require an application across multiple workspaces, think about adding it to Alnoda Hub. Applications in Alnoda Hub are merely setup and startup scripts, supplemented with metadata such as tags and usage hints. Take a look at applications in Alnoda Hub, examine their installation scripts, and see how straightforward it is to add applications to the Alnoda Hub.","title":"Adding apps to Alnoda Hub"},{"location":"user-guide/install-apps/alnoda-hub/#alnoda-hub-collections","text":"With Alnoda Hub, you can install a bundle of applications using just one command. For instance, the following command installs the VSCode IDE, a file manager, a desktop environment, and a terminal workspace: <font color=\"#5EA702\">wrk</font> install bluxmit This Alnoda Hub application - is just several wrk install commands wrk install openvscode wrk install kodexplorer wrk install cloud-commander wrk install zellij-ui Create your own set of frequently used applications, save it as an application within Alnoda Hub, and install them in your new workspaces using a single command.","title":"Alnoda Hub collections"},{"location":"user-guide/install-apps/info/","text":"Install applications in workspaces Alnoda workspaces are architected to be very flexible and easy to augment with new tools and services. The goal is to simplify and speed up workspace creation and setup. Alnoda Hub Most importantly, we maintain and expand Alnoda Hub - a growing repository of applications which you can install and configure in your workspace with a one-line terminal command. Note Alnoda Hub is by far the most straightforward, robust, and convenient way to quickly provision workspaces, install and configure more tools and applications, allowing you to tailor workspaces quickly to meet the exact requirements of your projects. While Alnoda Hub has a wide array of applications, it might not cover all your needs. For such cases, Alnoda workspaces offer features to simplify the installation of extra applications. Package managers To facilitate this, we equip all workspaces with a variety of package and plugin managers by default. This includes: apt nix asdf pipx Nodejs Workspaces have also nodeenv, allowing to benefit from vast collection of browser-based Node.js applications and install them into separate environments. Workspace features Workspaces operate in Docker containers, which are initially designed for a single process. Hence, they lack some Linux tools like systemd used for bootstrapping user space and managing system processes. Instead, workspaces use supervisord to keep all processes active upon startup. Alnoda abstracts supervisord complexities with tools like 'wrk' and 'Alnoda admin', enabling easy initiation of applications and services, and addition of application shortcuts to the workspace interface. Tip Get familiar with wrk commands and Alnoda Admin to understand how to initiate installed applications and services. You will also learn to add application shortcuts to the workspace user interface. Other programming languages Alnoda aims to facilitate the expansion of workspaces using specific programming languages and their associated toolsets. For instance, it allows the use of utilities like Cargo, Rust's package manager. Cargo manages the download of Rust project dependencies and their compilation into an application. Tip Browse this documentation to learn how to compile and install applications in various languages such as Nodejs, Go, Rust, Python, Ruby, PHP, Java, and others in the workspaces.","title":"Info"},{"location":"user-guide/install-apps/info/#install-applications-in-workspaces","text":"Alnoda workspaces are architected to be very flexible and easy to augment with new tools and services. The goal is to simplify and speed up workspace creation and setup.","title":"Install applications in workspaces"},{"location":"user-guide/install-apps/info/#alnoda-hub","text":"Most importantly, we maintain and expand Alnoda Hub - a growing repository of applications which you can install and configure in your workspace with a one-line terminal command. Note Alnoda Hub is by far the most straightforward, robust, and convenient way to quickly provision workspaces, install and configure more tools and applications, allowing you to tailor workspaces quickly to meet the exact requirements of your projects. While Alnoda Hub has a wide array of applications, it might not cover all your needs. For such cases, Alnoda workspaces offer features to simplify the installation of extra applications.","title":"Alnoda Hub"},{"location":"user-guide/install-apps/info/#package-managers","text":"To facilitate this, we equip all workspaces with a variety of package and plugin managers by default. This includes: apt nix asdf pipx","title":"Package managers"},{"location":"user-guide/install-apps/info/#nodejs","text":"Workspaces have also nodeenv, allowing to benefit from vast collection of browser-based Node.js applications and install them into separate environments.","title":"Nodejs"},{"location":"user-guide/install-apps/info/#workspace-features","text":"Workspaces operate in Docker containers, which are initially designed for a single process. Hence, they lack some Linux tools like systemd used for bootstrapping user space and managing system processes. Instead, workspaces use supervisord to keep all processes active upon startup. Alnoda abstracts supervisord complexities with tools like 'wrk' and 'Alnoda admin', enabling easy initiation of applications and services, and addition of application shortcuts to the workspace interface. Tip Get familiar with wrk commands and Alnoda Admin to understand how to initiate installed applications and services. You will also learn to add application shortcuts to the workspace user interface.","title":"Workspace features"},{"location":"user-guide/install-apps/info/#other-programming-languages","text":"Alnoda aims to facilitate the expansion of workspaces using specific programming languages and their associated toolsets. For instance, it allows the use of utilities like Cargo, Rust's package manager. Cargo manages the download of Rust project dependencies and their compilation into an application. Tip Browse this documentation to learn how to compile and install applications in various languages such as Nodejs, Go, Rust, Python, Ruby, PHP, Java, and others in the workspaces.","title":"Other programming languages"},{"location":"user-guide/install-apps/apt/install/","text":"Install packages with APT The Advanced Package Tool, or APT, is a CLI utility for handling packages in Alnoda workspaces, which are based on Ubuntu. Debian packages can be installed in Alnoda workspace usin APT. Here is the general process to install packages using APT: First, update the package lists for upgrades and new package installations <font color = \"#5EA702\" >sudo apt</font> update Next, use the install command followed by the name of the package you want to install. For example, to install a package named package_name, you would use: <font color = \"#5EA702\" >sudo apt</font> install package_name If you aren't sure what the package name is, you can search for it using the following command: <font color = \"#5EA702\" >apt-cache</font> search keyword For example, let's install mle - a flexible terminal-based editor: $ <font color = \"#5EA702\" >sudo apt</font> install mle Reading package lists... Done Building dependency tree Reading state information... Done ....... Setting up mle ( 1 .4.3-1 ) ... Processing triggers for libc-bin ( 2 .31-0ubuntu9.9 ) ...","title":"Info"},{"location":"user-guide/install-apps/apt/install/#install-packages-with-apt","text":"The Advanced Package Tool, or APT, is a CLI utility for handling packages in Alnoda workspaces, which are based on Ubuntu. Debian packages can be installed in Alnoda workspace usin APT. Here is the general process to install packages using APT: First, update the package lists for upgrades and new package installations <font color = \"#5EA702\" >sudo apt</font> update Next, use the install command followed by the name of the package you want to install. For example, to install a package named package_name, you would use: <font color = \"#5EA702\" >sudo apt</font> install package_name If you aren't sure what the package name is, you can search for it using the following command: <font color = \"#5EA702\" >apt-cache</font> search keyword For example, let's install mle - a flexible terminal-based editor: $ <font color = \"#5EA702\" >sudo apt</font> install mle Reading package lists... Done Building dependency tree Reading state information... Done ....... Setting up mle ( 1 .4.3-1 ) ... Processing triggers for libc-bin ( 2 .31-0ubuntu9.9 ) ...","title":"Install packages with APT"},{"location":"user-guide/install-apps/apt/kakoune/","text":"Kakoune In the following demonstration, we'll be setting up Kakoune , a code editor that utilizes Vi's design of using \"keystrokes as a text editing language\". Being a modal editor, it bears certain similarities to Vim (which initially inspired Kakoune's creation). Install The first thing is to update the package lists. Open workspace terminal and run $ sudo apt update Fetched 339 kB in 2s (185 kB/s) Reading package lists... Done Now we can install Kakoune with APT $ sudo apt install -y kakoune Preparing to unpack .../kakoune_2019.07.01-1build1_amd64.deb ... Unpacking kakoune (2019.07.01-1build1) ... Setting up kakoune (2019.07.01-1build1) ... Kakoune is installed in the workspace. Use To open Kakoune code editor simply execute kak in the terminal $ kak","title":"Kakoune"},{"location":"user-guide/install-apps/apt/kakoune/#kakoune","text":"In the following demonstration, we'll be setting up Kakoune , a code editor that utilizes Vi's design of using \"keystrokes as a text editing language\". Being a modal editor, it bears certain similarities to Vim (which initially inspired Kakoune's creation).","title":"Kakoune"},{"location":"user-guide/install-apps/apt/kakoune/#install","text":"The first thing is to update the package lists. Open workspace terminal and run $ sudo apt update Fetched 339 kB in 2s (185 kB/s) Reading package lists... Done Now we can install Kakoune with APT $ sudo apt install -y kakoune Preparing to unpack .../kakoune_2019.07.01-1build1_amd64.deb ... Unpacking kakoune (2019.07.01-1build1) ... Setting up kakoune (2019.07.01-1build1) ... Kakoune is installed in the workspace.","title":"Install"},{"location":"user-guide/install-apps/apt/kakoune/#use","text":"To open Kakoune code editor simply execute kak in the terminal $ kak","title":"Use"},{"location":"user-guide/install-apps/apt/snipkit/","text":"In this example we will install SnipKit - snippet manager that lets you execute the scripts saved in your favorite snippet manager without even leaving the terminal. SnipKit is a terminal-based application without a graphical user interface. Info SnipKit can be installed in any workspace. We will use Codeserver workspace v.5.0 in this example. Install Add repository to the list of sources <font color=\"#5EA702\">echo</font> <font color=\"#CFAE00\">'deb [trusted=yes] https://apt.fury.io/lemoony/ /'</font> | <font color=\"#5EA702\">sudo tee</font> /etc/apt/sources.list.d/snipkit.list Update the package lists <font color=\"#5EA702\">sudo apt</font> update Install SnipKit $ sudo apt install snipkit -y Reading package lists... Done Building dependency tree Reading state information... Done The following NEW packages will be installed: snipkit Preparing to unpack .../snipkit_1.3.1_amd64.deb ... Unpacking snipkit (1.3.1) ... Setting up snipkit (1.3.1) ... Initialize Create a new config $ snipkit config init Config file created at: <span style=\"text-decoration: underline; font-style: italic;\">/home/abc/.config/snipkit/config.yaml</span> To add snippet managers, type in snipkit manager add. If you want to edit the config, type in <span style=\"text-decoration: underline; font-style: italic;\">snipkit config edit</span>. If you want to delete the config, type in <span style=\"text-decoration: underline; font-style: italic;\">snipkit config clean</span>. Follow the next steps to add your snippet manager to SnipKit. Add tag On the \"About\" tab of the workspace UI you can see that workspaces have tags. Let's add snipkit tag tp our workspace to indicate that this application is present. Open \"Admin\" tab, go to \"Workspace settings\", then to \"Features\", add new tag after comma and save.","title":"SnipKit"},{"location":"user-guide/install-apps/apt/snipkit/#install","text":"Add repository to the list of sources <font color=\"#5EA702\">echo</font> <font color=\"#CFAE00\">'deb [trusted=yes] https://apt.fury.io/lemoony/ /'</font> | <font color=\"#5EA702\">sudo tee</font> /etc/apt/sources.list.d/snipkit.list Update the package lists <font color=\"#5EA702\">sudo apt</font> update Install SnipKit $ sudo apt install snipkit -y Reading package lists... Done Building dependency tree Reading state information... Done The following NEW packages will be installed: snipkit Preparing to unpack .../snipkit_1.3.1_amd64.deb ... Unpacking snipkit (1.3.1) ... Setting up snipkit (1.3.1) ...","title":"Install"},{"location":"user-guide/install-apps/apt/snipkit/#initialize","text":"Create a new config $ snipkit config init Config file created at: <span style=\"text-decoration: underline; font-style: italic;\">/home/abc/.config/snipkit/config.yaml</span> To add snippet managers, type in snipkit manager add. If you want to edit the config, type in <span style=\"text-decoration: underline; font-style: italic;\">snipkit config edit</span>. If you want to delete the config, type in <span style=\"text-decoration: underline; font-style: italic;\">snipkit config clean</span>. Follow the next steps to add your snippet manager to SnipKit.","title":"Initialize"},{"location":"user-guide/install-apps/apt/snipkit/#add-tag","text":"On the \"About\" tab of the workspace UI you can see that workspaces have tags. Let's add snipkit tag tp our workspace to indicate that this application is present. Open \"Admin\" tab, go to \"Workspace settings\", then to \"Features\", add new tag after comma and save.","title":"Add tag"},{"location":"user-guide/install-apps/asdf/devspace/","text":"DevSpace In this example we will istall DevSpace - an open-source developer tool for Kubernetes that lets developers build, test, and debug applications directly inside Kubernetes. It essentially aims to automate the deployment process of applications in a Kubernetes environment. Info DevSpace can be installed in any workspace. We will use Alnoda workspace v.1.1 in this example. Install devspace plugin : <font color=\"#5EA702\">asdf</font> plugin-add devspace Show all installable versions: <font color=\"#5EA702\">asdf</font> list-all devspace Install specific version: <font color=\"#5EA702\">asdf</font> install devspace latest Set the latest devspace version globally: <font color=\"#5EA702\">asdf</font> global devspace latest Now devspace commands are available: $ devspace --version devspace version 6.3.2","title":"Devspace"},{"location":"user-guide/install-apps/asdf/devspace/#devspace","text":"In this example we will istall DevSpace - an open-source developer tool for Kubernetes that lets developers build, test, and debug applications directly inside Kubernetes. It essentially aims to automate the deployment process of applications in a Kubernetes environment. Info DevSpace can be installed in any workspace. We will use Alnoda workspace v.1.1 in this example. Install devspace plugin : <font color=\"#5EA702\">asdf</font> plugin-add devspace Show all installable versions: <font color=\"#5EA702\">asdf</font> list-all devspace Install specific version: <font color=\"#5EA702\">asdf</font> install devspace latest Set the latest devspace version globally: <font color=\"#5EA702\">asdf</font> global devspace latest Now devspace commands are available: $ devspace --version devspace version 6.3.2","title":"DevSpace"},{"location":"user-guide/install-apps/asdf/install/","text":"ASDF plugins ASDF (Another System Definition Facility) is a version manager for handling multiple versions of languages, packages, or any binary tools on a per-project basis. It's a versatile tool for developers to manage their software environment. With ASDF, you can easily switch between different versions of a package, depending on the project requirements. Info Asdf is istalled by default in every Alnoda workspace. Installing a Package with ASDF: Before you can install a package, you need to install its plugin. List asdf plugins: <font color=\"#5EA702\">asdf</font> plugin list all For example, if you want to install Node.js, you would first install the Node.js plugin: <font color=\"#5EA702\">asdf</font> plugin-add nodejs Display installed plugins: $ asdf plugin list --urls nodejs https://github.com/asdf-vm/asdf-nodejs.git Now you can install a specific version of Node.js: $ asdf install nodejs 14.15.1 Cloning node-build... Downloading node-v14.15.1-linux-x64.tar.gz... -> https://nodejs.org/dist/v14.15.1/node-v14.15.1-linux-x64.tar.gz WARNING: node-v14.15.1-linux-x64 is in LTS Maintenance mode and nearing its end of life. It only receives *critical* security updates, *critical* bug fixes and documentation updates. Installing node-v14.15.1-linux-x64... Installed node-v14.15.1-linux-x64 to /home/abc/.asdf/installs/nodejs/14.15.1 Finally, set the version of Node.js you want to use: <font color=\"#5EA702\">asdf</font> global nodejs 14.15.1 Now you can verify that Node.js was installed correctly: $ node -v v14.15.1","title":"Info"},{"location":"user-guide/install-apps/asdf/install/#asdf-plugins","text":"ASDF (Another System Definition Facility) is a version manager for handling multiple versions of languages, packages, or any binary tools on a per-project basis. It's a versatile tool for developers to manage their software environment. With ASDF, you can easily switch between different versions of a package, depending on the project requirements. Info Asdf is istalled by default in every Alnoda workspace. Installing a Package with ASDF: Before you can install a package, you need to install its plugin. List asdf plugins: <font color=\"#5EA702\">asdf</font> plugin list all For example, if you want to install Node.js, you would first install the Node.js plugin: <font color=\"#5EA702\">asdf</font> plugin-add nodejs Display installed plugins: $ asdf plugin list --urls nodejs https://github.com/asdf-vm/asdf-nodejs.git Now you can install a specific version of Node.js: $ asdf install nodejs 14.15.1 Cloning node-build... Downloading node-v14.15.1-linux-x64.tar.gz... -> https://nodejs.org/dist/v14.15.1/node-v14.15.1-linux-x64.tar.gz WARNING: node-v14.15.1-linux-x64 is in LTS Maintenance mode and nearing its end of life. It only receives *critical* security updates, *critical* bug fixes and documentation updates. Installing node-v14.15.1-linux-x64... Installed node-v14.15.1-linux-x64 to /home/abc/.asdf/installs/nodejs/14.15.1 Finally, set the version of Node.js you want to use: <font color=\"#5EA702\">asdf</font> global nodejs 14.15.1 Now you can verify that Node.js was installed correctly: $ node -v v14.15.1","title":"ASDF plugins"},{"location":"user-guide/install-apps/binary/dagu/","text":"Dagu In this example we will set up Dagu - a cron alternative with a Web UI, but with much more capabilities. Dagu can schedule executions of DAGs with Cron expressions, and define dependencies between related jobs and represent them as a single DAG (unit of execution). Info Dagu can be installed in any workspace. We will use Python workspace v.4.0 in this example. Note First, we'll use the dagu downloader script to fetch the dagu binary. We'll then create a config file and some example DAGs. Finally, we'll add dagu to the workspace and create a shortcut on the Home page. Install First let's download dagu $ curl -L https://raw.githubusercontent.com/yohamta/dagu/main/scripts/downloader.sh | bash % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 728 100 728 0 0 2628 0 --:--:-- --:--:-- --:--:-- 2656 Downloading the latest binary to the current directory... Downloading dagu v1.8.6... Now we only need to move dagu to the user's bin folder, which is listed in the PATH $ mv dagu ~/bin with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/p</font> Configure Create configuration file ~/.dagu/admin.yaml . You can do it simply by executing $ mkdir ~/.dagu/ && touch ~/.dagu/admin.yaml with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/p</font> Open this configuration file in your IDE or file browser, and paste the following lines # Web Server Host and Port host : 0.0.0.0 port : 8033 # path to the DAGs directory dags : /home/project/dags # Web UI Color & Title navbarColor : \"#1E415E\" navbarTitle : Dagu # Basic Auth isBasicAuth : false # Base Config baseConfig : /home/project/dags/config.yaml # Others logDir : /home/project/dags/logs/admin command : /home/abc/bin/dagu In the config file, we've specified the host as 0.0.0.0 , which is essential because the application is running within a Docker container. We've also designated 8033 as the port, a vacant one within the workspace's range of 8021-8040. Warning This example relies on port 8033 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. Furthermore, we've denoted /home/project/dags as our DAGs directory. Let's establish this folder and navigate into it. $ mkdir /home/project/dags with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/p</font> $ cd /home/project/dags with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/p/dags</font> Let's create couple of dags in this folder. Open workspace IDE and create file echo.yaml with the following content steps : - name : step 1 command : echo hello - name : step 2 command : echo world depends : - step 1 And file script.yaml steps : - name : step 1 command : \"bash\" script : | cd /tmp echo \"hello world\" > hello cat hello output : RESULT - name : step 2 command : echo ${RESULT} # hello world depends : - step 1 And one file with schedule. Call this file today.yaml schedule : \"* * * * *\" env : TODAY : \"Saturday\" steps : - name : hello command : echo \"hello, today is ${TODAY}\" >> /home/hello.txt Add to workspace To initiate dagu, both the dagu server and scheduler need to be launched. We'll set both up as resilient workspace services. Once configured this way, dagu will start automatically each time the workspace is initiated. Let's first create service for dagu scheduler Open \"Admin\" tab in the workspace UI and navigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the command - dagu scheduler Save Now we need to create service for dagu server. Repeat the steps we have made with dagu scheduler. Give it any name, as command enter dagu server Restart the workspace for services to get started. You can restart workspace with the command wrk kill Add UI tab Now, let's proceed to include a shortcut tab for dagu on the workspace's \"Home\" page. This shortcut tab includes a title, description, and image. Utilize the filebrowser or IDE to upload any image of your preference into the workspace. The choice of the image is entirely yours. You may want to consider a screenshot of the app itself as one potential option. After you upload the image to the workspace Go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8033 - the port we set in the dagu configuration file. In the file picker find your image. Leave field \"path\" blank and click \"Create\" We have added Dagu shortcut to the Home page Use We can access dagu through the newly created shortcut. From here, we can view and manage the DAGs in the /home/project/dags directory, even running or creating new ones via the dagu UI. Additionally, we can observe that the 'today' DAG automatically runs every minute and review its execution history and logs.","title":"Dagu"},{"location":"user-guide/install-apps/binary/dagu/#dagu","text":"In this example we will set up Dagu - a cron alternative with a Web UI, but with much more capabilities. Dagu can schedule executions of DAGs with Cron expressions, and define dependencies between related jobs and represent them as a single DAG (unit of execution). Info Dagu can be installed in any workspace. We will use Python workspace v.4.0 in this example. Note First, we'll use the dagu downloader script to fetch the dagu binary. We'll then create a config file and some example DAGs. Finally, we'll add dagu to the workspace and create a shortcut on the Home page.","title":"Dagu"},{"location":"user-guide/install-apps/binary/dagu/#install","text":"First let's download dagu $ curl -L https://raw.githubusercontent.com/yohamta/dagu/main/scripts/downloader.sh | bash % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 728 100 728 0 0 2628 0 --:--:-- --:--:-- --:--:-- 2656 Downloading the latest binary to the current directory... Downloading dagu v1.8.6... Now we only need to move dagu to the user's bin folder, which is listed in the PATH $ mv dagu ~/bin with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/p</font>","title":"Install"},{"location":"user-guide/install-apps/binary/dagu/#configure","text":"Create configuration file ~/.dagu/admin.yaml . You can do it simply by executing $ mkdir ~/.dagu/ && touch ~/.dagu/admin.yaml with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/p</font> Open this configuration file in your IDE or file browser, and paste the following lines # Web Server Host and Port host : 0.0.0.0 port : 8033 # path to the DAGs directory dags : /home/project/dags # Web UI Color & Title navbarColor : \"#1E415E\" navbarTitle : Dagu # Basic Auth isBasicAuth : false # Base Config baseConfig : /home/project/dags/config.yaml # Others logDir : /home/project/dags/logs/admin command : /home/abc/bin/dagu In the config file, we've specified the host as 0.0.0.0 , which is essential because the application is running within a Docker container. We've also designated 8033 as the port, a vacant one within the workspace's range of 8021-8040. Warning This example relies on port 8033 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. Furthermore, we've denoted /home/project/dags as our DAGs directory. Let's establish this folder and navigate into it. $ mkdir /home/project/dags with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/p</font> $ cd /home/project/dags with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/p/dags</font> Let's create couple of dags in this folder. Open workspace IDE and create file echo.yaml with the following content steps : - name : step 1 command : echo hello - name : step 2 command : echo world depends : - step 1 And file script.yaml steps : - name : step 1 command : \"bash\" script : | cd /tmp echo \"hello world\" > hello cat hello output : RESULT - name : step 2 command : echo ${RESULT} # hello world depends : - step 1 And one file with schedule. Call this file today.yaml schedule : \"* * * * *\" env : TODAY : \"Saturday\" steps : - name : hello command : echo \"hello, today is ${TODAY}\" >> /home/hello.txt","title":"Configure"},{"location":"user-guide/install-apps/binary/dagu/#add-to-workspace","text":"To initiate dagu, both the dagu server and scheduler need to be launched. We'll set both up as resilient workspace services. Once configured this way, dagu will start automatically each time the workspace is initiated. Let's first create service for dagu scheduler Open \"Admin\" tab in the workspace UI and navigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the command - dagu scheduler Save Now we need to create service for dagu server. Repeat the steps we have made with dagu scheduler. Give it any name, as command enter dagu server Restart the workspace for services to get started. You can restart workspace with the command wrk kill","title":"Add to workspace"},{"location":"user-guide/install-apps/binary/dagu/#add-ui-tab","text":"Now, let's proceed to include a shortcut tab for dagu on the workspace's \"Home\" page. This shortcut tab includes a title, description, and image. Utilize the filebrowser or IDE to upload any image of your preference into the workspace. The choice of the image is entirely yours. You may want to consider a screenshot of the app itself as one potential option. After you upload the image to the workspace Go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8033 - the port we set in the dagu configuration file. In the file picker find your image. Leave field \"path\" blank and click \"Create\" We have added Dagu shortcut to the Home page","title":"Add UI tab"},{"location":"user-guide/install-apps/binary/dagu/#use","text":"We can access dagu through the newly created shortcut. From here, we can view and manage the DAGs in the /home/project/dags directory, even running or creating new ones via the dagu UI. Additionally, we can observe that the 'today' DAG automatically runs every minute and review its execution history and logs.","title":"Use"},{"location":"user-guide/install-apps/binary/install/","text":"Binary packages .deb files Binary packages on Ubuntu are often provided as .deb files (short for Debian). .deb is the Debian package format and the most common way of installing programs in Ubuntu. To install a binary package ( .deb file), you can use apt . <font color=\"#5EA702\">sudo apt</font> install ./package_file.deb If the package has any dependencies that are not currently installed, install those dependencies: <font color=\"#5EA702\">sudo apt</font> --fix-broken install For example, let's install a terminal browser browsh First download the .deb file to the /tmp folder $ cd /tmp 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> $ wget https://github.com/browsh-org/browsh/releases/download/v1.8.2/browsh_1.8.2_linux_amd64.deb Saving to: \u2018browsh_1.8.2_linux_amd64.deb\u2019 browsh_1.8.2_linux_amd64.deb 100%[============================>] 3.54M 9.69MB/s in 0.4s 2023-06-19 14:39:11 (9.69 MB/s) - \u2018browsh_1.8.2_linux_amd64.deb\u2019 saved [3711462/3711462] Install browsh with apt $ sudo apt install ./browsh_1.8.2_linux_amd64.deb browsh_1.8.2_linux_amd64.deb (Reading database ... 43419 files and directories currently installed.) Preparing to unpack browsh_1.8.2_linux_amd64.deb ... Unpacking browsh (1.8.2) ... dpkg: dependency problems prevent configuration of browsh: browsh depends on firefox | firefox-esr; however: Package firefox is not installed. Package firefox-esr is not installed. dpkg: error processing package browsh (--install): dependency problems - leaving unconfigured Errors were encountered while processing: browsh Finally we will install missing dependent packages $ sudo apt --fix-broken install -y ... update-alternatives: using /usr/bin/firefox to provide /usr/bin/x-www-browser (x-www-browser) in auto mode Please restart all running instances of firefox, or you will experience problems. Setting up browsh (1.8.2) ... Processing triggers for libgdk-pixbuf2.0-0:amd64 (2.40.0+dfsg-3ubuntu0.4) . Compiled executables When you download an executable and want to make it available system-wide (so that you can run it from any location in the terminal), you need to put it into a directory that's listed in your system's PATH. There are several folders that are already included in the PATH /home/abc/bin/ /home/abc/.local/bin/ For example, let's install EJSON - a small library to manage encrypted secrets using asymmetric encryption. Download archeive file from the ejson releases $ cd /tmp 08:01:30 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> $ wget wget https://github.com/Shopify/ejson/releases/download/v1.4.0/ejson_1.4.0_linux_386.tar.gz ejson_1.4.0_linux_386.tar.gz 100%[================================>] 1.36M 2.33MB/s in 0.6s 2023-06-19 15:27:29 (2.33 MB/s) - \u2018ejson_1.4.0_linux_386.tar.gz\u2019 saved [1425818/1425818] Extract the binary file from tar archeive $ tar -xzf ejson_1.4.0_linux_386.tar.gz 08:01:31 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> Add executable permissions to a file $ chmod +x ejson 08:01:31 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> Move the binary to the folder, which is listed in the $PATH environmental variable. $ mv ejson /home/abc/bin/ 08:01:32 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> Now we can use ejson $ ejson keygen Public Key: fd8f94024c1aa87slc4b8235a3a0ed8a5b494e10f61cf4c65aa119824b562f57 Private Key: 082d650b5671b96b599b7dbs213acb8e53dc47ff9211010249c48478d427cc20","title":"Info"},{"location":"user-guide/install-apps/binary/install/#binary-packages","text":"","title":"Binary packages"},{"location":"user-guide/install-apps/binary/install/#deb-files","text":"Binary packages on Ubuntu are often provided as .deb files (short for Debian). .deb is the Debian package format and the most common way of installing programs in Ubuntu. To install a binary package ( .deb file), you can use apt . <font color=\"#5EA702\">sudo apt</font> install ./package_file.deb If the package has any dependencies that are not currently installed, install those dependencies: <font color=\"#5EA702\">sudo apt</font> --fix-broken install For example, let's install a terminal browser browsh First download the .deb file to the /tmp folder $ cd /tmp 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> $ wget https://github.com/browsh-org/browsh/releases/download/v1.8.2/browsh_1.8.2_linux_amd64.deb Saving to: \u2018browsh_1.8.2_linux_amd64.deb\u2019 browsh_1.8.2_linux_amd64.deb 100%[============================>] 3.54M 9.69MB/s in 0.4s 2023-06-19 14:39:11 (9.69 MB/s) - \u2018browsh_1.8.2_linux_amd64.deb\u2019 saved [3711462/3711462] Install browsh with apt $ sudo apt install ./browsh_1.8.2_linux_amd64.deb browsh_1.8.2_linux_amd64.deb (Reading database ... 43419 files and directories currently installed.) Preparing to unpack browsh_1.8.2_linux_amd64.deb ... Unpacking browsh (1.8.2) ... dpkg: dependency problems prevent configuration of browsh: browsh depends on firefox | firefox-esr; however: Package firefox is not installed. Package firefox-esr is not installed. dpkg: error processing package browsh (--install): dependency problems - leaving unconfigured Errors were encountered while processing: browsh Finally we will install missing dependent packages $ sudo apt --fix-broken install -y ... update-alternatives: using /usr/bin/firefox to provide /usr/bin/x-www-browser (x-www-browser) in auto mode Please restart all running instances of firefox, or you will experience problems. Setting up browsh (1.8.2) ... Processing triggers for libgdk-pixbuf2.0-0:amd64 (2.40.0+dfsg-3ubuntu0.4) .","title":".deb files"},{"location":"user-guide/install-apps/binary/install/#compiled-executables","text":"When you download an executable and want to make it available system-wide (so that you can run it from any location in the terminal), you need to put it into a directory that's listed in your system's PATH. There are several folders that are already included in the PATH /home/abc/bin/ /home/abc/.local/bin/ For example, let's install EJSON - a small library to manage encrypted secrets using asymmetric encryption. Download archeive file from the ejson releases $ cd /tmp 08:01:30 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> $ wget wget https://github.com/Shopify/ejson/releases/download/v1.4.0/ejson_1.4.0_linux_386.tar.gz ejson_1.4.0_linux_386.tar.gz 100%[================================>] 1.36M 2.33MB/s in 0.6s 2023-06-19 15:27:29 (2.33 MB/s) - \u2018ejson_1.4.0_linux_386.tar.gz\u2019 saved [1425818/1425818] Extract the binary file from tar archeive $ tar -xzf ejson_1.4.0_linux_386.tar.gz 08:01:31 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> Add executable permissions to a file $ chmod +x ejson 08:01:31 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> Move the binary to the folder, which is listed in the $PATH environmental variable. $ mv ejson /home/abc/bin/ 08:01:32 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> Now we can use ejson $ ejson keygen Public Key: fd8f94024c1aa87slc4b8235a3a0ed8a5b494e10f61cf4c65aa119824b562f57 Private Key: 082d650b5671b96b599b7dbs213acb8e53dc47ff9211010249c48478d427cc20","title":"Compiled executables"},{"location":"user-guide/install-apps/binary/nnn/","text":"n\u00b3 In this example we will install nnn (n\u00b3) - a full-featured terminal file manager. It's tiny, nearly 0-config and incredibly fast. It is designed to be unobtrusive with smart workflows to match the trains of thought. nnn is a terminal-based application without a graphical user interface. Info nnn can be installed in any workspace. We will use Codeserver workspace v.5.0 for this example. Install We can download nnn from the nnn releases page . Sometimes it is not obvious which binary to dowload. The workspace is based on Ubuntu image, hence Debian application binary packages are the right choice. Open workspace terminal, and execute $ cd /tmp 08:01:30 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> $ wget https://github.com/jarun/nnn/releases/download/v4.6/nnn-static-4.6.x86_64.tar.gz nnn-static-4.6.x86_64.tar.gz.1 100%[=================================>] 626.85K 505KB/s in 1.2s 2022-09-06 18:15:26 (505 KB/s) - \u2018nnn-static-4.6.x86_64.tar.gz.1\u2019 saved [641894/641894] Extract the file from tar file $ tar -xzf nnn-static-4.6.x86_64.tar.gz 08:01:31 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> We have extracted a file nnn-static . Let's make it executable $ chmod +x nnn-static 08:01:31 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> Now we can move the binary to the folder, which is included in the $PATH environmental variable. It can be either /home/abc/bin/ or /home/abc/.local/bin/ $ mv nnn-static /home/abc/bin/nnn 08:01:32 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> Great! We can now start nnn by executing nnn -dHe in the terminal. We can also install all the nnn plugins $ curl -Ls https://raw.githubusercontent.com/jarun/nnn/master/plugins/getplugs | sh ... './autojump' -> '../../plugins/autojump' './suedit' -> '../../plugins/suedit' './kdeconnect' -> '../../plugins/kdeconnect' './gpgd' -> '../../plugins/gpgd'","title":"nnn"},{"location":"user-guide/install-apps/binary/nnn/#n3","text":"In this example we will install nnn (n\u00b3) - a full-featured terminal file manager. It's tiny, nearly 0-config and incredibly fast. It is designed to be unobtrusive with smart workflows to match the trains of thought. nnn is a terminal-based application without a graphical user interface. Info nnn can be installed in any workspace. We will use Codeserver workspace v.5.0 for this example.","title":"n\u00b3"},{"location":"user-guide/install-apps/binary/nnn/#install","text":"We can download nnn from the nnn releases page . Sometimes it is not obvious which binary to dowload. The workspace is based on Ubuntu image, hence Debian application binary packages are the right choice. Open workspace terminal, and execute $ cd /tmp 08:01:30 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> $ wget https://github.com/jarun/nnn/releases/download/v4.6/nnn-static-4.6.x86_64.tar.gz nnn-static-4.6.x86_64.tar.gz.1 100%[=================================>] 626.85K 505KB/s in 1.2s 2022-09-06 18:15:26 (505 KB/s) - \u2018nnn-static-4.6.x86_64.tar.gz.1\u2019 saved [641894/641894] Extract the file from tar file $ tar -xzf nnn-static-4.6.x86_64.tar.gz 08:01:31 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> We have extracted a file nnn-static . Let's make it executable $ chmod +x nnn-static 08:01:31 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> Now we can move the binary to the folder, which is included in the $PATH environmental variable. It can be either /home/abc/bin/ or /home/abc/.local/bin/ $ mv nnn-static /home/abc/bin/nnn 08:01:32 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> Great! We can now start nnn by executing nnn -dHe in the terminal. We can also install all the nnn plugins $ curl -Ls https://raw.githubusercontent.com/jarun/nnn/master/plugins/getplugs | sh ... './autojump' -> '../../plugins/autojump' './suedit' -> '../../plugins/suedit' './kdeconnect' -> '../../plugins/kdeconnect' './gpgd' -> '../../plugins/gpgd'","title":"Install"},{"location":"user-guide/install-apps/binary/q/","text":"In this example we will install q which allows to run SQL directly on CSV or TSV files. q's purpose is to bring SQL expressive power to the Linux command line by providing easy access to text as actual data, and allowing direct access to multi-file sqlite3 databases. q is a terminal-based application without a graphical user interface. Info q can be installed in any workspace. We will use Codeserver workspace v.5.0 in this example. Install The first thing to do is to download the q binary package. Open workspace terminal and execute the following commands $ cd /tmp 08:01:30 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> $ wget https://github.com/harelba/q/releases/download/v3.1.6/q-text-as-data-3.1.6-1.x86_64.deb q-text-as-data-3.1.6-1.x86_64.deb 100%[==================================>] 26.36M 1.72MB/s in 9.2s 2022-09-05 08:03:32 (2.87 MB/s) - \u2018q-text-as-data-3.1.6-1.x86_64.deb\u2019 saved [27641912/27641912] Now we can install q $ sudo dpkg -i q-text-as-data-3.1.6-1.x86_64.deb Selecting previously unselected package q-text-as-data. (Reading database ... 35238 files and directories currently installed.) Preparing to unpack q-text-as-data-3.1.6-1.x86_64.deb ... Unpacking q-text-as-data (3.1.6) ... Setting up q-text-as-data (3.1.6) ... You can check if q is installed $ q q version 3.1.6 Python: 3.8.11 (default, Jul 24 2021, 23:08:48) // [Clang 12.0.1 ] Copyright (C) 2012-2021 Harel Ben-Attia (harelba@gmail.com, @harelba on twitter) http://harelba.github.io/q/ Must provide at least one query in the command line, or through a file with the -q parameter Use Let's create a dummy .csv file, and try querying it with q $ seq 1 1000000 > /home/project/myfile.csv $ tail -n 3 /home/project/myfile.csv 999998 999999 1000000 We have printed last 3 rows, and see that the .csv file is generated. Let's query it now with q $ cd /home/project 08:01:33 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">~p</font> <font color=\"#98E242\">\u279c</font> $ q \"select sum(c1),count(*) from myfile.csv where c1 % 3 = 0\" 166666833333 333333 Check out more examples on the q documentation website .","title":"q"},{"location":"user-guide/install-apps/binary/q/#install","text":"The first thing to do is to download the q binary package. Open workspace terminal and execute the following commands $ cd /tmp 08:01:30 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/tmp</font> <font color=\"#98E242\">\u279c</font> $ wget https://github.com/harelba/q/releases/download/v3.1.6/q-text-as-data-3.1.6-1.x86_64.deb q-text-as-data-3.1.6-1.x86_64.deb 100%[==================================>] 26.36M 1.72MB/s in 9.2s 2022-09-05 08:03:32 (2.87 MB/s) - \u2018q-text-as-data-3.1.6-1.x86_64.deb\u2019 saved [27641912/27641912] Now we can install q $ sudo dpkg -i q-text-as-data-3.1.6-1.x86_64.deb Selecting previously unselected package q-text-as-data. (Reading database ... 35238 files and directories currently installed.) Preparing to unpack q-text-as-data-3.1.6-1.x86_64.deb ... Unpacking q-text-as-data (3.1.6) ... Setting up q-text-as-data (3.1.6) ... You can check if q is installed $ q q version 3.1.6 Python: 3.8.11 (default, Jul 24 2021, 23:08:48) // [Clang 12.0.1 ] Copyright (C) 2012-2021 Harel Ben-Attia (harelba@gmail.com, @harelba on twitter) http://harelba.github.io/q/ Must provide at least one query in the command line, or through a file with the -q parameter","title":"Install"},{"location":"user-guide/install-apps/binary/q/#use","text":"Let's create a dummy .csv file, and try querying it with q $ seq 1 1000000 > /home/project/myfile.csv $ tail -n 3 /home/project/myfile.csv 999998 999999 1000000 We have printed last 3 rows, and see that the .csv file is generated. Let's query it now with q $ cd /home/project 08:01:33 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">~p</font> <font color=\"#98E242\">\u279c</font> $ q \"select sum(c1),count(*) from myfile.csv where c1 % 3 = 0\" 166666833333 333333 Check out more examples on the q documentation website .","title":"Use"},{"location":"user-guide/install-apps/binary/img/zenith/","text":"","title":"Zenith"},{"location":"user-guide/install-apps/go/cointop/","text":"Cointop In this example we will set up cointop - a fast and lightweight interactive terminal based UI application for tracking and monitoring cryptocurrency coin stats in real-time. Install Go version 1.18.2 $ wrk install go==1.18.2 ... \ud83d\ude80 done R E S T A R T T E R M I N A L N O W (CTRL+D) !!!!!!!! *********************************************** Please restart the terminal now! Now we can install the latest versio of cointop $ go install github.com/cointop-sh/cointop@latest ... go: downloading github.com/godbus/dbus/v5 v5.0.4 go: downloading github.com/anaskhan96/soup v1.0.1 go: downloading golang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4 Restart the terminal again Now you can start the application from the command line $ cointop","title":"cointop"},{"location":"user-guide/install-apps/go/cointop/#cointop","text":"In this example we will set up cointop - a fast and lightweight interactive terminal based UI application for tracking and monitoring cryptocurrency coin stats in real-time. Install Go version 1.18.2 $ wrk install go==1.18.2 ... \ud83d\ude80 done R E S T A R T T E R M I N A L N O W (CTRL+D) !!!!!!!! *********************************************** Please restart the terminal now! Now we can install the latest versio of cointop $ go install github.com/cointop-sh/cointop@latest ... go: downloading github.com/godbus/dbus/v5 v5.0.4 go: downloading github.com/anaskhan96/soup v1.0.1 go: downloading golang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4 Restart the terminal again Now you can start the application from the command line $ cointop","title":"Cointop"},{"location":"user-guide/install-apps/go/install/","text":"Install Go applications You can install Go(lang) applications from the source code with the command go install . With go being a tool for managing Go source code, go install command is used to compile and install packages and dependencies. To install Go applications you'll need to make sure you have Go installed in the workspace. You can do this by running go version in your terminal. If Go is installed, it will return the version, if not, you'll need to install Go first. Note Go is not installed by default in Alnoda workspaces. You can install Go in awny Alnoda with the command wrk install go The first thing to do is to install Go in the workspace: <font color=\"#5EA702\">wrk</font> istall go Warning After installing Go please reload terminal Now you can install any go application with the command go install . Let's install hey - HTTP load generator: $ go install github.com/rakyll/hey@latest go: downloading github.com/rakyll/hey v0.1.4 go: downloading golang.org/x/net v0.0.0-20181017193950-04a2e542c03f go: downloading golang.org/x/text v0.3.0 You can now use hey to send some load to a web application. For example, if you want to send 1000 requests to http://localhost:8080 , you can do so as follows: <font color=\"#5EA702\">hey</font> -n 1000 http://localhost:8080 Alnoda Hub If you are planning to register Go application in the Alnoda Hub, you need to start installation script with the command that installs Go and set environmental variables : wrk install go export PATH = \" $PATH :/home/abc/go/bin\"","title":"Info"},{"location":"user-guide/install-apps/go/install/#install-go-applications","text":"You can install Go(lang) applications from the source code with the command go install . With go being a tool for managing Go source code, go install command is used to compile and install packages and dependencies. To install Go applications you'll need to make sure you have Go installed in the workspace. You can do this by running go version in your terminal. If Go is installed, it will return the version, if not, you'll need to install Go first. Note Go is not installed by default in Alnoda workspaces. You can install Go in awny Alnoda with the command wrk install go The first thing to do is to install Go in the workspace: <font color=\"#5EA702\">wrk</font> istall go Warning After installing Go please reload terminal Now you can install any go application with the command go install . Let's install hey - HTTP load generator: $ go install github.com/rakyll/hey@latest go: downloading github.com/rakyll/hey v0.1.4 go: downloading golang.org/x/net v0.0.0-20181017193950-04a2e542c03f go: downloading golang.org/x/text v0.3.0 You can now use hey to send some load to a web application. For example, if you want to send 1000 requests to http://localhost:8080 , you can do so as follows: <font color=\"#5EA702\">hey</font> -n 1000 http://localhost:8080","title":"Install Go applications"},{"location":"user-guide/install-apps/go/install/#alnoda-hub","text":"If you are planning to register Go application in the Alnoda Hub, you need to start installation script with the command that installs Go and set environmental variables : wrk install go export PATH = \" $PATH :/home/abc/go/bin\"","title":"Alnoda Hub"},{"location":"user-guide/install-apps/in-browser/install/","text":"In-browser applications In-browser applications, also known as web applications, are programs that run directly within a web browser without needing to be installed in the workspace. Info In-browser applications necessitate no installation. All they require is a static file server in the workspace to be served. Note Every Alnoda workspace has python static filke server by default, but you can also install other alternatives from the Aloda Hub. The procedure of integrating static web applications into Alnoda workspaces involves two stages: Downloading the static website that contains the in-browser application Serving the downloaded static website via the static file server As an example, let's add Laverna to the workspace. Laverna is a JavaScript note-taking web application with a Markdown editor and encryption support. It's built to be an open source alternative to Evernote. Open workspace terminal and download a prebuilt version of Laverna: <font color = \"#5EA702\" >wget</font> https://github.com/Laverna/static-laverna/archive/gh-pages.zip -O laverna.zip Extract zip file: <font color = \"#5EA702\" >unzip</font> laverna.zip -d /home/abc/apps/ The files were extracted into the folder /home/abc/apps/static-laverna-gh-pages/ , let's rename it: <font color = \"#5EA702\" >mv</font> /home/abc/apps/static-laverna-gh-pages/ /home/abc/apps/laverna Serve Laverna with a default python static server: <font color = \"#5EA702\" >cd</font> /home/abc/apps/laverna ; <font color = \"#5EA702\" >python</font> -m http.server 8026 Now you can open Limus using tab \"My App on port 8026\". Warning In-browser applications store data not in the workspace, but in the browser you are opening it. If clear browser cache you will loose the data. You will also not have the same data if you open app in the other browser.","title":"Info"},{"location":"user-guide/install-apps/in-browser/install/#in-browser-applications","text":"In-browser applications, also known as web applications, are programs that run directly within a web browser without needing to be installed in the workspace. Info In-browser applications necessitate no installation. All they require is a static file server in the workspace to be served. Note Every Alnoda workspace has python static filke server by default, but you can also install other alternatives from the Aloda Hub. The procedure of integrating static web applications into Alnoda workspaces involves two stages: Downloading the static website that contains the in-browser application Serving the downloaded static website via the static file server As an example, let's add Laverna to the workspace. Laverna is a JavaScript note-taking web application with a Markdown editor and encryption support. It's built to be an open source alternative to Evernote. Open workspace terminal and download a prebuilt version of Laverna: <font color = \"#5EA702\" >wget</font> https://github.com/Laverna/static-laverna/archive/gh-pages.zip -O laverna.zip Extract zip file: <font color = \"#5EA702\" >unzip</font> laverna.zip -d /home/abc/apps/ The files were extracted into the folder /home/abc/apps/static-laverna-gh-pages/ , let's rename it: <font color = \"#5EA702\" >mv</font> /home/abc/apps/static-laverna-gh-pages/ /home/abc/apps/laverna Serve Laverna with a default python static server: <font color = \"#5EA702\" >cd</font> /home/abc/apps/laverna ; <font color = \"#5EA702\" >python</font> -m http.server 8026 Now you can open Limus using tab \"My App on port 8026\". Warning In-browser applications store data not in the workspace, but in the browser you are opening it. If clear browser cache you will loose the data. You will also not have the same data if you open app in the other browser.","title":"In-browser applications"},{"location":"user-guide/install-apps/in-browser/jupyterlite/","text":"JupyterLite In this example we will set up JupyterLite - a JupyterLab distribution that runs entirely in the browser built from the ground-up using JupyterLab components and extensions. Info JupyterLite is an entirely in-browser application and needs only to be served via static WEB server. Preparation Install jupyterlite which is used to generate static Jupyterlite website: $ pipx install jupyterlite --include-deps installed package jupyterlite 0.1.0, installed using Python 3.8.10 These apps are now globally available - doit - jupyter - jupyter-lite - jupyter-migrate - jupyter-piplite - jupyter-troubleshoot - pkginfo done! \u2728 \ud83c\udf1f \u2728 Create Now we can generate static website, and output the result into the folder /home/abc/apps/jupyterlite : <font color=\"#5EA702\">jupyter</font> lite build --output-dir /home/abc/apps/jupyterlite Serve jupyterlite with the default workspace static server <font color=\"#5EA702\">cd</font> /home/abc/apps/jupyterlite; <font color=\"#5EA702\">python</font> -m http.server 8026 Permanent service The serving of Jupyterlite will terminate as soon as you close the terminal session window. To make it permanent: Open workspace Admin and select \"Workspace settings\". In the workspace settings, go to \"Apps & Services\". Choose the \"START NEW\" option from the picklist. As command provide the following; cd /home/abc/apps/jupyterlite ; python -m http.server 8035 Warning This example relies on port 8035 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. Save the service. Restart the workspace. Update UI Let's add a card for JupyterLite on the Home page for quick access. UI tab needs an image, choose the one and upload using Filebrowser. Open workspace UI, navigate to \"Admin\" tab and open \"Workspace settings\". Then go to \"Interface\" tab and select \"CREATE NEW\" from the picklist. Give it any title, and any description Choose image you have uploaded Enter port 8035 - the port of the static web server (Serve) Enter path jupyterlite/lab Now we have a shortcut tab on the \"Home\" page to quickly onep JupyterLab Result We have generated webpage with JupyterLite and serve it with Serve (static web server). We have created JupyterLite tab on the workspace UI.","title":"JupyterLite"},{"location":"user-guide/install-apps/in-browser/jupyterlite/#jupyterlite","text":"In this example we will set up JupyterLite - a JupyterLab distribution that runs entirely in the browser built from the ground-up using JupyterLab components and extensions. Info JupyterLite is an entirely in-browser application and needs only to be served via static WEB server.","title":"JupyterLite"},{"location":"user-guide/install-apps/in-browser/jupyterlite/#preparation","text":"Install jupyterlite which is used to generate static Jupyterlite website: $ pipx install jupyterlite --include-deps installed package jupyterlite 0.1.0, installed using Python 3.8.10 These apps are now globally available - doit - jupyter - jupyter-lite - jupyter-migrate - jupyter-piplite - jupyter-troubleshoot - pkginfo done! \u2728 \ud83c\udf1f \u2728","title":"Preparation"},{"location":"user-guide/install-apps/in-browser/jupyterlite/#create","text":"Now we can generate static website, and output the result into the folder /home/abc/apps/jupyterlite : <font color=\"#5EA702\">jupyter</font> lite build --output-dir /home/abc/apps/jupyterlite Serve jupyterlite with the default workspace static server <font color=\"#5EA702\">cd</font> /home/abc/apps/jupyterlite; <font color=\"#5EA702\">python</font> -m http.server 8026","title":"Create"},{"location":"user-guide/install-apps/in-browser/jupyterlite/#permanent-service","text":"The serving of Jupyterlite will terminate as soon as you close the terminal session window. To make it permanent: Open workspace Admin and select \"Workspace settings\". In the workspace settings, go to \"Apps & Services\". Choose the \"START NEW\" option from the picklist. As command provide the following; cd /home/abc/apps/jupyterlite ; python -m http.server 8035 Warning This example relies on port 8035 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. Save the service. Restart the workspace.","title":"Permanent service"},{"location":"user-guide/install-apps/in-browser/jupyterlite/#update-ui","text":"Let's add a card for JupyterLite on the Home page for quick access. UI tab needs an image, choose the one and upload using Filebrowser. Open workspace UI, navigate to \"Admin\" tab and open \"Workspace settings\". Then go to \"Interface\" tab and select \"CREATE NEW\" from the picklist. Give it any title, and any description Choose image you have uploaded Enter port 8035 - the port of the static web server (Serve) Enter path jupyterlite/lab Now we have a shortcut tab on the \"Home\" page to quickly onep JupyterLab","title":"Update UI"},{"location":"user-guide/install-apps/in-browser/jupyterlite/#result","text":"We have generated webpage with JupyterLite and serve it with Serve (static web server). We have created JupyterLite tab on the workspace UI.","title":"Result"},{"location":"user-guide/install-apps/in-browser/laverna/","text":"Laverna - keep your notes private Intro In this example we will add Laverna to the workspace. Laverna is a JavaScript note-taking web application with a Markdown editor and encryption support. It's built to be an open source alternative to Evernote. Laverna is a pure client-side application. One can either build Laverna onn her own, or download a ready static webpage. Attention Laverna requires static web server. One can use Extended workspace or any other workspaces have this workspace in its lineage. Extended workspace will be used in this example. Note In this example, we will download the webpage with the pre-built version of Laverna, and add Laverna card to the Home tab. Download Open workspace terminal and execute to download a prebuilt version of Laverna $ wget https://github.com/Laverna/static-laverna/archive/gh-pages.zip -O laverna.zip 2022 -09-14 10 :24:01 ( 168 KB/s ) - \u2018laverna.zip\u2019 saved [ 2460536 ] Extract zip into the folder which is served by the Serve (Static web server) $ unzip laverna.zip -d /home/static-server ... inflating: /home/static-server/static-laverna-gh-pages/styles/core/fontello/font/fontello.eot inflating: /home/static-server/static-laverna-gh-pages/styles/core/fontello/font/fontello.svg inflating: /home/static-server/static-laverna-gh-pages/styles/core/fontello/font/fontello.ttf inflating: /home/static-server/static-laverna-gh-pages/styles/core/fontello/font/fontello.woff inflating: /home/static-server/static-laverna-gh-pages/styles/theme-default.css The files were extracted into the folder /home/abc/apps/laverna/static-laverna-gh-pages . Let's rename it to shorter name $ mv /home/static-server/static-laverna-gh-pages /home/static-server/laverna ... inflating: /home/static-server/static-laverna-gh-pages/styles/core/fontello/font/fontello.eot inflating: /home/static-server/static-laverna-gh-pages/styles/core/fontello/font/fontello.svg inflating: /home/static-server/static-laverna-gh-pages/styles/core/fontello/font/fontello.ttf inflating: /home/static-server/static-laverna-gh-pages/styles/core/fontello/font/fontello.woff inflating: /home/static-server/static-laverna-gh-pages/styles/theme-default.css Ok, we age ready! Now we can open Laverna from the \"Home\" tab of the workspace UI. We simply eed to open Serve - static web server, and navigate to folder lavena . Use Now we can open Laverna and create first note: The application stores all your notes in your browser databases such as indexedDB or localStorage, which is good for security reasons, because only you have access to them. But this makes workspace not very portable. You can only use Laverna on the same machine. Moreover same browser. Laverna has a feature to use remotestorage.io to store notes securely and reliably. You can cofigure remote storage in the Laverna settings. Update UI If you want to use Laverna often, it would be more tocnvenient to add Laverna card on the Home tab of the workspace UI. To create a new card on the Home page, follow these steps: Choose any image for the Laverna card, and upload it to the workspace via File Browser. Open workspace UI, navigate to \"Admin\" tab and open \"Workspace settings\". Then go to \"Interface\" tab and select \"CREATE NEW\" from the picklist. Give it any title, and any description. Choose image you have uploaded. Enter port 8028 - the port of the static web server (Serve). Use file picker to choose the image you have uploaded. Enter path laverna/ . Click \"Save\". Great! Now we have a nice card for Laverna directly on the Home tab. Result We have downladed a pre-built static webpage with Laverna and serve it with Serve (static web server). We have created a new tab for Laverna directly on the Home tab.","title":"Laverna - keep your notes private"},{"location":"user-guide/install-apps/in-browser/laverna/#laverna-keep-your-notes-private","text":"","title":"Laverna - keep your notes private"},{"location":"user-guide/install-apps/in-browser/laverna/#intro","text":"In this example we will add Laverna to the workspace. Laverna is a JavaScript note-taking web application with a Markdown editor and encryption support. It's built to be an open source alternative to Evernote. Laverna is a pure client-side application. One can either build Laverna onn her own, or download a ready static webpage. Attention Laverna requires static web server. One can use Extended workspace or any other workspaces have this workspace in its lineage. Extended workspace will be used in this example. Note In this example, we will download the webpage with the pre-built version of Laverna, and add Laverna card to the Home tab.","title":"Intro"},{"location":"user-guide/install-apps/in-browser/laverna/#download","text":"Open workspace terminal and execute to download a prebuilt version of Laverna $ wget https://github.com/Laverna/static-laverna/archive/gh-pages.zip -O laverna.zip 2022 -09-14 10 :24:01 ( 168 KB/s ) - \u2018laverna.zip\u2019 saved [ 2460536 ] Extract zip into the folder which is served by the Serve (Static web server) $ unzip laverna.zip -d /home/static-server ... inflating: /home/static-server/static-laverna-gh-pages/styles/core/fontello/font/fontello.eot inflating: /home/static-server/static-laverna-gh-pages/styles/core/fontello/font/fontello.svg inflating: /home/static-server/static-laverna-gh-pages/styles/core/fontello/font/fontello.ttf inflating: /home/static-server/static-laverna-gh-pages/styles/core/fontello/font/fontello.woff inflating: /home/static-server/static-laverna-gh-pages/styles/theme-default.css The files were extracted into the folder /home/abc/apps/laverna/static-laverna-gh-pages . Let's rename it to shorter name $ mv /home/static-server/static-laverna-gh-pages /home/static-server/laverna ... inflating: /home/static-server/static-laverna-gh-pages/styles/core/fontello/font/fontello.eot inflating: /home/static-server/static-laverna-gh-pages/styles/core/fontello/font/fontello.svg inflating: /home/static-server/static-laverna-gh-pages/styles/core/fontello/font/fontello.ttf inflating: /home/static-server/static-laverna-gh-pages/styles/core/fontello/font/fontello.woff inflating: /home/static-server/static-laverna-gh-pages/styles/theme-default.css Ok, we age ready! Now we can open Laverna from the \"Home\" tab of the workspace UI. We simply eed to open Serve - static web server, and navigate to folder lavena .","title":"Download"},{"location":"user-guide/install-apps/in-browser/laverna/#use","text":"Now we can open Laverna and create first note: The application stores all your notes in your browser databases such as indexedDB or localStorage, which is good for security reasons, because only you have access to them. But this makes workspace not very portable. You can only use Laverna on the same machine. Moreover same browser. Laverna has a feature to use remotestorage.io to store notes securely and reliably. You can cofigure remote storage in the Laverna settings.","title":"Use"},{"location":"user-guide/install-apps/in-browser/laverna/#update-ui","text":"If you want to use Laverna often, it would be more tocnvenient to add Laverna card on the Home tab of the workspace UI. To create a new card on the Home page, follow these steps: Choose any image for the Laverna card, and upload it to the workspace via File Browser. Open workspace UI, navigate to \"Admin\" tab and open \"Workspace settings\". Then go to \"Interface\" tab and select \"CREATE NEW\" from the picklist. Give it any title, and any description. Choose image you have uploaded. Enter port 8028 - the port of the static web server (Serve). Use file picker to choose the image you have uploaded. Enter path laverna/ . Click \"Save\". Great! Now we have a nice card for Laverna directly on the Home tab.","title":"Update UI"},{"location":"user-guide/install-apps/in-browser/laverna/#result","text":"We have downladed a pre-built static webpage with Laverna and serve it with Serve (static web server). We have created a new tab for Laverna directly on the Home tab.","title":"Result"},{"location":"user-guide/install-apps/java/install/","text":"","title":"Install"},{"location":"user-guide/install-apps/nix/glow/","text":"Glow In this example we will install Glow - a terminal based markdown reader designed from the ground up to bring out the beauty and power of the CLI. Use Glow to discover markdown files, read documentation directly on the command line and stash markdown files to your own private collection so you can read them anywhere. Glow will find local markdown files in subdirectories or a local Git repository. Info Glow can be installed in any workspace. We will use Alnoda workspace v.1.1 in this example. Install With Nix Glow can be installed with a single command $ nix-env -iA nixpkgs.glow installing 'glow-1.4.1' ... copying path '/nix/store/nhkhb4dhsvhhyjvrjfx4kh67gk6drrvk-glow-1.4.1' from 'https://cache.nixos.org'... building '/nix/store/m0ll1v4gchj24xjw4l3hk2dgj4mmlrf0-user-environment.drv'... Great! Glow is installed and ready to use. Explore Let's clone Glows own repository, and use Glow to view the Markdown files there $ git clone https://github.com/charmbracelet/glow Cloning into 'glow'... remote: Enumerating objects: 3199, done. remote: Counting objects: 100% (246/246), done. remote: Compressing objects: 100% (108/108), done. remote: Total 3199 (delta 153), reused 204 (delta 126), pack-reused 2953 Receiving objects: 100% (3199/3199), 2.65 MiB | 1.21 MiB/s, done. Resolving deltas: 100% (2126/2126), done. Go to the cloned directory, and launch Glow $ cd glow 08:01:32 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">~p/glow</font> on <font color=\"#BC94B7\">\u21e1master</font> <font color=\"#98E242\">\u279c</font> $ glow You can see the Glow opened. Now we can view Markdown files Alias It is not very convennient to type the whole word \"glow\" every time we want to use it. let's create a single-character alias to open Glow instead: on the workspace UI go to the \"Admin\" tab, open \"Workspace Settings\" and go to \"Aliases\". select \"ADD NEW\", enter g as short name, and glow as command. Click \"Save\". open a new terminal window, go to the cloned repository folder again, and use g to open the same markdown file with Glow $ cd glow 08:03:32 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">~p/glow</font> on <font color=\"#BC94B7\">\u21e1master</font> <font color=\"#98E242\">\u279c</font> $ g","title":"Glow"},{"location":"user-guide/install-apps/nix/glow/#glow","text":"In this example we will install Glow - a terminal based markdown reader designed from the ground up to bring out the beauty and power of the CLI. Use Glow to discover markdown files, read documentation directly on the command line and stash markdown files to your own private collection so you can read them anywhere. Glow will find local markdown files in subdirectories or a local Git repository. Info Glow can be installed in any workspace. We will use Alnoda workspace v.1.1 in this example.","title":"Glow"},{"location":"user-guide/install-apps/nix/glow/#install","text":"With Nix Glow can be installed with a single command $ nix-env -iA nixpkgs.glow installing 'glow-1.4.1' ... copying path '/nix/store/nhkhb4dhsvhhyjvrjfx4kh67gk6drrvk-glow-1.4.1' from 'https://cache.nixos.org'... building '/nix/store/m0ll1v4gchj24xjw4l3hk2dgj4mmlrf0-user-environment.drv'... Great! Glow is installed and ready to use.","title":"Install"},{"location":"user-guide/install-apps/nix/glow/#explore","text":"Let's clone Glows own repository, and use Glow to view the Markdown files there $ git clone https://github.com/charmbracelet/glow Cloning into 'glow'... remote: Enumerating objects: 3199, done. remote: Counting objects: 100% (246/246), done. remote: Compressing objects: 100% (108/108), done. remote: Total 3199 (delta 153), reused 204 (delta 126), pack-reused 2953 Receiving objects: 100% (3199/3199), 2.65 MiB | 1.21 MiB/s, done. Resolving deltas: 100% (2126/2126), done. Go to the cloned directory, and launch Glow $ cd glow 08:01:32 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">~p/glow</font> on <font color=\"#BC94B7\">\u21e1master</font> <font color=\"#98E242\">\u279c</font> $ glow You can see the Glow opened. Now we can view Markdown files","title":"Explore"},{"location":"user-guide/install-apps/nix/glow/#alias","text":"It is not very convennient to type the whole word \"glow\" every time we want to use it. let's create a single-character alias to open Glow instead: on the workspace UI go to the \"Admin\" tab, open \"Workspace Settings\" and go to \"Aliases\". select \"ADD NEW\", enter g as short name, and glow as command. Click \"Save\". open a new terminal window, go to the cloned repository folder again, and use g to open the same markdown file with Glow $ cd glow 08:03:32 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">~p/glow</font> on <font color=\"#BC94B7\">\u21e1master</font> <font color=\"#98E242\">\u279c</font> $ g","title":"Alias"},{"location":"user-guide/install-apps/nix/install/","text":"Nix packages Nix is a powerful package manager for Linux and other Unix-like systems. It has a number of unique features which make it different from other traditional package managers: Atomic upgrades and rollbacks: Nix ensures that installing or upgrading one package can't break others. Multi-user package management: Non-privileged users can securely install packages and each user is prevented from interfering with others. Source-based and binary-based: Nix allows you to build packages from source to customize build-time parameters, but also supports binary installs for quicker deployment. Info Nix is istalled by default in every Alnoda workspace. Check out Nix package search to find the package you need! You can install Nix packages with the nix-env -iA nixpkgs. command followed by the package name, like so <font color=\"#5EA702\">nix-env</font> -iA nixpkgs.vis Warning Nix is designed to be deterministic, which means that it builds packages from source to ensure that the build process is repeatable and results in the exact same output every time. Sometimes installation of Nix package can take time.","title":"Info"},{"location":"user-guide/install-apps/nix/install/#nix-packages","text":"Nix is a powerful package manager for Linux and other Unix-like systems. It has a number of unique features which make it different from other traditional package managers: Atomic upgrades and rollbacks: Nix ensures that installing or upgrading one package can't break others. Multi-user package management: Non-privileged users can securely install packages and each user is prevented from interfering with others. Source-based and binary-based: Nix allows you to build packages from source to customize build-time parameters, but also supports binary installs for quicker deployment. Info Nix is istalled by default in every Alnoda workspace. Check out Nix package search to find the package you need! You can install Nix packages with the nix-env -iA nixpkgs. command followed by the package name, like so <font color=\"#5EA702\">nix-env</font> -iA nixpkgs.vis Warning Nix is designed to be deterministic, which means that it builds packages from source to ensure that the build process is repeatable and results in the exact same output every time. Sometimes installation of Nix package can take time.","title":"Nix packages"},{"location":"user-guide/install-apps/nix/micro/","text":"Micro In this example we will install Micro - a terminal-based text editor that aims to be easy to use and intuitive, while also taking advantage of the full capabilities of modern terminals. It comes as one single, batteries-included, static binary with no dependencies, and you can download and use it right now. Micro is a terminal-based application without a graphical user interface. Info Micro can be installed in any workspace. We will use Codeserver workspace v.4.0 in this example. Install To install Micro with Nix, execute the next command $ nix-env -iA nixpkgs.micro installing 'micro-2.0.11' ... copying path '/nix/store/6f1vr3ar1rrz4dkbfsyprns33z6bf635-micro-2.0.11' from 'https://cache.nixos.org'... building '/nix/store/ziffm6mfmqbbfq5ss7cb7ms2lr9ic92f-user-environment.drv'... Explore Let's clone Micro own repository and edit some of the files in it $ git clone https://github.com/zyedidia/micro Cloning into 'micro'... remote: Enumerating objects: 18041, done. remote: Counting objects: 100% (9/9), done. remote: Compressing objects: 100% (9/9), done. remote: Total 18041 (delta 2), reused 3 (delta 0), pack-reused 18032 Receiving objects: 100% (18041/18041), 12.26 MiB | 1.42 MiB/s, done. Resolving deltas: 100% (12284/12284), done. Go to the cloned directory, and use Micro to edit file snapcraft.yaml $ cd micro 08:01:32 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">~p/micro</font> on <font color=\"#BC94B7\">\u21e1master</font> <font color=\"#98E242\">\u279c</font> $ micro snapcraft.yaml Alias It is not very convennient to type the whole word \"micro\" every time we want to use it. let's create a single-character alias to open files with Micro: on the workspace UI go to the \"Admin\" tab, open \"Workspace Settings\" and go to \"Aliases\". select \"ADD NEW\", enter m as short name, and micro as command. Click \"Save\". open a new terminal window, go to the cloned repository folder again, and use m (instead of micro ) to open the same file. $ cd micro 08:01:32 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">~p/micro</font> on <font color=\"#BC94B7\">\u21e1master</font> <font color=\"#98E242\">\u279c</font> $ m snapcraft.yaml Now we can quicly open and edit any file with a single-character command m .","title":"Micro"},{"location":"user-guide/install-apps/nix/micro/#micro","text":"In this example we will install Micro - a terminal-based text editor that aims to be easy to use and intuitive, while also taking advantage of the full capabilities of modern terminals. It comes as one single, batteries-included, static binary with no dependencies, and you can download and use it right now. Micro is a terminal-based application without a graphical user interface. Info Micro can be installed in any workspace. We will use Codeserver workspace v.4.0 in this example.","title":"Micro"},{"location":"user-guide/install-apps/nix/micro/#install","text":"To install Micro with Nix, execute the next command $ nix-env -iA nixpkgs.micro installing 'micro-2.0.11' ... copying path '/nix/store/6f1vr3ar1rrz4dkbfsyprns33z6bf635-micro-2.0.11' from 'https://cache.nixos.org'... building '/nix/store/ziffm6mfmqbbfq5ss7cb7ms2lr9ic92f-user-environment.drv'...","title":"Install"},{"location":"user-guide/install-apps/nix/micro/#explore","text":"Let's clone Micro own repository and edit some of the files in it $ git clone https://github.com/zyedidia/micro Cloning into 'micro'... remote: Enumerating objects: 18041, done. remote: Counting objects: 100% (9/9), done. remote: Compressing objects: 100% (9/9), done. remote: Total 18041 (delta 2), reused 3 (delta 0), pack-reused 18032 Receiving objects: 100% (18041/18041), 12.26 MiB | 1.42 MiB/s, done. Resolving deltas: 100% (12284/12284), done. Go to the cloned directory, and use Micro to edit file snapcraft.yaml $ cd micro 08:01:32 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">~p/micro</font> on <font color=\"#BC94B7\">\u21e1master</font> <font color=\"#98E242\">\u279c</font> $ micro snapcraft.yaml","title":"Explore"},{"location":"user-guide/install-apps/nix/micro/#alias","text":"It is not very convennient to type the whole word \"micro\" every time we want to use it. let's create a single-character alias to open files with Micro: on the workspace UI go to the \"Admin\" tab, open \"Workspace Settings\" and go to \"Aliases\". select \"ADD NEW\", enter m as short name, and micro as command. Click \"Save\". open a new terminal window, go to the cloned repository folder again, and use m (instead of micro ) to open the same file. $ cd micro 08:01:32 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">~p/micro</font> on <font color=\"#BC94B7\">\u21e1master</font> <font color=\"#98E242\">\u279c</font> $ m snapcraft.yaml Now we can quicly open and edit any file with a single-character command m .","title":"Alias"},{"location":"user-guide/install-apps/nodejs/candidates/","text":"https://github.com/sindresorhus/awesome-nodejs https://docs.hedgedoc.org/ https://github.com/sindresorhus/gh-home https://github.com/retejs/rete https://github.com/AlexSciFier/neonlink#installation https://bit.dev/docs/quick-start https://github.com/BuilderIO/builder https://github.com/elementor/elementor https://github.com/Kovah/LinkAce https://truecharts.org/charts/description_list","title":"Candidates"},{"location":"user-guide/install-apps/nodejs/candidates/#httpstruechartsorgchartsdescription_list","text":"","title":"https://truecharts.org/charts/description_list"},{"location":"user-guide/install-apps/nodejs/convert2svg/","text":"Convert2Svg In this example we will set up Convert2Svg - web app which converts multi-colored images to svg files We will create isolated node environment for Convert2Svg, add Convert2Svg to the list of workspace startup services and add Convert2Svg tab to the workspace UI. Install Open workspace terminal, clone Convert2Svg git repository and enter it: $ git clone https://github.com/wwebdev/convert2svg.git /home/abc/apps/convert2svg Cloning into '/home/abc/apps/convert2svg' ... remote: Enumerating objects: 373 , done . remote: Counting objects: 100 % ( 18 /18 ) , done . remote: Compressing objects: 100 % ( 9 /9 ) , done . remote: Total 373 ( delta 13 ) , reused 9 ( delta 9 ) , pack-reused 355 Receiving objects: 100 % ( 373 /373 ) , 906 .88 KiB | 2 .79 MiB/s, done . Resolving deltas: 100 % ( 167 /167 ) , done . $ cd /home/abc/apps/convert2svg with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >/home/abc/apps/convert2svg</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create node enviroment and activate it. We use node 14.19.0, you might need to check the required node version at the time of installation: $ nodeenv --node=14.19.0 env && . env/bin/activate * Install prebuilt node (14.19.0) ..... done. (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/convert2svg</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v14.19.0</font> <font color=\"#98E242\">\u279c</font> Install dependencies: $ npm i added 1057 packages from 453 contributors and audited 1128 packages in 75.61s Run Start Convert2Svg: $ npm run dev [ <font color=\"#00A7AA\">wait</font> ] compiling ... [ <font color=\"#5EA702\">ready</font> ] compiled successfully - ready on http://localhost:3000 Convert2Svg is running on port 3000. Let's start port tunneling which would forward traffic to port 8026. Open another workspace termianl window, and execute $ socat tcp-listen:8026,reuseaddr,fork tcp:localhost:3000 _ Now we can use shorcut \"My app on port 8026\" from the \"My apps\" tab to open Convert2Svg Add to workspace We can use Convert2Svg now. But it was started from the terminal. As soon as we close the terminal, Convert2Svg process will terminalte. It is inconvenient to start Convert2Svg via terminal command (together with socat) every time we want to use it. It would be more convenient if we didn't have to start Convert2Svg from the terminal each time. Convert2Svg should start automatically with all other workspace applications every time we start the workspace. Let's add Convert2Svg as a permanent workspace application: Open \"Admin\" tab oo the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command cd /home/abc/apps/convert2svg ; . env/bin/activate ; npm run dev This command consists of several parts: 1) go to the Convert2Svg repo, 2) activate node environment, 3) start Convert2Svg Give it any name you want Click \"Save\" we also need to create service traffic tunneling from port 3000 to another port Open \"Admin\" tab of the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command socat tcp-listen:8033,reuseaddr,fork tcp:localhost:3000 Warning This example relies on port 8033 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. Give it any name you want Click \"Save\" Restart workspace to apply changes. Create UI tab Let's add convert2svg shortcut tab to the workspace \"Home\" page. Shortcut tab has title, description and image. Use filebrowser or IDE to upload any image you want into the workspace. You can choose whatever you like, one option - is to create a printscreen of the convert2svg app itself. After you upload the image to the workspace Go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8033 In the file picker find your image. Leave field \"path\" blank and click \"Create\" Now we have convert2svg tab on the Home page Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"Convert2svg"},{"location":"user-guide/install-apps/nodejs/convert2svg/#convert2svg","text":"In this example we will set up Convert2Svg - web app which converts multi-colored images to svg files We will create isolated node environment for Convert2Svg, add Convert2Svg to the list of workspace startup services and add Convert2Svg tab to the workspace UI.","title":"Convert2Svg"},{"location":"user-guide/install-apps/nodejs/convert2svg/#install","text":"Open workspace terminal, clone Convert2Svg git repository and enter it: $ git clone https://github.com/wwebdev/convert2svg.git /home/abc/apps/convert2svg Cloning into '/home/abc/apps/convert2svg' ... remote: Enumerating objects: 373 , done . remote: Counting objects: 100 % ( 18 /18 ) , done . remote: Compressing objects: 100 % ( 9 /9 ) , done . remote: Total 373 ( delta 13 ) , reused 9 ( delta 9 ) , pack-reused 355 Receiving objects: 100 % ( 373 /373 ) , 906 .88 KiB | 2 .79 MiB/s, done . Resolving deltas: 100 % ( 167 /167 ) , done . $ cd /home/abc/apps/convert2svg with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >/home/abc/apps/convert2svg</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create node enviroment and activate it. We use node 14.19.0, you might need to check the required node version at the time of installation: $ nodeenv --node=14.19.0 env && . env/bin/activate * Install prebuilt node (14.19.0) ..... done. (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/convert2svg</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v14.19.0</font> <font color=\"#98E242\">\u279c</font> Install dependencies: $ npm i added 1057 packages from 453 contributors and audited 1128 packages in 75.61s","title":"Install"},{"location":"user-guide/install-apps/nodejs/convert2svg/#run","text":"Start Convert2Svg: $ npm run dev [ <font color=\"#00A7AA\">wait</font> ] compiling ... [ <font color=\"#5EA702\">ready</font> ] compiled successfully - ready on http://localhost:3000 Convert2Svg is running on port 3000. Let's start port tunneling which would forward traffic to port 8026. Open another workspace termianl window, and execute $ socat tcp-listen:8026,reuseaddr,fork tcp:localhost:3000 _ Now we can use shorcut \"My app on port 8026\" from the \"My apps\" tab to open Convert2Svg","title":"Run"},{"location":"user-guide/install-apps/nodejs/convert2svg/#add-to-workspace","text":"We can use Convert2Svg now. But it was started from the terminal. As soon as we close the terminal, Convert2Svg process will terminalte. It is inconvenient to start Convert2Svg via terminal command (together with socat) every time we want to use it. It would be more convenient if we didn't have to start Convert2Svg from the terminal each time. Convert2Svg should start automatically with all other workspace applications every time we start the workspace. Let's add Convert2Svg as a permanent workspace application: Open \"Admin\" tab oo the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command cd /home/abc/apps/convert2svg ; . env/bin/activate ; npm run dev This command consists of several parts: 1) go to the Convert2Svg repo, 2) activate node environment, 3) start Convert2Svg Give it any name you want Click \"Save\" we also need to create service traffic tunneling from port 3000 to another port Open \"Admin\" tab of the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command socat tcp-listen:8033,reuseaddr,fork tcp:localhost:3000 Warning This example relies on port 8033 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. Give it any name you want Click \"Save\" Restart workspace to apply changes.","title":"Add to workspace"},{"location":"user-guide/install-apps/nodejs/convert2svg/#create-ui-tab","text":"Let's add convert2svg shortcut tab to the workspace \"Home\" page. Shortcut tab has title, description and image. Use filebrowser or IDE to upload any image you want into the workspace. You can choose whatever you like, one option - is to create a printscreen of the convert2svg app itself. After you upload the image to the workspace Go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8033 In the file picker find your image. Leave field \"path\" blank and click \"Create\" Now we have convert2svg tab on the Home page Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"Create UI tab"},{"location":"user-guide/install-apps/nodejs/csv-editor/","text":"CSV Editor In this example we will set up csv-editor which allows to change CSV in spreadsheet view in simple way. Install Open workspace terminal, clone Csv-editor git repository version 0.3.0: $ git clone https://github.com/LemonUnit/csv-editor-online.git /home/abc/apps/csv-editor Cloning into '/home/abc/apps/csv-editor' ... remote: Enumerating objects: 282 , done . remote: Counting objects: 100 % ( 20 /20 ) , done . remote: Compressing objects: 100 % ( 14 /14 ) , done . remote: Total 282 ( delta 6 ) , reused 20 ( delta 6 ) , pack-reused 262 Receiving objects: 100 % ( 282 /282 ) , 3 .05 MiB | 11 .72 MiB/s, done . Resolving deltas: 100 % ( 145 /145 ) , done . Go to the repo we have just cloned: $ cd /home/abc/apps/csv-editor with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >/home/abc/apps/csv-editor</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create node enviroment and activate it: $ nodeenv --node=12.7.0 env && . env/bin/activate * Install prebuilt node (12.7.0) ..... done. (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/csv-editor</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v12.7.0</font> <font color=\"#98E242\">\u279c</font> Install yarn: $ npm install -g yarn + yarn@1.22.19 added 1 package in 1.537s Install dependencies: $ yarn install [4/4] Building fresh packages... Done in 71.73s. Build the app: $ yarn run build The project was built assuming it is hosted at <font color=\"#5EA702\">/csv-editor-online/</font>. You can control this with the <font color=\"#5EA702\">homepage</font> field in your <font color=\"#00A7AA\">package.json</font>. The <font color=\"#00A7AA\">build</font> folder is ready to be deployed. To publish it at <font color=\"#5EA702\">http://lemonunit.github.io/csv-editor-online</font>, run: <font color=\"#00A7AA\">yarn</font> run deploy Find out more about deployment here: <font color=\"#CFAE00\">https://bit.ly/CRA-deploy</font> Done in 54.30s. Run start the server: $ yarn run start The <font color=\"#00A7AA\">Starting the development server...</font> Csv-editor is running on port 3000. Let's tunnel it to the port 8026: $ socat tcp-listen:8026,reuseaddr,fork tcp:localhost:3000 <font color=\"#646562\">_</font> Now you can open Csv-editor using tab \"My App on port 8026\": Add to workspace We can work with Csv-editor now, but as soon as we close the terminal, Csv-editor will stop too. It would be much more convenient if we didn't need to start Csv-editor from the terminal each time. Let's add Csv-editor to the workspace list of services, so that Csv-editor starts automatically. Go to the \"Admin\" tab, open \"Workspace Settings\" and go to \"Apps & Services\". Here we can add new applications to the workspace. To do this we need to provide the command that sarts an application or service, and give this service a name. Let's first create an entry for the Csv-editor. Select \"START NEW\" from the picklist, enter any name and paste this command cd /home/abc/apps/csv-editor ; . env/bin/activate ; yarn start This commad will start Csv-editor. It consist of 3 sub-commands, separated by semicolon: go to Csv-editor folder, activate environment and start application. Let's also start the port tunneling, which will map Csv-editor's port 3000 to the port 8032. The latter is in the exposed range, hence it can be accessed. Warning This example relies on port 8032 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. Select \"START NEW\" from the picklist, enter any name and paste this command socat tcp-listen:8032,reuseaddr,fork tcp:localhost:3000 Please restart the workspace for new applications to start. Update UI Finally, let's add Csv-editor shortcut to the workspace UI. This will allow us to open Csv-editor directly from the worspace UI page. Shortcut has title, description and image. Use filebrowser or IDE to upload any image into the workspace. You can choose whatever you like, one option - is to create a printscreen of the Csv-editor app itself. After you upload the image to the workspace, go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8032. Leave field \"path\" blank. Then select your image. Now we have Csv-editor tab on the Home page of the workspace. Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"Csv-editor"},{"location":"user-guide/install-apps/nodejs/csv-editor/#csv-editor","text":"In this example we will set up csv-editor which allows to change CSV in spreadsheet view in simple way.","title":"CSV Editor"},{"location":"user-guide/install-apps/nodejs/csv-editor/#install","text":"Open workspace terminal, clone Csv-editor git repository version 0.3.0: $ git clone https://github.com/LemonUnit/csv-editor-online.git /home/abc/apps/csv-editor Cloning into '/home/abc/apps/csv-editor' ... remote: Enumerating objects: 282 , done . remote: Counting objects: 100 % ( 20 /20 ) , done . remote: Compressing objects: 100 % ( 14 /14 ) , done . remote: Total 282 ( delta 6 ) , reused 20 ( delta 6 ) , pack-reused 262 Receiving objects: 100 % ( 282 /282 ) , 3 .05 MiB | 11 .72 MiB/s, done . Resolving deltas: 100 % ( 145 /145 ) , done . Go to the repo we have just cloned: $ cd /home/abc/apps/csv-editor with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >/home/abc/apps/csv-editor</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create node enviroment and activate it: $ nodeenv --node=12.7.0 env && . env/bin/activate * Install prebuilt node (12.7.0) ..... done. (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/csv-editor</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v12.7.0</font> <font color=\"#98E242\">\u279c</font> Install yarn: $ npm install -g yarn + yarn@1.22.19 added 1 package in 1.537s Install dependencies: $ yarn install [4/4] Building fresh packages... Done in 71.73s. Build the app: $ yarn run build The project was built assuming it is hosted at <font color=\"#5EA702\">/csv-editor-online/</font>. You can control this with the <font color=\"#5EA702\">homepage</font> field in your <font color=\"#00A7AA\">package.json</font>. The <font color=\"#00A7AA\">build</font> folder is ready to be deployed. To publish it at <font color=\"#5EA702\">http://lemonunit.github.io/csv-editor-online</font>, run: <font color=\"#00A7AA\">yarn</font> run deploy Find out more about deployment here: <font color=\"#CFAE00\">https://bit.ly/CRA-deploy</font> Done in 54.30s.","title":"Install"},{"location":"user-guide/install-apps/nodejs/csv-editor/#run","text":"start the server: $ yarn run start The <font color=\"#00A7AA\">Starting the development server...</font> Csv-editor is running on port 3000. Let's tunnel it to the port 8026: $ socat tcp-listen:8026,reuseaddr,fork tcp:localhost:3000 <font color=\"#646562\">_</font> Now you can open Csv-editor using tab \"My App on port 8026\":","title":"Run"},{"location":"user-guide/install-apps/nodejs/csv-editor/#add-to-workspace","text":"We can work with Csv-editor now, but as soon as we close the terminal, Csv-editor will stop too. It would be much more convenient if we didn't need to start Csv-editor from the terminal each time. Let's add Csv-editor to the workspace list of services, so that Csv-editor starts automatically. Go to the \"Admin\" tab, open \"Workspace Settings\" and go to \"Apps & Services\". Here we can add new applications to the workspace. To do this we need to provide the command that sarts an application or service, and give this service a name. Let's first create an entry for the Csv-editor. Select \"START NEW\" from the picklist, enter any name and paste this command cd /home/abc/apps/csv-editor ; . env/bin/activate ; yarn start This commad will start Csv-editor. It consist of 3 sub-commands, separated by semicolon: go to Csv-editor folder, activate environment and start application. Let's also start the port tunneling, which will map Csv-editor's port 3000 to the port 8032. The latter is in the exposed range, hence it can be accessed. Warning This example relies on port 8032 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. Select \"START NEW\" from the picklist, enter any name and paste this command socat tcp-listen:8032,reuseaddr,fork tcp:localhost:3000 Please restart the workspace for new applications to start.","title":"Add to workspace"},{"location":"user-guide/install-apps/nodejs/csv-editor/#update-ui","text":"Finally, let's add Csv-editor shortcut to the workspace UI. This will allow us to open Csv-editor directly from the worspace UI page. Shortcut has title, description and image. Use filebrowser or IDE to upload any image into the workspace. You can choose whatever you like, one option - is to create a printscreen of the Csv-editor app itself. After you upload the image to the workspace, go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8032. Leave field \"path\" blank. Then select your image. Now we have Csv-editor tab on the Home page of the workspace. Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"Update UI"},{"location":"user-guide/install-apps/nodejs/install/","text":"Node.js GitHub and NPM offer an extensive collection of applications, including both command-line interface (CLI) tools and those with browser-based user interfaces. Adding Node.js applications to Alnoda workspaces is relatively straightforward. Nodeenv To utilize Node.js applications in Alnoda workspaces, the appropriate version of Node.js with npm or yarn must be installed. Due to the different version requirements of various applications, each should be installed in its own isolated environment. Alnoda workspaces are equipped with nodeenv by default. Nodeenv simplifies the process by enabling the creation of a localized version of Node.js, npm or yarn within a distinct folder. Create virtual environment with a specific version of Node.js: <font color=\"#5EA702\">nodeenv</font> --node=16.16.0 env Activate virtual environment: . env/bin/activate npm Once the necessary Node.js version is set up in an isolated local environment, we can proceed to install the application. The simplest way is installing applications directly from the NPM. Installing applications from NPM is easier. For example install the express-generator : <font color=\"#5EA702\">npm</font> install -g express-generator From source You can also clone remote Git repository, followed by installing the dependencies and building it. For example, let's install a markdown editor called \"StackEdit\" from a Git repository. First restart terminal to deactivate any nodeenv environment, and clone the \"StackEdit\" repository: <font color=\"#5EA702\">git</font> clone https://github.com/benweet/stackedit.git /home/abc/apps/stackedit Navigate into the cloned repository's directory and install node environment with the specific Node.js version: <font color=\"#5EA702\">cd</font> stackedit <font color=\"#5EA702\">cd</font> /home/abc/apps/stackedit && <font color=\"#5EA702\">nodeenv</font> --node=12.13.0 env && . env/bin/activate Install the npm dependencies: <font color=\"#5EA702\">npm</font> install Once the dependencies are installed, you can start the application with: <font color=\"#5EA702\">npm</font> start The application will be served on port 8080 (at the time of writing this doc). Port 8080 is not exposed by the workspace and we need to forward it to the exposed port <font color=\"#5EA702\">socat</font> tcp-listen:8026,reuseaddr,fork tcp:localhost:8080 Now you can open StackEdit Box from the tab \"My App on port 8026\" Tip Explore this document further for additional examples of installing Node.js applications","title":"Info"},{"location":"user-guide/install-apps/nodejs/install/#nodejs","text":"GitHub and NPM offer an extensive collection of applications, including both command-line interface (CLI) tools and those with browser-based user interfaces. Adding Node.js applications to Alnoda workspaces is relatively straightforward.","title":"Node.js"},{"location":"user-guide/install-apps/nodejs/install/#nodeenv","text":"To utilize Node.js applications in Alnoda workspaces, the appropriate version of Node.js with npm or yarn must be installed. Due to the different version requirements of various applications, each should be installed in its own isolated environment. Alnoda workspaces are equipped with nodeenv by default. Nodeenv simplifies the process by enabling the creation of a localized version of Node.js, npm or yarn within a distinct folder. Create virtual environment with a specific version of Node.js: <font color=\"#5EA702\">nodeenv</font> --node=16.16.0 env Activate virtual environment: . env/bin/activate","title":"Nodeenv"},{"location":"user-guide/install-apps/nodejs/install/#npm","text":"Once the necessary Node.js version is set up in an isolated local environment, we can proceed to install the application. The simplest way is installing applications directly from the NPM. Installing applications from NPM is easier. For example install the express-generator : <font color=\"#5EA702\">npm</font> install -g express-generator","title":"npm"},{"location":"user-guide/install-apps/nodejs/install/#from-source","text":"You can also clone remote Git repository, followed by installing the dependencies and building it. For example, let's install a markdown editor called \"StackEdit\" from a Git repository. First restart terminal to deactivate any nodeenv environment, and clone the \"StackEdit\" repository: <font color=\"#5EA702\">git</font> clone https://github.com/benweet/stackedit.git /home/abc/apps/stackedit Navigate into the cloned repository's directory and install node environment with the specific Node.js version: <font color=\"#5EA702\">cd</font> stackedit <font color=\"#5EA702\">cd</font> /home/abc/apps/stackedit && <font color=\"#5EA702\">nodeenv</font> --node=12.13.0 env && . env/bin/activate Install the npm dependencies: <font color=\"#5EA702\">npm</font> install Once the dependencies are installed, you can start the application with: <font color=\"#5EA702\">npm</font> start The application will be served on port 8080 (at the time of writing this doc). Port 8080 is not exposed by the workspace and we need to forward it to the exposed port <font color=\"#5EA702\">socat</font> tcp-listen:8026,reuseaddr,fork tcp:localhost:8080 Now you can open StackEdit Box from the tab \"My App on port 8026\" Tip Explore this document further for additional examples of installing Node.js applications","title":"From source"},{"location":"user-guide/install-apps/nodejs/limus/","text":"Limus In this example we will set up Limus in the workspace. Limus makes your screenshot/image more professional by rotating, adding shadow and more. We will create isolated node environment for Limus and its dependencies. Then we will start it in a permanent way, and add Limus tab shortcut to the workspace UI. Install Open workspace terminal, clone Limus git repository and enter it: $ git clone https://github.com/ZeroX-DG/limus /home/abc/apps/limus Cloning into '/home/abc/apps/limus' ... $ cd /home/abc/apps/limus with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >/home/abc/apps/limus</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create node enviroment and activate it: $ nodeenv --node=12.18.3 env && . env/bin/activate * Install prebuilt node (12.18.3) ..... done. (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/limus</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v12.18.3</font> <font color=\"#98E242\">\u279c</font> Install dependencies: $ npm install ... added 962 packages from 702 contributors and audited 963 packages in 26.625s Build the app: $ npm run build \u2728 <font color=\"#99E343\"><b>Built in 12.35s.</b></font> Install http-server: $ npm install http-server -g + http-server@14.1.1 added 39 packages from 43 contributors in 4.281s Run Deploy the dist/ folder just like a static web page using http-server: $ cd dist && http-server -p 8026 <font color=\"#C4A502\">Available on:</font> http://127.0.0.1:<font color=\"#99E343\">8026</font> http://172.17.0.3:<font color=\"#99E343\">8026</font> Hit CTRL-C to stop the server Now you can open Limus using tab \"My App on port 8026\": Add to workspace We can use Limus. But it was started from the terminal. As soon as we close the terminal, Limus process will terminalte. It is inconvenient to start Limus via terminal command (together with socat) every time we want to use it. It would be better if Limus starts automatically with all other workspace applications every time we start the workspace. Let's add Limus as a permanent workspace application: Open \"Admin\" tab on the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command cd /home/abc/apps/limus ; . env/bin/activate ; cd dist ; http-server -p 8032 This command consists of several parts: 1) go to the Limus repo, 2) activate node environment, 3) serve Limus on port 8032 Warning This example relies on port 8032 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. Give it any name you want Click \"Save\" Restart workspace to apply changes. Create UI tab Let's add Limus shortcut tab to the workspace \"Home\" page. Shortcut tab has title, description and image. Use filebrowser or IDE to upload any image you want into the workspace. You can choose whatever you like, one option - is to create a printscreen of the Limus app itself. After you upload the image to the workspace, make the following actions: Go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8032 In the file picker find your image. Leave field \"path\" blank and click \"Create\" Now we have Limus tab on the Home page Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"Limus"},{"location":"user-guide/install-apps/nodejs/limus/#limus","text":"In this example we will set up Limus in the workspace. Limus makes your screenshot/image more professional by rotating, adding shadow and more. We will create isolated node environment for Limus and its dependencies. Then we will start it in a permanent way, and add Limus tab shortcut to the workspace UI.","title":"Limus"},{"location":"user-guide/install-apps/nodejs/limus/#install","text":"Open workspace terminal, clone Limus git repository and enter it: $ git clone https://github.com/ZeroX-DG/limus /home/abc/apps/limus Cloning into '/home/abc/apps/limus' ... $ cd /home/abc/apps/limus with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >/home/abc/apps/limus</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create node enviroment and activate it: $ nodeenv --node=12.18.3 env && . env/bin/activate * Install prebuilt node (12.18.3) ..... done. (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/limus</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v12.18.3</font> <font color=\"#98E242\">\u279c</font> Install dependencies: $ npm install ... added 962 packages from 702 contributors and audited 963 packages in 26.625s Build the app: $ npm run build \u2728 <font color=\"#99E343\"><b>Built in 12.35s.</b></font> Install http-server: $ npm install http-server -g + http-server@14.1.1 added 39 packages from 43 contributors in 4.281s","title":"Install"},{"location":"user-guide/install-apps/nodejs/limus/#run","text":"Deploy the dist/ folder just like a static web page using http-server: $ cd dist && http-server -p 8026 <font color=\"#C4A502\">Available on:</font> http://127.0.0.1:<font color=\"#99E343\">8026</font> http://172.17.0.3:<font color=\"#99E343\">8026</font> Hit CTRL-C to stop the server Now you can open Limus using tab \"My App on port 8026\":","title":"Run"},{"location":"user-guide/install-apps/nodejs/limus/#add-to-workspace","text":"We can use Limus. But it was started from the terminal. As soon as we close the terminal, Limus process will terminalte. It is inconvenient to start Limus via terminal command (together with socat) every time we want to use it. It would be better if Limus starts automatically with all other workspace applications every time we start the workspace. Let's add Limus as a permanent workspace application: Open \"Admin\" tab on the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command cd /home/abc/apps/limus ; . env/bin/activate ; cd dist ; http-server -p 8032 This command consists of several parts: 1) go to the Limus repo, 2) activate node environment, 3) serve Limus on port 8032 Warning This example relies on port 8032 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. Give it any name you want Click \"Save\" Restart workspace to apply changes.","title":"Add to workspace"},{"location":"user-guide/install-apps/nodejs/limus/#create-ui-tab","text":"Let's add Limus shortcut tab to the workspace \"Home\" page. Shortcut tab has title, description and image. Use filebrowser or IDE to upload any image you want into the workspace. You can choose whatever you like, one option - is to create a printscreen of the Limus app itself. After you upload the image to the workspace, make the following actions: Go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8032 In the file picker find your image. Leave field \"path\" blank and click \"Create\" Now we have Limus tab on the Home page Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"Create UI tab"},{"location":"user-guide/install-apps/nodejs/neumorphism/","text":"Neumorphism In this example we are going to add Neumorphism - a s CSS code generator for a popular design trend called Neumorphism/Soft UI. We will create isolated node environment for Neumorphism and its dependencies. Then we will start it in a permanent way, and add Neumorphism tab shortcut to the workspace UI. Install Open workspace terminal, clone Neumorphism git repository and navigate into it: $ git clone https://github.com/adamgiebl/neumorphism.git /home/abc/apps/neumorphism Cloning into '/home/abc/apps/neumorphism' ... remote: Enumerating objects: 1212 , done . remote: Counting objects: 100 % ( 125 /125 ) , done . remote: Compressing objects: 100 % ( 42 /42 ) , done . remote: Total 1212 ( delta 86 ) , reused 109 ( delta 83 ) , pack-reused 1087 Receiving objects: 100 % ( 1212 /1212 ) , 1 .56 MiB | 289 .00 KiB/s, done . Resolving deltas: 100 % ( 798 /798 ) , done . $ cd /home/abc/apps/neumorphism with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >/home/abc/apps/neumorphism</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create node enviroment and activate it: $ nodeenv --node=18.9.0 env && . env/bin/activate * Install prebuilt node (18.9.0) ..... done. (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/neumorphism</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v18.9.0</font> <font color=\"#98E242\">\u279c</font> Install dependencies: $ npm install ... added 1685 packages, and audited 1686 packages in 1m Run Start Neumorphism application: $ npm start ... Search for the keywords to learn more about each warning. To ignore, add // eslint-disable-next-line to the line before. The application has started and listens to the port 3000. Workspace exposes port range 8020-8040, lets forward port 3000 to any of the free ports in the workspace port range. You can find free port on the \"About\" tab in the workspace UI page. Forward port 8026 to port 3000. Ope another workspace terminal and execute: $ socat tcp-listen:8026,reuseaddr,fork tcp:localhost:3000 Now we can open Neumorphism using shorcut \"My app on port 8026\" from the \"My apps\" tab. Add to workspace We can use Neuromorphism now, but it was started from the terminal. As soon as we close the terminal, Neuromorphism process will terminalte. It is inconvenient to start Neuromorphism in terminal every time we want to use it (together with socat). Let's add Neuromorphism as a permanent workspace application, it will start automatically with all other workspace applications every time we start the workspace. Open \"Admin\" tab oo the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command cd /home/abc/apps/neumorphism; . env/bin/activate; npm start This command consists of 3 parts: 1) go to the Neumorphism repo, 2) activate node environment, 3) start Neumorphism Give it any name you want Click \"Save\" Now let's create service for the port tuneling as well Select \"START NEW\" from the picklist Enter the following command socat tcp-listen:8032,reuseaddr,fork tcp:localhost:3000 This time we will forward traffic from port 3000 to 8032 - one of the workspace free ports. Warning This example relies on port 8032 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. Give it any name you want Click \"Save\" Please restart workspace to apply changes. Create UI tab Let's add Neumorphism shortcut tab to the workspace \"Home\" page. Shortcut tab has title, description and image. Use filebrowser or IDE to upload any image you want into the workspace. You can choose whatever you like, one option - is to create a printscreen of the Neumorphism app itself. After you upload the image to the workspace, follow the next steps: Go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8032 - the port we used to forward traffic from port 3000 In the file picker find your image. Leave field \"path\" blank and click \"Create\" Now we have Neumorphism tab on the Home page: Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"Neumorphism"},{"location":"user-guide/install-apps/nodejs/neumorphism/#neumorphism","text":"In this example we are going to add Neumorphism - a s CSS code generator for a popular design trend called Neumorphism/Soft UI. We will create isolated node environment for Neumorphism and its dependencies. Then we will start it in a permanent way, and add Neumorphism tab shortcut to the workspace UI.","title":"Neumorphism"},{"location":"user-guide/install-apps/nodejs/neumorphism/#install","text":"Open workspace terminal, clone Neumorphism git repository and navigate into it: $ git clone https://github.com/adamgiebl/neumorphism.git /home/abc/apps/neumorphism Cloning into '/home/abc/apps/neumorphism' ... remote: Enumerating objects: 1212 , done . remote: Counting objects: 100 % ( 125 /125 ) , done . remote: Compressing objects: 100 % ( 42 /42 ) , done . remote: Total 1212 ( delta 86 ) , reused 109 ( delta 83 ) , pack-reused 1087 Receiving objects: 100 % ( 1212 /1212 ) , 1 .56 MiB | 289 .00 KiB/s, done . Resolving deltas: 100 % ( 798 /798 ) , done . $ cd /home/abc/apps/neumorphism with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >/home/abc/apps/neumorphism</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create node enviroment and activate it: $ nodeenv --node=18.9.0 env && . env/bin/activate * Install prebuilt node (18.9.0) ..... done. (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/neumorphism</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v18.9.0</font> <font color=\"#98E242\">\u279c</font> Install dependencies: $ npm install ... added 1685 packages, and audited 1686 packages in 1m","title":"Install"},{"location":"user-guide/install-apps/nodejs/neumorphism/#run","text":"Start Neumorphism application: $ npm start ... Search for the keywords to learn more about each warning. To ignore, add // eslint-disable-next-line to the line before. The application has started and listens to the port 3000. Workspace exposes port range 8020-8040, lets forward port 3000 to any of the free ports in the workspace port range. You can find free port on the \"About\" tab in the workspace UI page. Forward port 8026 to port 3000. Ope another workspace terminal and execute: $ socat tcp-listen:8026,reuseaddr,fork tcp:localhost:3000 Now we can open Neumorphism using shorcut \"My app on port 8026\" from the \"My apps\" tab.","title":"Run"},{"location":"user-guide/install-apps/nodejs/neumorphism/#add-to-workspace","text":"We can use Neuromorphism now, but it was started from the terminal. As soon as we close the terminal, Neuromorphism process will terminalte. It is inconvenient to start Neuromorphism in terminal every time we want to use it (together with socat). Let's add Neuromorphism as a permanent workspace application, it will start automatically with all other workspace applications every time we start the workspace. Open \"Admin\" tab oo the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command cd /home/abc/apps/neumorphism; . env/bin/activate; npm start This command consists of 3 parts: 1) go to the Neumorphism repo, 2) activate node environment, 3) start Neumorphism Give it any name you want Click \"Save\" Now let's create service for the port tuneling as well Select \"START NEW\" from the picklist Enter the following command socat tcp-listen:8032,reuseaddr,fork tcp:localhost:3000 This time we will forward traffic from port 3000 to 8032 - one of the workspace free ports. Warning This example relies on port 8032 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. Give it any name you want Click \"Save\" Please restart workspace to apply changes.","title":"Add to workspace"},{"location":"user-guide/install-apps/nodejs/neumorphism/#create-ui-tab","text":"Let's add Neumorphism shortcut tab to the workspace \"Home\" page. Shortcut tab has title, description and image. Use filebrowser or IDE to upload any image you want into the workspace. You can choose whatever you like, one option - is to create a printscreen of the Neumorphism app itself. After you upload the image to the workspace, follow the next steps: Go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8032 - the port we used to forward traffic from port 3000 In the file picker find your image. Leave field \"path\" blank and click \"Create\" Now we have Neumorphism tab on the Home page: Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"Create UI tab"},{"location":"user-guide/install-apps/nodejs/pm2-webui/","text":"Pm2-webui - opensource Alternative to PM2 Plus Intro In this example we will set up pm2-webui in the workspace. PM2 WebUI - is a minimalistic app manager and log viewer. Attention PM2 WebUI can be installed in any workspace. We will use Codeserver workspace v.4.0 in this example. Note We will create isolated node environment for PM2 WebUI and its dependencies. Then we will start it in a permanent way, and add PM2 WebUI tab shortcut to the workspace UI. Install Open workspace terminal, clone PM2 WebUI git repository and enter it $ git clone https://github.com/suryamodulus/pm2-webui /home/abc/apps/pm2-webui Cloning into '/home/abc/apps/pm2-webui' ... $ cd /home/abc/apps/pm2-webui with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >/home/abc/apps/pm2-webui</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create node enviroment and activate it (you can find required version in package.json file) $ nodeenv --node=17.0.0 env && . env/bin/activate * Install prebuilt node (17.0.0) ..... done. (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/pm2-webui</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v17.0.0</font> <font color=\"#98E242\">\u279c</font> Install dependencies $ npm install ... added 407 packages, and audited 408 packages in 20s Configure $ cp env.example .env (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/pm2-webui</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v17.0.0</font> <font color=\"#98E242\">\u279c</font> $ npm run setup-admin-user <font color=\"#5EA702\">\u2714</font> <b>App Username</b> \u2026 admin <font color=\"#5EA702\">\u2714</font> <b>App Password</b> \u2026 *********** <font color=\"#5EA702\">\u2714</font> <b>Confirm to create/update admin user ?</b> \u2026 yes Run Start PM2 WebUI $ npm start > pm2-webui@1.0.0 start > node . Application started at http://127.0.0.1:4343 Application is running on port 4343. Let's tunnel it to the port 8031 Open another terminal window, and execute $ socat tcp-listen:8031,reuseaddr,fork tcp:localhost:4343 <font color=\"#646562\">_</font> Now you can open PM2 WebUI from the tab \"My App on port 8031\" Add to workspace PM2 WebUI is up and running. But it started from terminal. As soon as we close the terminal, PM2 WebUI will terminalte. Let's create a permanent workspace service for PM2 WebUI: Open \"Admin\" tab of the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command cd /home/abc/apps/pm2-webui ; . env/bin/activate ; npm start This command consists of several parts: 1) go to the PM2 WebUI repo, 2) activate node environment, 3) serve PM2 WebUI on port 8032 Give it any name you want Click \"Save\" we also need to create service for socat that tunnels port 4343 to another port Open \"Admin\" tab of the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command socat tcp-listen:8032,reuseaddr,fork tcp:localhost:4343 Give it any name you want Click \"Save\" Restart workspace to apply changes. Create UI tab Let's add shortcut tab for PM2 WebUI on the \"Home\" page. Shortcut tab has title, description and image. Use filebrowser or IDE to upload any image you want into the workspace. You can choose whatever you like, one option - is to create a printscreen of the PM2 WebUI app itself. After you upload the image to the workspace Go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8032 In the file picker find your image. Leave field \"path\" blank and click \"Create\" Now we have PM2 WebUI tab on the Home page Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"Pm2-webui  - opensource Alternative to PM2 Plus"},{"location":"user-guide/install-apps/nodejs/pm2-webui/#pm2-webui-opensource-alternative-to-pm2-plus","text":"","title":"Pm2-webui  - opensource Alternative to PM2 Plus"},{"location":"user-guide/install-apps/nodejs/pm2-webui/#intro","text":"In this example we will set up pm2-webui in the workspace. PM2 WebUI - is a minimalistic app manager and log viewer. Attention PM2 WebUI can be installed in any workspace. We will use Codeserver workspace v.4.0 in this example. Note We will create isolated node environment for PM2 WebUI and its dependencies. Then we will start it in a permanent way, and add PM2 WebUI tab shortcut to the workspace UI.","title":"Intro"},{"location":"user-guide/install-apps/nodejs/pm2-webui/#install","text":"Open workspace terminal, clone PM2 WebUI git repository and enter it $ git clone https://github.com/suryamodulus/pm2-webui /home/abc/apps/pm2-webui Cloning into '/home/abc/apps/pm2-webui' ... $ cd /home/abc/apps/pm2-webui with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >/home/abc/apps/pm2-webui</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create node enviroment and activate it (you can find required version in package.json file) $ nodeenv --node=17.0.0 env && . env/bin/activate * Install prebuilt node (17.0.0) ..... done. (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/pm2-webui</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v17.0.0</font> <font color=\"#98E242\">\u279c</font> Install dependencies $ npm install ... added 407 packages, and audited 408 packages in 20s Configure $ cp env.example .env (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/pm2-webui</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v17.0.0</font> <font color=\"#98E242\">\u279c</font> $ npm run setup-admin-user <font color=\"#5EA702\">\u2714</font> <b>App Username</b> \u2026 admin <font color=\"#5EA702\">\u2714</font> <b>App Password</b> \u2026 *********** <font color=\"#5EA702\">\u2714</font> <b>Confirm to create/update admin user ?</b> \u2026 yes","title":"Install"},{"location":"user-guide/install-apps/nodejs/pm2-webui/#run","text":"Start PM2 WebUI $ npm start > pm2-webui@1.0.0 start > node . Application started at http://127.0.0.1:4343 Application is running on port 4343. Let's tunnel it to the port 8031 Open another terminal window, and execute $ socat tcp-listen:8031,reuseaddr,fork tcp:localhost:4343 <font color=\"#646562\">_</font> Now you can open PM2 WebUI from the tab \"My App on port 8031\"","title":"Run"},{"location":"user-guide/install-apps/nodejs/pm2-webui/#add-to-workspace","text":"PM2 WebUI is up and running. But it started from terminal. As soon as we close the terminal, PM2 WebUI will terminalte. Let's create a permanent workspace service for PM2 WebUI: Open \"Admin\" tab of the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command cd /home/abc/apps/pm2-webui ; . env/bin/activate ; npm start This command consists of several parts: 1) go to the PM2 WebUI repo, 2) activate node environment, 3) serve PM2 WebUI on port 8032 Give it any name you want Click \"Save\" we also need to create service for socat that tunnels port 4343 to another port Open \"Admin\" tab of the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command socat tcp-listen:8032,reuseaddr,fork tcp:localhost:4343 Give it any name you want Click \"Save\" Restart workspace to apply changes.","title":"Add to workspace"},{"location":"user-guide/install-apps/nodejs/pm2-webui/#create-ui-tab","text":"Let's add shortcut tab for PM2 WebUI on the \"Home\" page. Shortcut tab has title, description and image. Use filebrowser or IDE to upload any image you want into the workspace. You can choose whatever you like, one option - is to create a printscreen of the PM2 WebUI app itself. After you upload the image to the workspace Go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8032 In the file picker find your image. Leave field \"path\" blank and click \"Create\" Now we have PM2 WebUI tab on the Home page Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"Create UI tab"},{"location":"user-guide/install-apps/nodejs/snippetbox/","text":"Snippet Box In this example we will set up Snippet Box - an app for organizing your code snippets. It allows you to easily create, edit, browse and manage your snippets in various languages. With built-in Markdown support, Snippet Box makes it very easy to add notes or simple documentation to your code. We will create isolated node environment for Snippet Box and its dependencies. Then we will start it in a permanent way, and add Snippet Box tab shortcut to the workspace UI. Install Open workspace terminal, clone Snippet Box git repository and navigate into it $ git clone https://github.com/pawelmalak/snippet-box.git /home/abc/apps/snippet-box Cloning into '/home/abc/apps/snippet-box' ... $ cd /home/abc/apps/snippet-box with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/apps/snippet-box</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create node enviroment and activate it $ nodeenv --node=14.17.3 env && . env/bin/activate * Install prebuilt node (14.17.3) ..... done. (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/snippet-box</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v14.17.3</font> <font color=\"#98E242\">\u279c</font> Install dependencies $ npm run init added 2121 packages from 896 contributors and audited 2124 packages in 76.357s Build $ npm run build ... > snippet-hub@1.0.0 build:tsc /home/abc/apps/snippet-box > tsc Move resources $ mkdir public && mv ./client/build/* ./public (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/snippet-box</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v14.17.3</font> <font color=\"#98E242\">\u279c</font> Run Start snippet Box $ node build/server.js [2022-09-30 13:40:11.818 UTC+0] [INFO] db: Database connected [2022-09-30 13:40:11.889 UTC+0] [INFO] db: Found pending migrations. Executing... [2022-09-30 13:40:11.889 UTC+0] [DEV] db: Executing 00_initial.js migration [2022-09-30 13:40:11.890 UTC+0] [DEV] db: Executing 01_pinned_snippets.js migration [2022-09-30 13:40:11.891 UTC+0] [DEV] db: Executing 02_tags.js migration [2022-09-30 13:40:12.052 UTC+0] [INFO] server: Server is working on port 5000 in development mode Snippet Box is running on port 5000. Lets forward the traffic to port 8026 - this port is exposed by the workspace. Open one more terminal window, and execute $ socat tcp-listen:8026,reuseaddr,fork tcp:localhost:5000 <font color=\"#646562\">_</font> Now you can open Snippet Box from the tab \"My App on port 8026\" Add to workspace Snippet Box is currently operational, having been started from the terminal. However, if the terminal is closed, the Snippet Box application will also terminate. Let's create a permanent service for Snippet Box: Open \"Admin\" tab of the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command cd /home/abc/apps/snippet-box ; . env/bin/activate ; node build/server.js This command consists of 3 commands: 1) go to the Snippet Box repo, 2) activate node environment, 3) start Snippet Box Give it any name you want Click \"Save\" we also need to create service that tunnels port 5000 to the port 8033, which is exposed by the workspace Open \"Admin\" tab of the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command socat tcp-listen:8033,reuseaddr,fork tcp:localhost:5000 Give it any name you want Click \"Save\" Restart workspace to apply changes. Create UI tab Let's add shortcut tab for Snippet Box on the \"Home\" page. Shortcut tab has title, description and image. Use filebrowser or IDE to upload any image you want into the workspace. You can choose whatever you like, one option - is to create a printscreen of the Snippet Box app itself. After you upload the image to the workspace Go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8033 In the file picker find your image. Leave field \"path\" blank and click \"Create\" Now we have Snippet Box tab on the Home page Add tag Let's also add \"snippet box\" tag to the workspace meta information Go to the \"Features\" tab of the workspace settings and add new tag \"snippet box\" separated from other tags with comma. Click \"Save\" Now you can ope the \"About\" tab of the workspace home page and see that the new tag appeared Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"Snippet Box"},{"location":"user-guide/install-apps/nodejs/snippetbox/#snippet-box","text":"In this example we will set up Snippet Box - an app for organizing your code snippets. It allows you to easily create, edit, browse and manage your snippets in various languages. With built-in Markdown support, Snippet Box makes it very easy to add notes or simple documentation to your code. We will create isolated node environment for Snippet Box and its dependencies. Then we will start it in a permanent way, and add Snippet Box tab shortcut to the workspace UI.","title":"Snippet Box"},{"location":"user-guide/install-apps/nodejs/snippetbox/#install","text":"Open workspace terminal, clone Snippet Box git repository and navigate into it $ git clone https://github.com/pawelmalak/snippet-box.git /home/abc/apps/snippet-box Cloning into '/home/abc/apps/snippet-box' ... $ cd /home/abc/apps/snippet-box with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/apps/snippet-box</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create node enviroment and activate it $ nodeenv --node=14.17.3 env && . env/bin/activate * Install prebuilt node (14.17.3) ..... done. (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/snippet-box</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v14.17.3</font> <font color=\"#98E242\">\u279c</font> Install dependencies $ npm run init added 2121 packages from 896 contributors and audited 2124 packages in 76.357s Build $ npm run build ... > snippet-hub@1.0.0 build:tsc /home/abc/apps/snippet-box > tsc Move resources $ mkdir public && mv ./client/build/* ./public (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/snippet-box</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v14.17.3</font> <font color=\"#98E242\">\u279c</font>","title":"Install"},{"location":"user-guide/install-apps/nodejs/snippetbox/#run","text":"Start snippet Box $ node build/server.js [2022-09-30 13:40:11.818 UTC+0] [INFO] db: Database connected [2022-09-30 13:40:11.889 UTC+0] [INFO] db: Found pending migrations. Executing... [2022-09-30 13:40:11.889 UTC+0] [DEV] db: Executing 00_initial.js migration [2022-09-30 13:40:11.890 UTC+0] [DEV] db: Executing 01_pinned_snippets.js migration [2022-09-30 13:40:11.891 UTC+0] [DEV] db: Executing 02_tags.js migration [2022-09-30 13:40:12.052 UTC+0] [INFO] server: Server is working on port 5000 in development mode Snippet Box is running on port 5000. Lets forward the traffic to port 8026 - this port is exposed by the workspace. Open one more terminal window, and execute $ socat tcp-listen:8026,reuseaddr,fork tcp:localhost:5000 <font color=\"#646562\">_</font> Now you can open Snippet Box from the tab \"My App on port 8026\"","title":"Run"},{"location":"user-guide/install-apps/nodejs/snippetbox/#add-to-workspace","text":"Snippet Box is currently operational, having been started from the terminal. However, if the terminal is closed, the Snippet Box application will also terminate. Let's create a permanent service for Snippet Box: Open \"Admin\" tab of the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command cd /home/abc/apps/snippet-box ; . env/bin/activate ; node build/server.js This command consists of 3 commands: 1) go to the Snippet Box repo, 2) activate node environment, 3) start Snippet Box Give it any name you want Click \"Save\" we also need to create service that tunnels port 5000 to the port 8033, which is exposed by the workspace Open \"Admin\" tab of the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command socat tcp-listen:8033,reuseaddr,fork tcp:localhost:5000 Give it any name you want Click \"Save\" Restart workspace to apply changes.","title":"Add to workspace"},{"location":"user-guide/install-apps/nodejs/snippetbox/#create-ui-tab","text":"Let's add shortcut tab for Snippet Box on the \"Home\" page. Shortcut tab has title, description and image. Use filebrowser or IDE to upload any image you want into the workspace. You can choose whatever you like, one option - is to create a printscreen of the Snippet Box app itself. After you upload the image to the workspace Go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8033 In the file picker find your image. Leave field \"path\" blank and click \"Create\" Now we have Snippet Box tab on the Home page","title":"Create UI tab"},{"location":"user-guide/install-apps/nodejs/snippetbox/#add-tag","text":"Let's also add \"snippet box\" tag to the workspace meta information Go to the \"Features\" tab of the workspace settings and add new tag \"snippet box\" separated from other tags with comma. Click \"Save\" Now you can ope the \"About\" tab of the workspace home page and see that the new tag appeared Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"Add tag"},{"location":"user-guide/install-apps/nodejs/trilium/","text":"Trilium Notes In this example we are going to add Trilium - a hierarchical note taking application with focus on building large personal knowledge bases. We will create isolated node environment for Trilium and its dependencies. Then we will start it in a permanent way, and add Trilium card to the workspace UI. Install Let's clone the trilium git repository: $ git clone https://github.com/zadam/trilium.git ~/apps/trilium Cloning into '/home/abc/apps/trilium' ... remote: Enumerating objects: 14427 , done . remote: Counting objects: 100 % ( 1803 /1803 ) , done . remote: Compressing objects: 100 % ( 700 /700 ) , done . remote: Total 14427 ( delta 1016 ) , reused 1516 ( delta 858 ) , pack-reused 12624 Receiving objects: 100 % ( 14427 /14427 ) , 24 .42 MiB | 1 .13 MiB/s, done . Resolving deltas: 100 % ( 10079 /10079 ) , done . $ cd ~/apps/trilium with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/apps/trilium</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create node enviroment and activate it: $ nodeenv --node=16.17.0 env && . env/bin/activate * Install prebuilt node (16.17.0) ..... done. (env) 17:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">~/apps/trilium</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v16.17.0</font> <font color=\"#98E242\">\u279c</font> Installs a package and all dependsies: $ npm install added 1009 packages, and audited 1010 packages in 4m Run Before we start Trilium we need to configure the port application will be listening to and disable authentication. The Trilium configuration is in the subfolder data in the file data/config.ini . Let's open this config file with code editor, such as nano, vim or Theia, and modify two lines, set noAuthentication = true port = 8026 Now we can start Trilium $ npm run start-server Listening on port 8026 Becca (note cache) load took 16ms websocket client connected Table counts: notes: 170, note_revisions: 0, branches: 188, attributes: 247, etapi_tokens: 0 All consistency checks passed with no errors detected (took 18ms) In the workspace UI open \"My Apps\" and click \"My app on port 8026\". Trilium is up an running. Add to workspace The way we have launched Trilium is not permanent. As soon as we close the terminal session Trilium will shut down. Lets add Trilium to the workspace as a permanet application. Let's change the Trilium config again. Port 8026 is reserved for the \"My app on port 8026\", let's use another port - 8032. Warning This example relies on port 8032 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. After you changed the port to 8032 in the file data/config.ini , open \"Admin\" tab, click \"Workspace settings\" go to \"Apps & Services\" and select \"START NEW\" from the picklist. We need to enter the command that will activate the node environment, and will also start trilium. The entire command will look like this cd /home/abc/apps/trilium; . env/bin/activate; npm run start-server Use this command, enter any name you want and click \"Save\". Please restart the workspace now! Update UI Let's add Trilium card to the workspace UI. On the workspace UI open \"Admin\" tab, click \"Workspace settings\", go to \"Interface\", chose tab you want to add Trilium card to (default Home), and select \"START NEW\" from the picklist. You can provide any name, description and image for the new card. It is important though to properly enter the port that Trilium is listening to - port 8032. As soon as you hit \"Save\" button, the Trilium card will appear on the respective tab of the workspace UI page. We can use this card for quick access to Trilium. Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"Trilium"},{"location":"user-guide/install-apps/nodejs/trilium/#trilium-notes","text":"In this example we are going to add Trilium - a hierarchical note taking application with focus on building large personal knowledge bases. We will create isolated node environment for Trilium and its dependencies. Then we will start it in a permanent way, and add Trilium card to the workspace UI.","title":"Trilium Notes"},{"location":"user-guide/install-apps/nodejs/trilium/#install","text":"Let's clone the trilium git repository: $ git clone https://github.com/zadam/trilium.git ~/apps/trilium Cloning into '/home/abc/apps/trilium' ... remote: Enumerating objects: 14427 , done . remote: Counting objects: 100 % ( 1803 /1803 ) , done . remote: Compressing objects: 100 % ( 700 /700 ) , done . remote: Total 14427 ( delta 1016 ) , reused 1516 ( delta 858 ) , pack-reused 12624 Receiving objects: 100 % ( 14427 /14427 ) , 24 .42 MiB | 1 .13 MiB/s, done . Resolving deltas: 100 % ( 10079 /10079 ) , done . $ cd ~/apps/trilium with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/apps/trilium</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create node enviroment and activate it: $ nodeenv --node=16.17.0 env && . env/bin/activate * Install prebuilt node (16.17.0) ..... done. (env) 17:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">~/apps/trilium</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v16.17.0</font> <font color=\"#98E242\">\u279c</font> Installs a package and all dependsies: $ npm install added 1009 packages, and audited 1010 packages in 4m","title":"Install"},{"location":"user-guide/install-apps/nodejs/trilium/#run","text":"Before we start Trilium we need to configure the port application will be listening to and disable authentication. The Trilium configuration is in the subfolder data in the file data/config.ini . Let's open this config file with code editor, such as nano, vim or Theia, and modify two lines, set noAuthentication = true port = 8026 Now we can start Trilium $ npm run start-server Listening on port 8026 Becca (note cache) load took 16ms websocket client connected Table counts: notes: 170, note_revisions: 0, branches: 188, attributes: 247, etapi_tokens: 0 All consistency checks passed with no errors detected (took 18ms) In the workspace UI open \"My Apps\" and click \"My app on port 8026\". Trilium is up an running.","title":"Run"},{"location":"user-guide/install-apps/nodejs/trilium/#add-to-workspace","text":"The way we have launched Trilium is not permanent. As soon as we close the terminal session Trilium will shut down. Lets add Trilium to the workspace as a permanet application. Let's change the Trilium config again. Port 8026 is reserved for the \"My app on port 8026\", let's use another port - 8032. Warning This example relies on port 8032 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. After you changed the port to 8032 in the file data/config.ini , open \"Admin\" tab, click \"Workspace settings\" go to \"Apps & Services\" and select \"START NEW\" from the picklist. We need to enter the command that will activate the node environment, and will also start trilium. The entire command will look like this cd /home/abc/apps/trilium; . env/bin/activate; npm run start-server Use this command, enter any name you want and click \"Save\". Please restart the workspace now!","title":"Add to workspace"},{"location":"user-guide/install-apps/nodejs/trilium/#update-ui","text":"Let's add Trilium card to the workspace UI. On the workspace UI open \"Admin\" tab, click \"Workspace settings\", go to \"Interface\", chose tab you want to add Trilium card to (default Home), and select \"START NEW\" from the picklist. You can provide any name, description and image for the new card. It is important though to properly enter the port that Trilium is listening to - port 8032. As soon as you hit \"Save\" button, the Trilium card will appear on the respective tab of the workspace UI page. We can use this card for quick access to Trilium. Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"Update UI"},{"location":"user-guide/install-apps/nodejs/voyager/","text":"Voyager In this example we are going to add Voyager - a data exploration tool with a browser-based user interface that blends manual and automated chart specification. Voyager is a Javascript application. We will clone code repository, install dependencies and build Voyager. Requirements First thing is to install python2. Voyager has rather outdated dependencies. Luckily workspace is completely isolated, and this won't affect you main environment. Open workspace terminal and execute the next commands: $ sudo apt-get update $ sudo apt-get install -y python2 Preparing to unpack .../python2_2.7.17-2ubuntu4_amd64.deb ... Unpacking python2 ( 2 .7.17-2ubuntu4 ) ... Setting up libpython2.7-stdlib:amd64 ( 2 .7.18-1~20.04.3 ) ... Setting up python2.7 ( 2 .7.18-1~20.04.3 ) ... Setting up libpython2-stdlib:amd64 ( 2 .7.17-2ubuntu4 ) ... Setting up python2 ( 2 .7.17-2ubuntu4 ) ... Processing triggers for mime-support ( 3 .64ubuntu1 ) ... Build Now, clone Voyager GitHub repository, and go into it: $ git clone https://github.com/vega/voyager.git ~/apps/voyager Cloning into '/home/abc/apps/voyager' ... remote: Enumerating objects: 21671 , done . remote: Counting objects: 100 % ( 185 /185 ) , done . remote: Compressing objects: 100 % ( 163 /163 ) , done . remote: Total 21671 ( delta 64 ) , reused 103 ( delta 20 ) , pack-reused 21486 Receiving objects: 100 % ( 21671 /21671 ) , 77 .35 MiB | 2 .90 MiB/s, done . Resolving deltas: 100 % ( 14910 /14910 ) , done . $ cd ~/apps/voyager with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/apps/voyager</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create an isolate node environment: $ nodeenv --node=12.18.3 env with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">~/apps/voyager</font> on <font color=\"#BC94B7\">\u21e1master</font> <font color=\"#98E242\">\u279c</font> <font color=\"#5EA702\">nodeenv</font> --node=12.18.3 env * Install prebuilt node (12.18.3) ..... done. Activate this environment $ . env/bin/activate (env) 18:11:21 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">~/apps/voyager</font> on <font color=\"#BC94B7\">\u21e1master</font> \ud83d\udce6 <font color=\"#F54235\">v2.0.0-alpha.24</font> via <font color=\"#99E343\">\u2b22 v12.18.3</font> <font color=\"#98E242\">\u279c</font> Install yarn $ npm install -g yarn + yarn@1.22.19 added 1 package in 1.697s Install required packages $ yarn Binary found at /home/abc/apps/voyager/node_modules/node-sass/vendor/linux-x64-72/binding.node Testing binary Binary is fine node-sass@4.14.1 /home/abc/apps/voyager/node_modules/node-sass Done in 91.65s. Build Voyager $ yarn build Done in 144.69s. Run We have built voyager, now we can start it $ yarn start <font color=\"#3C6894\">\u2139</font> <font color=\"#646562\">\uff62wdm\uff63</font>: Compiled successfully. Voyager operates on port 9000. To verify if it's active, you can open another terminal and run curl localhost:9000. However, at this point, Voyager is only accessible from the terminal. The workspace exposes the port range of 8020-8040. So, we'll set up port forwarding from port 9000 to 8026, allowing us to open Voyager in the browser like any other application. To do this, open a new terminal window and execute the following command: $ socat tcp-listen:8026,reuseaddr,fork tcp:localhost:9000 <font color=\"#646562\">_</font> Now we can open Voyager from the \"My-apps\" tab on the workspace UI. As soon as we close terminal Voyager will terminale. To keep Voyager running continuously, even after closing the terminal or restarting the workspace, add it as a permanent application via the workspace admin page. Permanent service Let's add Voyager as a permanent workspace application. Go to the \"Admin\" tab, open \"Workspace Settings\" and go to \"Apps & Services\". Here we can add new applications to the workspace. To do this we need to provide the command that sarts an application or service, and give this service a name. Let's first create an entry for Voyager. Select \"START NEW\" from the picklist, enter any name and paste this command cd ~/apps/voyager ; . env/bin/activate ; yarn start This commad will start Voyager. It consist of 3 sub-commands, separated by semicolon: go to voyager folder, activate environment and start application. Let's also start the port tunneling, which will map voyager's port 9000 to the port 8032. The latter is in the exposed range, hence it can be accessed. Warning This example relies on port 8032 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. Select \"START NEW\" from the picklist, enter any name and paste this command socat tcp-listen:8032,reuseaddr,fork tcp:localhost:9000 Please restart the workspace for new applications to start. Update UI Finally, let's add Voyager shortcut to the workspace UI. This will allow us to open Voyager directly from the worspace UI page. Shortcut has title, description and image. Use filebrowser or IDE to upload any image into the workspace. You can choose whatever you like, one option - is to create a printscreen of the Voyager app itself. After you upload the image to the workspace, go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8032. Leave field \"path\" blank. Then select your image. Now we have Voyager tab on the Home page of the workspace. Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"Voyager"},{"location":"user-guide/install-apps/nodejs/voyager/#voyager","text":"In this example we are going to add Voyager - a data exploration tool with a browser-based user interface that blends manual and automated chart specification. Voyager is a Javascript application. We will clone code repository, install dependencies and build Voyager.","title":"Voyager"},{"location":"user-guide/install-apps/nodejs/voyager/#requirements","text":"First thing is to install python2. Voyager has rather outdated dependencies. Luckily workspace is completely isolated, and this won't affect you main environment. Open workspace terminal and execute the next commands: $ sudo apt-get update $ sudo apt-get install -y python2 Preparing to unpack .../python2_2.7.17-2ubuntu4_amd64.deb ... Unpacking python2 ( 2 .7.17-2ubuntu4 ) ... Setting up libpython2.7-stdlib:amd64 ( 2 .7.18-1~20.04.3 ) ... Setting up python2.7 ( 2 .7.18-1~20.04.3 ) ... Setting up libpython2-stdlib:amd64 ( 2 .7.17-2ubuntu4 ) ... Setting up python2 ( 2 .7.17-2ubuntu4 ) ... Processing triggers for mime-support ( 3 .64ubuntu1 ) ...","title":"Requirements"},{"location":"user-guide/install-apps/nodejs/voyager/#build","text":"Now, clone Voyager GitHub repository, and go into it: $ git clone https://github.com/vega/voyager.git ~/apps/voyager Cloning into '/home/abc/apps/voyager' ... remote: Enumerating objects: 21671 , done . remote: Counting objects: 100 % ( 185 /185 ) , done . remote: Compressing objects: 100 % ( 163 /163 ) , done . remote: Total 21671 ( delta 64 ) , reused 103 ( delta 20 ) , pack-reused 21486 Receiving objects: 100 % ( 21671 /21671 ) , 77 .35 MiB | 2 .90 MiB/s, done . Resolving deltas: 100 % ( 14910 /14910 ) , done . $ cd ~/apps/voyager with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/apps/voyager</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create an isolate node environment: $ nodeenv --node=12.18.3 env with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">~/apps/voyager</font> on <font color=\"#BC94B7\">\u21e1master</font> <font color=\"#98E242\">\u279c</font> <font color=\"#5EA702\">nodeenv</font> --node=12.18.3 env * Install prebuilt node (12.18.3) ..... done. Activate this environment $ . env/bin/activate (env) 18:11:21 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">~/apps/voyager</font> on <font color=\"#BC94B7\">\u21e1master</font> \ud83d\udce6 <font color=\"#F54235\">v2.0.0-alpha.24</font> via <font color=\"#99E343\">\u2b22 v12.18.3</font> <font color=\"#98E242\">\u279c</font> Install yarn $ npm install -g yarn + yarn@1.22.19 added 1 package in 1.697s Install required packages $ yarn Binary found at /home/abc/apps/voyager/node_modules/node-sass/vendor/linux-x64-72/binding.node Testing binary Binary is fine node-sass@4.14.1 /home/abc/apps/voyager/node_modules/node-sass Done in 91.65s. Build Voyager $ yarn build Done in 144.69s.","title":"Build"},{"location":"user-guide/install-apps/nodejs/voyager/#run","text":"We have built voyager, now we can start it $ yarn start <font color=\"#3C6894\">\u2139</font> <font color=\"#646562\">\uff62wdm\uff63</font>: Compiled successfully. Voyager operates on port 9000. To verify if it's active, you can open another terminal and run curl localhost:9000. However, at this point, Voyager is only accessible from the terminal. The workspace exposes the port range of 8020-8040. So, we'll set up port forwarding from port 9000 to 8026, allowing us to open Voyager in the browser like any other application. To do this, open a new terminal window and execute the following command: $ socat tcp-listen:8026,reuseaddr,fork tcp:localhost:9000 <font color=\"#646562\">_</font> Now we can open Voyager from the \"My-apps\" tab on the workspace UI. As soon as we close terminal Voyager will terminale. To keep Voyager running continuously, even after closing the terminal or restarting the workspace, add it as a permanent application via the workspace admin page.","title":"Run"},{"location":"user-guide/install-apps/nodejs/voyager/#permanent-service","text":"Let's add Voyager as a permanent workspace application. Go to the \"Admin\" tab, open \"Workspace Settings\" and go to \"Apps & Services\". Here we can add new applications to the workspace. To do this we need to provide the command that sarts an application or service, and give this service a name. Let's first create an entry for Voyager. Select \"START NEW\" from the picklist, enter any name and paste this command cd ~/apps/voyager ; . env/bin/activate ; yarn start This commad will start Voyager. It consist of 3 sub-commands, separated by semicolon: go to voyager folder, activate environment and start application. Let's also start the port tunneling, which will map voyager's port 9000 to the port 8032. The latter is in the exposed range, hence it can be accessed. Warning This example relies on port 8032 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. Select \"START NEW\" from the picklist, enter any name and paste this command socat tcp-listen:8032,reuseaddr,fork tcp:localhost:9000 Please restart the workspace for new applications to start.","title":"Permanent service"},{"location":"user-guide/install-apps/nodejs/voyager/#update-ui","text":"Finally, let's add Voyager shortcut to the workspace UI. This will allow us to open Voyager directly from the worspace UI page. Shortcut has title, description and image. Use filebrowser or IDE to upload any image into the workspace. You can choose whatever you like, one option - is to create a printscreen of the Voyager app itself. After you upload the image to the workspace, go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8032. Leave field \"path\" blank. Then select your image. Now we have Voyager tab on the Home page of the workspace. Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"Update UI"},{"location":"user-guide/install-apps/nodejs/zerodivs/","text":"ZeroDivs In this example we will set up ZeroDivs - a UI Editor for creating CSS illustrations with a single HTML element We will create isolated node environment for ZeroDivs and its dependencies. Then we will start it in a permanent way, and add ZeroDivs tab shortcut to the workspace UI. Prepare First thing is to install python2. ZeroDivs has rather outdated dependencies. Luckily workspace is completely isolated, and this won't affect you main environment. Open workspace terminal and execute the next commands: $ sudo apt-get update $ sudo apt-get install -y python2 Preparing to unpack .../python2_2.7.17-2ubuntu4_amd64.deb ... Unpacking python2 ( 2 .7.17-2ubuntu4 ) ... Setting up libpython2.7-stdlib:amd64 ( 2 .7.18-1~20.04.3 ) ... Setting up python2.7 ( 2 .7.18-1~20.04.3 ) ... Setting up libpython2-stdlib:amd64 ( 2 .7.17-2ubuntu4 ) ... Setting up python2 ( 2 .7.17-2ubuntu4 ) ... Processing triggers for mime-support ( 3 .64ubuntu1 ) ... Install Open workspace terminal, clone ZeroDivs git repository and enter it: $ git clone https://github.com/jperals/zerodivs /home/abc/apps/zerodivs Cloning into '/home/abc/apps/zerodivs' ... remote: Enumerating objects: 1915 , done . remote: Counting objects: 100 % ( 319 /319 ) , done . remote: Compressing objects: 100 % ( 174 /174 ) , done . remote: Total 1915 ( delta 159 ) , reused 256 ( delta 138 ) , pack-reused 1596 Receiving objects: 100 % ( 1915 /1915 ) , 3 .55 MiB | 13 .08 MiB/s, done . Resolving deltas: 100 % ( 1336 /1336 ) , done . $ cd /home/abc/apps/zerodivs with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >/home/abc/apps/zerodivs</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create node enviroment and activate it: $ nodeenv --node=12.18.3 env && . env/bin/activate * Install prebuilt node (12.18.3) ..... done. (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/zerodivs</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v12.18.3</font> <font color=\"#98E242\">\u279c</font> Local project setup: $ npm install ... added 1702 packages from 1562 contributors and audited 1704 packages in 46.76s Build ZeroDivs: $ npm run build ... Search for the keywords to learn more about each warning. To ignore, add // eslint-disable-next-line to the line before. Run Install http-server: $ npm install http-server -g + http-server@14.1.1 added 39 packages from 43 contributors in 4.852s Start the http-server: $ cd dist && http-server -p 8026 ... Search for the keywords to learn more about each warning. To ignore, add // eslint-disable-next-line to the line before. In the workspace UI open \"My Apps\" and click \"My app on port 8026\". Add to workspace We can use ZeroDivs now but it was started from the terminal. As soon as we close the terminal, ZeroDivs process will terminalte. It is inconvenient to start ZeroDivs via terminal command (together with socat) every time we want to use it. Let's add ZeroDivs as a permanent workspace application: Open \"Admin\" tab oo the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command cd /home/abc/apps/zerodivs ; . env/bin/activate ; cd dist ; http-server -p 8032 This command consists of several parts: 1) go to the ZeroDivs repo, 2) activate node environment, 3) serve ZeroDivs on port 8032 Warning This example relies on port 8032 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. Give it any name you want Click \"Save\" Restart workspace to apply changes. Create UI tab Let's add ZeroDivs shortcut tab to the workspace \"Home\" page. Shortcut tab has title, description and image. Use filebrowser or IDE to upload any image you want into the workspace. You can choose whatever you like, one option - is to create a printscreen of the ZeroDivs app itself. After you upload the image to the workspace perform the following steps: Go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8032 In the file picker find your image. Leave field \"path\" blank and click \"Create\" Now we have ZeroDivs tab on the Home page Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"ZeroDivs"},{"location":"user-guide/install-apps/nodejs/zerodivs/#zerodivs","text":"In this example we will set up ZeroDivs - a UI Editor for creating CSS illustrations with a single HTML element We will create isolated node environment for ZeroDivs and its dependencies. Then we will start it in a permanent way, and add ZeroDivs tab shortcut to the workspace UI.","title":"ZeroDivs"},{"location":"user-guide/install-apps/nodejs/zerodivs/#prepare","text":"First thing is to install python2. ZeroDivs has rather outdated dependencies. Luckily workspace is completely isolated, and this won't affect you main environment. Open workspace terminal and execute the next commands: $ sudo apt-get update $ sudo apt-get install -y python2 Preparing to unpack .../python2_2.7.17-2ubuntu4_amd64.deb ... Unpacking python2 ( 2 .7.17-2ubuntu4 ) ... Setting up libpython2.7-stdlib:amd64 ( 2 .7.18-1~20.04.3 ) ... Setting up python2.7 ( 2 .7.18-1~20.04.3 ) ... Setting up libpython2-stdlib:amd64 ( 2 .7.17-2ubuntu4 ) ... Setting up python2 ( 2 .7.17-2ubuntu4 ) ... Processing triggers for mime-support ( 3 .64ubuntu1 ) ...","title":"Prepare"},{"location":"user-guide/install-apps/nodejs/zerodivs/#install","text":"Open workspace terminal, clone ZeroDivs git repository and enter it: $ git clone https://github.com/jperals/zerodivs /home/abc/apps/zerodivs Cloning into '/home/abc/apps/zerodivs' ... remote: Enumerating objects: 1915 , done . remote: Counting objects: 100 % ( 319 /319 ) , done . remote: Compressing objects: 100 % ( 174 /174 ) , done . remote: Total 1915 ( delta 159 ) , reused 256 ( delta 138 ) , pack-reused 1596 Receiving objects: 100 % ( 1915 /1915 ) , 3 .55 MiB | 13 .08 MiB/s, done . Resolving deltas: 100 % ( 1336 /1336 ) , done . $ cd /home/abc/apps/zerodivs with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >/home/abc/apps/zerodivs</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> Create node enviroment and activate it: $ nodeenv --node=12.18.3 env && . env/bin/activate * Install prebuilt node (12.18.3) ..... done. (env) 19:58:14 with <font color=\"#FDEB61\">abc</font> in <font color=\"#37E6E8\">/home/abc/apps/zerodivs</font> on <font color=\"#BC94B7\">\u21e1master</font> is \ud83d\udce6 <font color=\"#5EA702\">via \u2b22 v12.18.3</font> <font color=\"#98E242\">\u279c</font> Local project setup: $ npm install ... added 1702 packages from 1562 contributors and audited 1704 packages in 46.76s Build ZeroDivs: $ npm run build ... Search for the keywords to learn more about each warning. To ignore, add // eslint-disable-next-line to the line before.","title":"Install"},{"location":"user-guide/install-apps/nodejs/zerodivs/#run","text":"Install http-server: $ npm install http-server -g + http-server@14.1.1 added 39 packages from 43 contributors in 4.852s Start the http-server: $ cd dist && http-server -p 8026 ... Search for the keywords to learn more about each warning. To ignore, add // eslint-disable-next-line to the line before. In the workspace UI open \"My Apps\" and click \"My app on port 8026\".","title":"Run"},{"location":"user-guide/install-apps/nodejs/zerodivs/#add-to-workspace","text":"We can use ZeroDivs now but it was started from the terminal. As soon as we close the terminal, ZeroDivs process will terminalte. It is inconvenient to start ZeroDivs via terminal command (together with socat) every time we want to use it. Let's add ZeroDivs as a permanent workspace application: Open \"Admin\" tab oo the workspace UI and avigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command cd /home/abc/apps/zerodivs ; . env/bin/activate ; cd dist ; http-server -p 8032 This command consists of several parts: 1) go to the ZeroDivs repo, 2) activate node environment, 3) serve ZeroDivs on port 8032 Warning This example relies on port 8032 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. Give it any name you want Click \"Save\" Restart workspace to apply changes.","title":"Add to workspace"},{"location":"user-guide/install-apps/nodejs/zerodivs/#create-ui-tab","text":"Let's add ZeroDivs shortcut tab to the workspace \"Home\" page. Shortcut tab has title, description and image. Use filebrowser or IDE to upload any image you want into the workspace. You can choose whatever you like, one option - is to create a printscreen of the ZeroDivs app itself. After you upload the image to the workspace perform the following steps: Go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8032 In the file picker find your image. Leave field \"path\" blank and click \"Create\" Now we have ZeroDivs tab on the Home page Tip Use the Alnoda Hub for application installation - it greatly simplifies the process!","title":"Create UI tab"},{"location":"user-guide/install-apps/php/candidates/","text":"https://github.com/Rudloff/alltube https://github.com/symfony/demo https://github.com/FriendsOfPHP/pickle","title":"Candidates"},{"location":"user-guide/install-apps/php/install/","text":"","title":"Install"},{"location":"user-guide/install-apps/python/cooka/","text":"Cooka - manage machine learning datasets and experiments Intro In this example we are going to add Cooka to the workspace as a permanent workspace application. Cooka is a lightweight and visualization toolkit to manage datasets and design model learning experiments through web UI. Cooka can be installed in any workspace. We will use Extended workspace in this example. Cooka is a python application with a graphical browser-based user interface. We will install Cooka python package, add Cooka as a permanent workspace application, and create Cooka shortcut in the workspace UI page. Requirements Before installing Cooca, we need to install several dependencies. Install tensorflow - is an open source software library for high performance numerical computation. $ pip install pyarrow == 2 .0.0 Installing collected packages: pyarrow Successfully installed pyarrow-2.0.0 $ pip install numpy == 1 .19.1 scikit-learn == 0 .23.0 tensorflow == 2 .2.0 <font color = \"#D81E00\" >ERROR: pip ' s dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts. vizex 2 .1.0 requires numpy> = 1 .19.2, but you have numpy 1 .19.1 which is incompatible.</font> Successfully installed termcolor-1.1.0 typing-extensions-4.3.0 werkzeug-2.2.2 wrapt-1.14.1 zipp-3.8.1 ... $ pip install shap == 0 .28.5 matplotlib dask-ml == 1 .4.0 featuretools == 0 .27.1 changing mode of /home/abc/.local/bin/dask-worker to 755 Successfully installed PyWavelets-1.3.0 asttokens-2.0.8 backcall-0.2.0 cloudpickle-2.1.0 cycler-0.11.0 dask-2022.9.0 dask-glm-0.2.0 dask-ml-1.4.0 decorator-5.1.1 distributed-2022.9.0 executing-1.0.0 fonttools-4.37.1 fsspec-2022.8.2 heapdict-1.0.1 imageio-2.21.2 ipython-8.4.0 jedi-0.18.1 jinja2-3.1.2 kiwisolver-1.4.4 llvmlite-0.39.1 locket-1.0.0 matplotlib-3.5.3 matplotlib-inline-0.1.6 msgpack-1.0.4 multipledispatch-0.6.0 networkx-2.8.6 numba-0.56.2 numpy-1.23.2 parso-0.8.3 partd-1.3.0 pexpect-4.8.0 pickleshare-0.7.5 pillow-9.2.0 prompt-toolkit-3.0.31 ptyprocess-0.7.0 pure-eval-0.2.2 pygments-2.13.0 pyyaml-6.0 scikit-image-0.19.3 setuptools-59.8.0 shap-0.28.5 sortedcontainers-2.4.0 stack-data-0.5.0 tblib-1.7.0 tifffile-2022.8.12 toolz-0.12.0 tornado-6.1 tqdm-4.64.1 traitlets-5.3.0 wcwidth-0.2.5 zict-2.2.0 $ pip install protobuf == 3 .20.0 Successfully installed protobuf-3.20.0 Install Cooka is a python package. It can be installed with either pip or pipx . To install Cooka, execute the next command. NOTE: this will take several minutes $ pip install cooka == 0 .1.5 installed package cooka 0 .1.5, installed using Python 3 .8.10 These apps are now globally available - cooka done ! \u2728 \ud83c\udf1f \u2728 Run Before we start Cooka, let's generate config $ mkdir -p ~/.config/cooka/ with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/p</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> $ cooka generate-config > ~/.config/cooka/cooka.py with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/p</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> The config file /home/abc/.config/cooka/cooka.py was generated. Open it with the IDE and change the application port to 8033. This is one of the free ports in the workspace port range 8021-8040. Now we can start Cooka. Execute in the workspace terminal $ cooka server INFO 2022 -09-14 21 :11:48,738 process_monitor MainProcess ProcessMonitorThread: [ MonitorThread ] loop running... INFO 2022 -09-14 21 :11:48,739 server MainProcess MainThread: Cooka running at: http://0.0.0.0:8033 You can now open localhost:8033 in your browser - the Cooka is up and running. Import or upload any dataset, for example Boston housing dataset , design and run experiments. Add to workspace We can use Cooka already. But it was started from the terminal. As soon as we close the terminal, Cooka will terminalte too. It is inconvenient to start Cooka via terminal command every time we want to use it. It would be more convenient if we didn't have to start Cooka from the terminal each time. Cooka should start automatically with all other workspace applications every time we start the workspace. Let's add Cooka as a permanent workspace application: Open \"Admin\" tab in the workspace UI and navigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command cooka server Give it any name and click \"Save\" Restart the workspace to apply the change. Create UI tab Let's add Cooka shortcut tab to the workspace \"Home\" page. Shortcut tab has title, description and image. Use filebrowser or IDE to upload any image you want into the workspace. You can choose whatever you like, one option - is to create a printscreen of the Cooka app itself. After you upload the image to the workspace Go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8033 - the port we set in the Cooka configuration file. In the file picker find your image. Leave field \"path\" blank and click \"Create\" Now we have Cooka tab on the Home page Result Cooka was installed and permanently added to the workspace. If we stop and then start workspace, cooka will start too.","title":"Cooka - manage machine learning datasets and experiments"},{"location":"user-guide/install-apps/python/cooka/#cooka-manage-machine-learning-datasets-and-experiments","text":"","title":"Cooka - manage machine learning datasets and experiments"},{"location":"user-guide/install-apps/python/cooka/#intro","text":"In this example we are going to add Cooka to the workspace as a permanent workspace application. Cooka is a lightweight and visualization toolkit to manage datasets and design model learning experiments through web UI. Cooka can be installed in any workspace. We will use Extended workspace in this example. Cooka is a python application with a graphical browser-based user interface. We will install Cooka python package, add Cooka as a permanent workspace application, and create Cooka shortcut in the workspace UI page.","title":"Intro"},{"location":"user-guide/install-apps/python/cooka/#requirements","text":"Before installing Cooca, we need to install several dependencies. Install tensorflow - is an open source software library for high performance numerical computation. $ pip install pyarrow == 2 .0.0 Installing collected packages: pyarrow Successfully installed pyarrow-2.0.0 $ pip install numpy == 1 .19.1 scikit-learn == 0 .23.0 tensorflow == 2 .2.0 <font color = \"#D81E00\" >ERROR: pip ' s dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts. vizex 2 .1.0 requires numpy> = 1 .19.2, but you have numpy 1 .19.1 which is incompatible.</font> Successfully installed termcolor-1.1.0 typing-extensions-4.3.0 werkzeug-2.2.2 wrapt-1.14.1 zipp-3.8.1 ... $ pip install shap == 0 .28.5 matplotlib dask-ml == 1 .4.0 featuretools == 0 .27.1 changing mode of /home/abc/.local/bin/dask-worker to 755 Successfully installed PyWavelets-1.3.0 asttokens-2.0.8 backcall-0.2.0 cloudpickle-2.1.0 cycler-0.11.0 dask-2022.9.0 dask-glm-0.2.0 dask-ml-1.4.0 decorator-5.1.1 distributed-2022.9.0 executing-1.0.0 fonttools-4.37.1 fsspec-2022.8.2 heapdict-1.0.1 imageio-2.21.2 ipython-8.4.0 jedi-0.18.1 jinja2-3.1.2 kiwisolver-1.4.4 llvmlite-0.39.1 locket-1.0.0 matplotlib-3.5.3 matplotlib-inline-0.1.6 msgpack-1.0.4 multipledispatch-0.6.0 networkx-2.8.6 numba-0.56.2 numpy-1.23.2 parso-0.8.3 partd-1.3.0 pexpect-4.8.0 pickleshare-0.7.5 pillow-9.2.0 prompt-toolkit-3.0.31 ptyprocess-0.7.0 pure-eval-0.2.2 pygments-2.13.0 pyyaml-6.0 scikit-image-0.19.3 setuptools-59.8.0 shap-0.28.5 sortedcontainers-2.4.0 stack-data-0.5.0 tblib-1.7.0 tifffile-2022.8.12 toolz-0.12.0 tornado-6.1 tqdm-4.64.1 traitlets-5.3.0 wcwidth-0.2.5 zict-2.2.0 $ pip install protobuf == 3 .20.0 Successfully installed protobuf-3.20.0","title":"Requirements"},{"location":"user-guide/install-apps/python/cooka/#install","text":"Cooka is a python package. It can be installed with either pip or pipx . To install Cooka, execute the next command. NOTE: this will take several minutes $ pip install cooka == 0 .1.5 installed package cooka 0 .1.5, installed using Python 3 .8.10 These apps are now globally available - cooka done ! \u2728 \ud83c\udf1f \u2728","title":"Install"},{"location":"user-guide/install-apps/python/cooka/#run","text":"Before we start Cooka, let's generate config $ mkdir -p ~/.config/cooka/ with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/p</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> $ cooka generate-config > ~/.config/cooka/cooka.py with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~/p</font> on <font color = \"#BC94B7\" >\u21e1master</font> <font color = \"#98E242\" >\u279c</font> The config file /home/abc/.config/cooka/cooka.py was generated. Open it with the IDE and change the application port to 8033. This is one of the free ports in the workspace port range 8021-8040. Now we can start Cooka. Execute in the workspace terminal $ cooka server INFO 2022 -09-14 21 :11:48,738 process_monitor MainProcess ProcessMonitorThread: [ MonitorThread ] loop running... INFO 2022 -09-14 21 :11:48,739 server MainProcess MainThread: Cooka running at: http://0.0.0.0:8033 You can now open localhost:8033 in your browser - the Cooka is up and running. Import or upload any dataset, for example Boston housing dataset , design and run experiments.","title":"Run"},{"location":"user-guide/install-apps/python/cooka/#add-to-workspace","text":"We can use Cooka already. But it was started from the terminal. As soon as we close the terminal, Cooka will terminalte too. It is inconvenient to start Cooka via terminal command every time we want to use it. It would be more convenient if we didn't have to start Cooka from the terminal each time. Cooka should start automatically with all other workspace applications every time we start the workspace. Let's add Cooka as a permanent workspace application: Open \"Admin\" tab in the workspace UI and navigate to \"Workspace Settings\" Go to the tab \"Apps & Services\" Select \"START NEW\" from the picklist Enter the following command cooka server Give it any name and click \"Save\" Restart the workspace to apply the change.","title":"Add to workspace"},{"location":"user-guide/install-apps/python/cooka/#create-ui-tab","text":"Let's add Cooka shortcut tab to the workspace \"Home\" page. Shortcut tab has title, description and image. Use filebrowser or IDE to upload any image you want into the workspace. You can choose whatever you like, one option - is to create a printscreen of the Cooka app itself. After you upload the image to the workspace Go to the \"Interface\" tab of the workspace settings and select \"CREATE NEW\" from the picklist. Give it any title and description. In the field \"Port\" enter port 8033 - the port we set in the Cooka configuration file. In the file picker find your image. Leave field \"path\" blank and click \"Create\" Now we have Cooka tab on the Home page","title":"Create UI tab"},{"location":"user-guide/install-apps/python/cooka/#result","text":"Cooka was installed and permanently added to the workspace. If we stop and then start workspace, cooka will start too.","title":"Result"},{"location":"user-guide/install-apps/python/install/","text":"Python applications The best way to install Python applications in the workspaces is pipx. Pipx is a utility for installing and running Python applications in isolated environments. It's useful when you want to use a Python-based application, but you want to avoid installing it and its dependencies into your global Python environment. Info Pipx is installed in every Alnoda workspace by default. You can use pipx to install applications from PyPi. For example, let's install awesome-finder : $ pipx install awesome-finder installed package awesome-finder 1.2.3, installed using Python 3.8.10 These apps are now globally available - awesome-hub done! \u2728 \ud83c\udf1f \u2728 You can now explore awesome resources from various programming languages. For instance: <font color=\"#5EA702\">awesome-hub</font> python","title":"Info"},{"location":"user-guide/install-apps/python/install/#python-applications","text":"The best way to install Python applications in the workspaces is pipx. Pipx is a utility for installing and running Python applications in isolated environments. It's useful when you want to use a Python-based application, but you want to avoid installing it and its dependencies into your global Python environment. Info Pipx is installed in every Alnoda workspace by default. You can use pipx to install applications from PyPi. For example, let's install awesome-finder : $ pipx install awesome-finder installed package awesome-finder 1.2.3, installed using Python 3.8.10 These apps are now globally available - awesome-hub done! \u2728 \ud83c\udf1f \u2728 You can now explore awesome resources from various programming languages. For instance: <font color=\"#5EA702\">awesome-hub</font> python","title":"Python applications"},{"location":"user-guide/install-apps/python/label-studio/","text":"Label Studio In this example we are going to install Label Studio - an open source data labeling tool. It lets you label data types like audio, text, images, videos, and time series with a simple and straightforward UI and export to various model formats. It can be used to prepare raw data or improve existing training data to get more accurate ML models. Info Label Studio can be installed in any workspace. We will use Theia workspace v.5.0 in this example. Label Studio is a python package which we will install in the isolated environment with pipx : $ pipx install label-studio installed package label-studio 1 .5.0.post0, installed using Python 3 .8.10 These apps are now globally available - label-studio done ! \u2728 \ud83c\udf1f \u2728 Label Studio is installed and ready to be used. Run Let's start Label Studio on the port 8026 $ label-studio start --port 8026 System check identified no issues ( 1 silenced ) . September 05 , 2022 - 12 :52:41 Django version 3 .1.14, using settings 'label_studio.core.settings.label_studio' Starting development server at http://0.0.0.0:8026/ Quit the server with CONTROL-C. Label Studio is now operational, actively listening on port 8026, and readily accessible from the \"My apps\" page for quick access. While Label Studio is functional, we aim to implement two enhancements: Persistence. Ensure Label Studio remains active even after closing the terminal session or stopping and restarting the workspace. Update UI. Create a shortcut for Label Studio, rather than relying on the generic \"My app on port 8026\". Permanent service If you currently have Label Studio running in your terminal, you can safely close it. To start Label Studio in a resilient manner, follow these steps: Open workspace Admin and select \"Workspace settings\". In the workspace settings, go to \"Apps & Services\". Choose the \"START NEW\" option from the picklist. Copy and paste the following command: label-studio start --port 8032 Warning This example relies on port 8032 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. This is a command that would start Label Studio in a resilient manner. Give it any name, and click \"Save\" To initiate Label Studio, please restart the workspace. By starting Label Studio using this method, it will persist even if you restart the workspace again. Notably, it is now running on a different port, specifically 8032. This port can been selected if it is not used by any other application within the workspace. UI card Let's proceed with creating a card specifically for Label Studio and placing it on the \"Home\" tab of the workspace UI page. To begin, choose an image for this card. Feel free to select any image, including a screenshot of Label Studio. Upload the chosen image to the workspace using Filebrowser or an IDE. Next, navigate to the \"Admin\" tab and open \"Workspace settings\". Proceed to the \"Interface\" section and select \"CREATE NEW\" from the picklist. Provide a name, title, and description for the card. It is crucial to enter the port as 8032 since we started Label Studio on this specific port. The final step is to find the image you have uploaded using the file picker A user-friendly card for Label Studio has been successfully created on the Home page, providing convenient access to its WEB UI.","title":"Label Studio"},{"location":"user-guide/install-apps/python/label-studio/#label-studio","text":"In this example we are going to install Label Studio - an open source data labeling tool. It lets you label data types like audio, text, images, videos, and time series with a simple and straightforward UI and export to various model formats. It can be used to prepare raw data or improve existing training data to get more accurate ML models. Info Label Studio can be installed in any workspace. We will use Theia workspace v.5.0 in this example. Label Studio is a python package which we will install in the isolated environment with pipx : $ pipx install label-studio installed package label-studio 1 .5.0.post0, installed using Python 3 .8.10 These apps are now globally available - label-studio done ! \u2728 \ud83c\udf1f \u2728 Label Studio is installed and ready to be used.","title":"Label Studio"},{"location":"user-guide/install-apps/python/label-studio/#run","text":"Let's start Label Studio on the port 8026 $ label-studio start --port 8026 System check identified no issues ( 1 silenced ) . September 05 , 2022 - 12 :52:41 Django version 3 .1.14, using settings 'label_studio.core.settings.label_studio' Starting development server at http://0.0.0.0:8026/ Quit the server with CONTROL-C. Label Studio is now operational, actively listening on port 8026, and readily accessible from the \"My apps\" page for quick access. While Label Studio is functional, we aim to implement two enhancements: Persistence. Ensure Label Studio remains active even after closing the terminal session or stopping and restarting the workspace. Update UI. Create a shortcut for Label Studio, rather than relying on the generic \"My app on port 8026\".","title":"Run"},{"location":"user-guide/install-apps/python/label-studio/#permanent-service","text":"If you currently have Label Studio running in your terminal, you can safely close it. To start Label Studio in a resilient manner, follow these steps: Open workspace Admin and select \"Workspace settings\". In the workspace settings, go to \"Apps & Services\". Choose the \"START NEW\" option from the picklist. Copy and paste the following command: label-studio start --port 8032 Warning This example relies on port 8032 being available within your workspace. To verify the availability of this port, please consult the 'About' tab within your workspace's UI. This is a command that would start Label Studio in a resilient manner. Give it any name, and click \"Save\" To initiate Label Studio, please restart the workspace. By starting Label Studio using this method, it will persist even if you restart the workspace again. Notably, it is now running on a different port, specifically 8032. This port can been selected if it is not used by any other application within the workspace.","title":"Permanent service"},{"location":"user-guide/install-apps/python/label-studio/#ui-card","text":"Let's proceed with creating a card specifically for Label Studio and placing it on the \"Home\" tab of the workspace UI page. To begin, choose an image for this card. Feel free to select any image, including a screenshot of Label Studio. Upload the chosen image to the workspace using Filebrowser or an IDE. Next, navigate to the \"Admin\" tab and open \"Workspace settings\". Proceed to the \"Interface\" section and select \"CREATE NEW\" from the picklist. Provide a name, title, and description for the card. It is crucial to enter the port as 8032 since we started Label Studio on this specific port. The final step is to find the image you have uploaded using the file picker A user-friendly card for Label Studio has been successfully created on the Home page, providing convenient access to its WEB UI.","title":"UI card"},{"location":"user-guide/install-apps/ruby/install/","text":"Ruby applications You can install Ruby applications in the Alnoda workpspaces utilizing gem - a package manager for the Ruby programming language that provides a standard format for distributing Ruby programs and libraries. It is included with Ruby, and it is analogous to pip in Python or npm in Node.js. Warning Ruby is not installed in the Alnoda workspaces by default. To install Ruby run wrk install ruby . Restart terminal after installation is done. Before installing Ruby applications you need to install Ruby in the workspace: <font color=\"#5EA702\">wrk</font> install ruby Please restart workspace terminal now! Having installed Ruby in the workspace, you can install Ruby applications with gem . For example let's install gem install Jekyll - a static site generator that's perfect for personal projects, blogs, or other websites that don't require a database. <font color=\"#5EA702\">gem</font> install jekyll -v 4.3.2 You can now use Jekyll <font color=\"#5EA702\">jekyll</font> -help Alnoda Hub If you are planning to register Ruby application in the Alnoda Hub, you need to start installation script with the command that installs Rybu and set environmental variables : wrk install ruby export PATH = \" $PATH :/home/abc/.rbenv/bin:/home/abc/.rbenv/shims/\"","title":"Info"},{"location":"user-guide/install-apps/ruby/install/#ruby-applications","text":"You can install Ruby applications in the Alnoda workpspaces utilizing gem - a package manager for the Ruby programming language that provides a standard format for distributing Ruby programs and libraries. It is included with Ruby, and it is analogous to pip in Python or npm in Node.js. Warning Ruby is not installed in the Alnoda workspaces by default. To install Ruby run wrk install ruby . Restart terminal after installation is done. Before installing Ruby applications you need to install Ruby in the workspace: <font color=\"#5EA702\">wrk</font> install ruby Please restart workspace terminal now! Having installed Ruby in the workspace, you can install Ruby applications with gem . For example let's install gem install Jekyll - a static site generator that's perfect for personal projects, blogs, or other websites that don't require a database. <font color=\"#5EA702\">gem</font> install jekyll -v 4.3.2 You can now use Jekyll <font color=\"#5EA702\">jekyll</font> -help","title":"Ruby applications"},{"location":"user-guide/install-apps/ruby/install/#alnoda-hub","text":"If you are planning to register Ruby application in the Alnoda Hub, you need to start installation script with the command that installs Rybu and set environmental variables : wrk install ruby export PATH = \" $PATH :/home/abc/.rbenv/bin:/home/abc/.rbenv/shims/\"","title":"Alnoda Hub"},{"location":"user-guide/install-apps/rust/amp/","text":"Amp In this example we will install amp - a complete text editor for your terminal. First thing is to install Rust and Cargo in the workspace: <font color=\"#5EA702\">wrk</font> install rust Warning After installation of Rust restart your terminal Install libxcb1-dev , a package required for building amp <font color=\"#5EA702\">sudo apt-get</font> install libxcb1-dev -y Install amp with cargo: <font color=\"#5EA702\">cargo</font> install amp --version 0.6.2 Amp is installed. Open amp editor <font color=\"#5EA702\">amp</font>","title":"amp"},{"location":"user-guide/install-apps/rust/amp/#amp","text":"In this example we will install amp - a complete text editor for your terminal. First thing is to install Rust and Cargo in the workspace: <font color=\"#5EA702\">wrk</font> install rust Warning After installation of Rust restart your terminal Install libxcb1-dev , a package required for building amp <font color=\"#5EA702\">sudo apt-get</font> install libxcb1-dev -y Install amp with cargo: <font color=\"#5EA702\">cargo</font> install amp --version 0.6.2 Amp is installed. Open amp editor <font color=\"#5EA702\">amp</font>","title":"Amp"},{"location":"user-guide/install-apps/rust/install/","text":"Rust applications You can install Rust applications in the Alnoda workspaces using Cargo, the Rust package manager. But before Rust should be installed. Note Rust and cargo are not installed in aloda workspaces by default. To install Rust ad Cargo in any Alnoda workspace run wrk install rust Crate registry After you installed Rust in your workspace you can install any application from the Crate registry . For example install halp - a CLI tool to get help with CLI tools: $ cargo install halp ... <font color=\"#93DA41\">Installing</font> /home/abc/.cargo/bin/halp <font color=\"#93DA41\">Installing</font> /home/abc/.cargo/bin/halp-completions <font color=\"#93DA41\">Installing</font> /home/abc/.cargo/bin/halp-mangen <font color=\"#93DA41\">Installing</font> /home/abc/.cargo/bin/halp-test <font color=\"#93DA41\">Installed</font> package `halp v0.1.7` (executables `halp`, `halp-completions`, `halp-mangen`, `halp-test`) Now when halp is globally installed let's utilize it to get info about cargo command <font color=\"#5EA702\">halp</font> plz cargo From source With cargo we can build and install rust applications from source. Let's install ripgrep , a line-oriented search tool that recursively searches your current directory for a regex pattern. Clone Git repository and navigate into it: <font color=\"#5EA702\">git</font> clone https://github.com/BurntSushi/ripgrep.git <font color=\"#5EA702\">cd</font> ripgrep Compile the program and install it using cargo : <font color=\"#5EA702\">cargo</font> build --release This command will create an optimized executable in the target/release directory. You can then move it into a directory that's in the workspace's PATH. For example: <font color=\"#5EA702\">mv</font> target/release/rg /home/abc/bin/ Ripgrep is globally installed, and you can use it with rg command: <font color=\"#5EA702\">rg</font> -help Alnoda Hub If you are planning to register Rust application in the Alnoda Hub, you need to start installation script with the command that installs Rust and set environmental variables : wrk install rust export PATH = \" $PATH :/home/abc/.cargo/bin/\"","title":"Info"},{"location":"user-guide/install-apps/rust/install/#rust-applications","text":"You can install Rust applications in the Alnoda workspaces using Cargo, the Rust package manager. But before Rust should be installed. Note Rust and cargo are not installed in aloda workspaces by default. To install Rust ad Cargo in any Alnoda workspace run wrk install rust","title":"Rust applications"},{"location":"user-guide/install-apps/rust/install/#crate-registry","text":"After you installed Rust in your workspace you can install any application from the Crate registry . For example install halp - a CLI tool to get help with CLI tools: $ cargo install halp ... <font color=\"#93DA41\">Installing</font> /home/abc/.cargo/bin/halp <font color=\"#93DA41\">Installing</font> /home/abc/.cargo/bin/halp-completions <font color=\"#93DA41\">Installing</font> /home/abc/.cargo/bin/halp-mangen <font color=\"#93DA41\">Installing</font> /home/abc/.cargo/bin/halp-test <font color=\"#93DA41\">Installed</font> package `halp v0.1.7` (executables `halp`, `halp-completions`, `halp-mangen`, `halp-test`) Now when halp is globally installed let's utilize it to get info about cargo command <font color=\"#5EA702\">halp</font> plz cargo","title":"Crate registry"},{"location":"user-guide/install-apps/rust/install/#from-source","text":"With cargo we can build and install rust applications from source. Let's install ripgrep , a line-oriented search tool that recursively searches your current directory for a regex pattern. Clone Git repository and navigate into it: <font color=\"#5EA702\">git</font> clone https://github.com/BurntSushi/ripgrep.git <font color=\"#5EA702\">cd</font> ripgrep Compile the program and install it using cargo : <font color=\"#5EA702\">cargo</font> build --release This command will create an optimized executable in the target/release directory. You can then move it into a directory that's in the workspace's PATH. For example: <font color=\"#5EA702\">mv</font> target/release/rg /home/abc/bin/ Ripgrep is globally installed, and you can use it with rg command: <font color=\"#5EA702\">rg</font> -help","title":"From source"},{"location":"user-guide/install-apps/rust/install/#alnoda-hub","text":"If you are planning to register Rust application in the Alnoda Hub, you need to start installation script with the command that installs Rust and set environmental variables : wrk install rust export PATH = \" $PATH :/home/abc/.cargo/bin/\"","title":"Alnoda Hub"},{"location":"user-guide/terminal/cron/","text":"","title":"Cron"},{"location":"user-guide/terminal/features/","text":"","title":"Features"},{"location":"user-guide/terminal/pm2/","text":"PM2 - excellent process manager PM2 is a daemon process manager that will help you manage and keep your application online. Getting started with PM2 is straightforward, it is offered as a simple and intuitive CLI In order to use PM2 you have to open workspace terminal. Thankfully, PM2 commands are very ituitive and easy to use. PM2 has nice TUI interface to monitor apps and services Note Every workspace has PM2 installed. Start Starting any application with PM2 is as easy as <font color = \"#5EA702\" >pm2</font> start bashscript.sh <font color = \"#5EA702\" >pm2</font> start python-app.py --watch <font color = \"#5EA702\" >pm2</font> start binary-file -- --port 1520 <font color = \"#5EA702\" >pm2</font> start app.js Attention Ay application started with PM2 will cotinue running even if terminal window is closed. But all processes started with PM2 will terminate when the workspace is stopped. Useful commands Below are some of the most useful commands that you would use to start and stop applications. Start application and daemonize with pm2 process manager <font color = \"#5EA702\" >pm2</font> start <font color = \"#E77260\" > [ application ] </font> Start named application <font color = \"#5EA702\" >pm2</font> start <font color = \"#E77260\" > [ application ] </font> --name <font color = \"#E77260\" > [ name ] </font> Start any application with flags <font color = \"#5EA702\" >pm2</font> start <font color = \"#E77260\" > [ application ] </font> -- <font color = \"#E77260\" > [ flags ] Show applications <font color = \"#5EA702\" >pm2</font> ls Stop running application <font color = \"#5EA702\" >pm2</font> stop <font color = \"#E77260\" > [ application ] </font> Open monintor <font color = \"#5EA702\" >pm2</font> monit Examples SimpleHTTPServer Let's launch static file server (python) with PM2. Note You can use any workspace for this example Python SimpleHTTPServer module is a very handy tool. You can use Python SimpleHTTPServer to turn any directory into a simple HTTP web server. To try it out execute $ python3 -m http.server 8030 Serving HTTP on 0 .0.0.0 port 8030 ( http://0.0.0.0:8030/ ) ... As soon as you close the terminal session, this simple server will terminate too. To keep it running, let's launch it with the help of PM2 $ pm2 start python3 -- -m http.server 8030 <font color = \"#5EA702\" > [ PM2 ] </font> Applying action restartProcessId on app [ python3 ]( ids: [ 1 ]) <font color = \"#5EA702\" > [ PM2 ] </font> [ python3 ]( 1 ) \u2713 <font color = \"#5EA702\" > [ PM2 ] </font> Process successfully started Open tab \"My apps\" and click on \"My app on port 8030\". You can see that SimpleHTTPServer is up and runing. It will keep running after you close the terminal winndow. Lazygit Let's use lazygit to explore a git repository, start it with PM2 and turn into a web app with ttyd. Note You can use any workspace for this example Every workspace has lazygit - a simple terminal UI for git commands. Let's clone an example Git repository, and explore it with lazygit. Then we will turn lazygit into a web application using ttyd - a browser-based terminal, which is istalled in every workspace. To start, let's clone an example Git repository. $ git clone https://github.com/johnpapa/node-hello.git Cloning into 'node-hello' ... remote: Enumerating objects: 47 , done . remote: Total 47 ( delta 0 ) , reused 0 ( delta 0 ) , pack-reused 47 Unpacking objects: 100 % ( 47 /47 ) , 6 .01 KiB | 84 .00 KiB/s, done . Go into the cloned repo, and launch lazygit $ cd node-hello ( env ) 20 :08:12 with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~p/node-hello</font> on <font color = \"#BC94B7\" >\u21e1master</font> is \ud83d\udce6 <font color = \"#5EA702\" >via \u2b22 v18.9.0</font> <font color = \"#98E242\" >\u279c</font> Let's expose lazygit as web UI using ttyd . In this example, we will expose it on port 8031 - one of the free workspace ports, for which there is a shortcut tab \"My app on port 8031\" on the \"My apps\" tab. $ pm2 start ttyd -- -p 8031 /bin/zsh -c 'cd /home/project/node-hello && lazygit' <font color = \"#5EA702\" > [ PM2</font> ] Spawning PM2 daemon with pm2_home = /home/abc/.pm2 <font color = \"#5EA702\" > [ PM2 ] </font> PM2 Successfully daemonized <font color = \"#5EA702\" > [ PM2 ] </font> Starting /usr/bin/ttyd in fork_mode ( 1 instance ) <font color = \"#5EA702\" > [ PM2 ] </font> Done. Open tab \"My apps\" and click on \"My app on port 8031\". You can explore repository with lazygit. It will keep running after you close the terminal winndow. UI for PM2 Create service PM2 has terminal user interface (TUI) for monnitoring of running applications. You can start it executig pm2 monit in the workspace terminal. First thing, is to expose pm2 monit as a WEB application, and start the latter as a permanent service of the workspace. Any terminal application can be turned into WEB application wiht ttyd (installed in every workspace). Note Permanent service starts automatically as soon as the workspace is started. Perform the next steps: Go to the \"Admin\" tab on the workspace UI and open workspace settings Go to \"Interface\" and select \"START NEW\" from the picklist Enter command ttyd -p 8032 /bin/zsh -c 'cd /home/abc/apps/node && . env/bin/activate && pm2 monit' Note pm2 is an alias for command cd /home/abc/apps/node && . env/bin/activate && pm2 Give it any name and click \"Save\" Please restart the workspace to apply the channge. Create service Let's create shortcut for pm2 monit on the \"Admin\" tab of the workspace UI: Go to the \"Admin\" tab on the workspace UI and open workspace settings Go to \"Interface\" and then to tab \"Admin\" Select \"CREATE NEW\" from the picklist Enter any title and any description Enter port 8032 Uploat an image to the workspace (use Filebrowser), and choose this image in the filepicker Ignore field \"path\", and click \"Save\" Nnow we have the PM2 monit tab on the workspace UI \"Admin\" tab","title":"PM2 - excellent process manager"},{"location":"user-guide/terminal/pm2/#pm2-excellent-process-manager","text":"PM2 is a daemon process manager that will help you manage and keep your application online. Getting started with PM2 is straightforward, it is offered as a simple and intuitive CLI In order to use PM2 you have to open workspace terminal. Thankfully, PM2 commands are very ituitive and easy to use. PM2 has nice TUI interface to monitor apps and services Note Every workspace has PM2 installed.","title":"PM2 - excellent process manager"},{"location":"user-guide/terminal/pm2/#start","text":"Starting any application with PM2 is as easy as <font color = \"#5EA702\" >pm2</font> start bashscript.sh <font color = \"#5EA702\" >pm2</font> start python-app.py --watch <font color = \"#5EA702\" >pm2</font> start binary-file -- --port 1520 <font color = \"#5EA702\" >pm2</font> start app.js Attention Ay application started with PM2 will cotinue running even if terminal window is closed. But all processes started with PM2 will terminate when the workspace is stopped.","title":"Start"},{"location":"user-guide/terminal/pm2/#useful-commands","text":"Below are some of the most useful commands that you would use to start and stop applications. Start application and daemonize with pm2 process manager <font color = \"#5EA702\" >pm2</font> start <font color = \"#E77260\" > [ application ] </font> Start named application <font color = \"#5EA702\" >pm2</font> start <font color = \"#E77260\" > [ application ] </font> --name <font color = \"#E77260\" > [ name ] </font> Start any application with flags <font color = \"#5EA702\" >pm2</font> start <font color = \"#E77260\" > [ application ] </font> -- <font color = \"#E77260\" > [ flags ] Show applications <font color = \"#5EA702\" >pm2</font> ls Stop running application <font color = \"#5EA702\" >pm2</font> stop <font color = \"#E77260\" > [ application ] </font> Open monintor <font color = \"#5EA702\" >pm2</font> monit","title":"Useful commands"},{"location":"user-guide/terminal/pm2/#examples","text":"","title":"Examples"},{"location":"user-guide/terminal/pm2/#simplehttpserver","text":"Let's launch static file server (python) with PM2. Note You can use any workspace for this example Python SimpleHTTPServer module is a very handy tool. You can use Python SimpleHTTPServer to turn any directory into a simple HTTP web server. To try it out execute $ python3 -m http.server 8030 Serving HTTP on 0 .0.0.0 port 8030 ( http://0.0.0.0:8030/ ) ... As soon as you close the terminal session, this simple server will terminate too. To keep it running, let's launch it with the help of PM2 $ pm2 start python3 -- -m http.server 8030 <font color = \"#5EA702\" > [ PM2 ] </font> Applying action restartProcessId on app [ python3 ]( ids: [ 1 ]) <font color = \"#5EA702\" > [ PM2 ] </font> [ python3 ]( 1 ) \u2713 <font color = \"#5EA702\" > [ PM2 ] </font> Process successfully started Open tab \"My apps\" and click on \"My app on port 8030\". You can see that SimpleHTTPServer is up and runing. It will keep running after you close the terminal winndow.","title":"SimpleHTTPServer"},{"location":"user-guide/terminal/pm2/#lazygit","text":"Let's use lazygit to explore a git repository, start it with PM2 and turn into a web app with ttyd. Note You can use any workspace for this example Every workspace has lazygit - a simple terminal UI for git commands. Let's clone an example Git repository, and explore it with lazygit. Then we will turn lazygit into a web application using ttyd - a browser-based terminal, which is istalled in every workspace. To start, let's clone an example Git repository. $ git clone https://github.com/johnpapa/node-hello.git Cloning into 'node-hello' ... remote: Enumerating objects: 47 , done . remote: Total 47 ( delta 0 ) , reused 0 ( delta 0 ) , pack-reused 47 Unpacking objects: 100 % ( 47 /47 ) , 6 .01 KiB | 84 .00 KiB/s, done . Go into the cloned repo, and launch lazygit $ cd node-hello ( env ) 20 :08:12 with <font color = \"#FDEB61\" >abc</font> in <font color = \"#37E6E8\" >~p/node-hello</font> on <font color = \"#BC94B7\" >\u21e1master</font> is \ud83d\udce6 <font color = \"#5EA702\" >via \u2b22 v18.9.0</font> <font color = \"#98E242\" >\u279c</font> Let's expose lazygit as web UI using ttyd . In this example, we will expose it on port 8031 - one of the free workspace ports, for which there is a shortcut tab \"My app on port 8031\" on the \"My apps\" tab. $ pm2 start ttyd -- -p 8031 /bin/zsh -c 'cd /home/project/node-hello && lazygit' <font color = \"#5EA702\" > [ PM2</font> ] Spawning PM2 daemon with pm2_home = /home/abc/.pm2 <font color = \"#5EA702\" > [ PM2 ] </font> PM2 Successfully daemonized <font color = \"#5EA702\" > [ PM2 ] </font> Starting /usr/bin/ttyd in fork_mode ( 1 instance ) <font color = \"#5EA702\" > [ PM2 ] </font> Done. Open tab \"My apps\" and click on \"My app on port 8031\". You can explore repository with lazygit. It will keep running after you close the terminal winndow.","title":"Lazygit"},{"location":"user-guide/terminal/pm2/#ui-for-pm2","text":"","title":"UI for PM2"},{"location":"user-guide/terminal/pm2/#create-service","text":"PM2 has terminal user interface (TUI) for monnitoring of running applications. You can start it executig pm2 monit in the workspace terminal. First thing, is to expose pm2 monit as a WEB application, and start the latter as a permanent service of the workspace. Any terminal application can be turned into WEB application wiht ttyd (installed in every workspace). Note Permanent service starts automatically as soon as the workspace is started. Perform the next steps: Go to the \"Admin\" tab on the workspace UI and open workspace settings Go to \"Interface\" and select \"START NEW\" from the picklist Enter command ttyd -p 8032 /bin/zsh -c 'cd /home/abc/apps/node && . env/bin/activate && pm2 monit' Note pm2 is an alias for command cd /home/abc/apps/node && . env/bin/activate && pm2 Give it any name and click \"Save\" Please restart the workspace to apply the channge.","title":"Create service"},{"location":"user-guide/terminal/pm2/#create-service_1","text":"Let's create shortcut for pm2 monit on the \"Admin\" tab of the workspace UI: Go to the \"Admin\" tab on the workspace UI and open workspace settings Go to \"Interface\" and then to tab \"Admin\" Select \"CREATE NEW\" from the picklist Enter any title and any description Enter port 8032 Uploat an image to the workspace (use Filebrowser), and choose this image in the filepicker Ignore field \"path\", and click \"Save\" Nnow we have the PM2 monit tab on the workspace UI \"Admin\" tab","title":"Create service"},{"location":"user-guide/terminal/services/","text":"This basic tutorial demonstrates how to make your applications and services runing in the workspace, even if you close the terminal. Any application started in the terminal will run as long as your terminal session is alive. There are couple of simple method that you can apply to let your application run in the background. For the sake of demonstration let's create a simple shell script. Execute nano /home/project/myscript.sh This opens nano text editor. Let's make this script write to a file current time every 2 second. Paste the following code in the editor window #!/bin/bash while true do echo $(date +\"%Y-%m-%d_%H-%M-%S\") echo $(date +\"%Y-%m-%d_%H-%M-%S\") >> /home/project/time.txt sleep 2s done Hit Ctrl+x to save, and start the script sh /home/project/myscript.sh You see that it also outputs the timestamp to the console. Interrupt the execution with Ctrl-c, and check the contents of the file cat /home/project/time.txt Let's remove this file, and start again rm /home/project/time.txt sh /home/project/myscript.sh Now close the terminal, and open it again. You can check the file /home/project/time.txt and you will see that it has some timestamps, but no new timestamps appear. This is because we termminated execution when closed the terminal. But sometimes you need your scripts, services and applications to run in the background, even if you close the terminal, and even if you restart your computer. The next couple of methods will show how to do that. &! If you want any application or service runing after terminal session is closed, you can start service with \"&!\" at the end of the command. For example, to start the script from example above and keep it running after terminal is closed, execute sh /home/project/myscript.sh &! Close the terminal, and open it again. Check the latest timestamp, print the file with cat /home/project/time.txt wait 5 seconds, and print the file again. You can see that new timestamps keep appearing. This is a very simple way to start your application i the terminal, and let it running even if you close the terminal. When you want to stop it, you will need to find it among running processes, and kill it. ps -axf | grep /home/project/myscript.sh the first number is PID, kill the process with the kill <your-PID-number> command, i.e. kill 154 (your PID might be different) Note: if you restart the workspace, execution will be terminated too. Remove the output file rm /home/project/time.txt Tmux Tmux - is another even better way to let application running in the background. Tmux is a Linux application that allows multitasking in a terminal window. It stands for Terminal Multiplexing, and is based around sessions. Users can start a process, switch to a new one, detach from a running process, and reattach to a running process. Create tmux session, let's call it \"session-1\" (you can give any name) tmux new -t session-1 This opens new console widow. Here we can d same things that we could run in the main termianl. For example, show your user whoami Now let's start our script in this tmux session terminal sh /home/project/myscript.sh You see that the script is being executed, and the output is printed to the console. Let's close the terminal, and open the new one. In the new terminal let's check that out text file is constantly being updated by the script running somewhere in background cat /home/project/time.txt wait few second and check again, you will see new timestamps appearing Let's ist the tmux sessions. To do this execute command tmux list-sessions You see our session-1. Let's open terminal of this session tmux attach -t session-1 UYou see that our has being running all the time, and even output was printed inside this session terminal. Note: if you restart the workspace, all tmux session will be lost.","title":"Services"},{"location":"user-guide/terminal/services/#_1","text":"If you want any application or service runing after terminal session is closed, you can start service with \"&!\" at the end of the command. For example, to start the script from example above and keep it running after terminal is closed, execute sh /home/project/myscript.sh &! Close the terminal, and open it again. Check the latest timestamp, print the file with cat /home/project/time.txt wait 5 seconds, and print the file again. You can see that new timestamps keep appearing. This is a very simple way to start your application i the terminal, and let it running even if you close the terminal. When you want to stop it, you will need to find it among running processes, and kill it. ps -axf | grep /home/project/myscript.sh the first number is PID, kill the process with the kill <your-PID-number> command, i.e. kill 154 (your PID might be different) Note: if you restart the workspace, execution will be terminated too. Remove the output file rm /home/project/time.txt","title":"&amp;!"},{"location":"user-guide/terminal/services/#tmux","text":"Tmux - is another even better way to let application running in the background. Tmux is a Linux application that allows multitasking in a terminal window. It stands for Terminal Multiplexing, and is based around sessions. Users can start a process, switch to a new one, detach from a running process, and reattach to a running process. Create tmux session, let's call it \"session-1\" (you can give any name) tmux new -t session-1 This opens new console widow. Here we can d same things that we could run in the main termianl. For example, show your user whoami Now let's start our script in this tmux session terminal sh /home/project/myscript.sh You see that the script is being executed, and the output is printed to the console. Let's close the terminal, and open the new one. In the new terminal let's check that out text file is constantly being updated by the script running somewhere in background cat /home/project/time.txt wait few second and check again, you will see new timestamps appearing Let's ist the tmux sessions. To do this execute command tmux list-sessions You see our session-1. Let's open terminal of this session tmux attach -t session-1 UYou see that our has being running all the time, and even output was printed inside this session terminal. Note: if you restart the workspace, all tmux session will be lost.","title":"Tmux"},{"location":"user-guide/terminal/terminal/","text":"Terminal Terminal with a command-line interface (CLI) allows to interact with the workspace: execute commands, run programs, navigate the file system, manage files and directories, etc. Linux Workspace is based on Linux (Ubuntu) hence you can execute any Linux commands, such as ls - The most frequently used command in Linux to list directories pwd - Print working directory command in Linux cd - Linux command to navigate through directories mkdir - Command used to create directories in Linux mv - Move or rename files in Linux cp - Similar usage as mv but for copying files in Linux rm - Delete files or directories touch - Create blank/empty files ln - Create symbolic links (shortcuts) to other files cat - Display file contents on the terminal clear - Clear the terminal display echo - Print any text that follows the command less - Linux command to display paged outputs in the terminal man - Access manual pages for all Linux commands uname - Linux command to get basic information about the OS whoami - Get the active username tar - Command to extract and compress files in Linux grep - Search for a string within an output head - Return the specified number of lines from the top tail - Return the specified number of lines from the bottom diff - Find the difference between two files cmp - Allows you to check if two files are identical comm - Combines the functionality of diff and cmp sort - Linux command to sort the content of a file while outputting export - Export environment variables in Linux zip - Zip files in Linux unzip - Unzip files in Linux ssh - Secure Shell command in Linux service - Linux command to start and stop services ps - Display active processes kill and killall - Kill active processes by process ID or name df - Display disk filesystem information mount - Mount file systems in Linux chmod - Command to change file permissions chown - Command for granting ownership of files or folders ifconfig - Display network interfaces and IP addresses traceroute - Trace all the network hops to reach the destination wget - Direct download files from the internet ufw - Firewall command iptables - Base firewall for all other firewall utilities to interface with apt, pacman, yum, rpm - Package managers depending on the distro sudo - Command to escalate privileges in Linux cal - View a command-line calendar alias - Create custom shortcuts for your regularly used commands dd - Majorly used for creating bootable USB sticks whereis - Locate the binary, source, and manual pages for a command whatis - Find what a command is used for top - View active processes live with their system usage useradd and usermod - Add new user or change existing users data passwd - Create or update passwords for existing users","title":"Terminal"},{"location":"user-guide/terminal/terminal/#terminal","text":"Terminal with a command-line interface (CLI) allows to interact with the workspace: execute commands, run programs, navigate the file system, manage files and directories, etc.","title":"Terminal"},{"location":"user-guide/terminal/terminal/#linux","text":"Workspace is based on Linux (Ubuntu) hence you can execute any Linux commands, such as ls - The most frequently used command in Linux to list directories pwd - Print working directory command in Linux cd - Linux command to navigate through directories mkdir - Command used to create directories in Linux mv - Move or rename files in Linux cp - Similar usage as mv but for copying files in Linux rm - Delete files or directories touch - Create blank/empty files ln - Create symbolic links (shortcuts) to other files cat - Display file contents on the terminal clear - Clear the terminal display echo - Print any text that follows the command less - Linux command to display paged outputs in the terminal man - Access manual pages for all Linux commands uname - Linux command to get basic information about the OS whoami - Get the active username tar - Command to extract and compress files in Linux grep - Search for a string within an output head - Return the specified number of lines from the top tail - Return the specified number of lines from the bottom diff - Find the difference between two files cmp - Allows you to check if two files are identical comm - Combines the functionality of diff and cmp sort - Linux command to sort the content of a file while outputting export - Export environment variables in Linux zip - Zip files in Linux unzip - Unzip files in Linux ssh - Secure Shell command in Linux service - Linux command to start and stop services ps - Display active processes kill and killall - Kill active processes by process ID or name df - Display disk filesystem information mount - Mount file systems in Linux chmod - Command to change file permissions chown - Command for granting ownership of files or folders ifconfig - Display network interfaces and IP addresses traceroute - Trace all the network hops to reach the destination wget - Direct download files from the internet ufw - Firewall command iptables - Base firewall for all other firewall utilities to interface with apt, pacman, yum, rpm - Package managers depending on the distro sudo - Command to escalate privileges in Linux cal - View a command-line calendar alias - Create custom shortcuts for your regularly used commands dd - Majorly used for creating bootable USB sticks whereis - Locate the binary, source, and manual pages for a command whatis - Find what a command is used for top - View active processes live with their system usage useradd and usermod - Add new user or change existing users data passwd - Create or update passwords for existing users","title":"Linux"},{"location":"user-guide/terminal/wrk/","text":"","title":"Wrk"},{"location":"user-guide/workspace/base-image/","text":"Base image Alnoda workspaces are based on the popular minimized Ubuntu image, which means that standard Linux Ubuntu commands are available Command Description Example sudo Allows a permitted user to execute a command as the superuser or another user. sudo apt-get update apt-get The APT package handling utility (CLI), used for example to install or update software. apt-get install pkgname cd Changes the current directory. cd /home/username/Documents ls Lists all files and directories in the current directory. ls pwd Displays the path of the current directory. pwd touch Creates a new empty file. touch newfile.txt cp Copies files and directories. cp source destination mv Moves or renames files and directories. mv oldname newname rm Removes files or directories. rm filename cat Displays the content of a file. cat filename grep Searches for a specific pattern in a file. grep 'word' filename chmod Changes the permissions of a file or directory. chmod 755 filename chown Changes the ownership of a file or directory. chown username:group filename ps Shows the currently running processes. ps top Displays real-time system information including CPU usage, memory usage, and running processes. top df Displays disk usage. df du Estimates file and directory space usage. du ping Checks network connectivity. ping www.example.com User The workspace is initially set to the user 'abc', who belongs to the sudo group. However, you have the option to switch to the root user by using the command sudo su root . Project dir The /home/project directory is designated as the default working directory where you can store code repositories, data files, artifacts, and so on. The alias cd ~p can be used to quickly navigate to this project folder. Processes Docker is typically used to run a single process within a container. However, workspaces have multiple processes and, for this reason, they leverage supervisord. Supervisord ensures that as soon as a workspace container is initiated, all the necessary persistent services also start running. Cron Cron, a time-based job scheduling system, can schedule jobs (commands or scripts) to run periodically at fixed times, dates, or intervals. It is commonly used to automate system maintenance or administration tasks, such as disk backups, system updates, checking and reporting, etc. Cron is pre-configured in the workspace, and its daemon service automatically starts upon the starting of the workspace. To schedule an execution of a task edit crontab file: <font color=\"#5EA702\">crontab</font> -e Example of cron job definition: .---------------- minute (0 - 59) | .------------- hour (0 - 23) | | .---------- day of month (1 - 31) | | | .------- month (1 - 12) OR jan,feb,mar,apr ... | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat | | | | | * * * * * command to be executed For example to schedule a task that will every minute append username at the end of the text file /home/project/my-username.txt you would add to the crontab the following line: * * * * * echo $(whoami) >> /home/project/my-username.txt","title":"Base image"},{"location":"user-guide/workspace/base-image/#base-image","text":"Alnoda workspaces are based on the popular minimized Ubuntu image, which means that standard Linux Ubuntu commands are available Command Description Example sudo Allows a permitted user to execute a command as the superuser or another user. sudo apt-get update apt-get The APT package handling utility (CLI), used for example to install or update software. apt-get install pkgname cd Changes the current directory. cd /home/username/Documents ls Lists all files and directories in the current directory. ls pwd Displays the path of the current directory. pwd touch Creates a new empty file. touch newfile.txt cp Copies files and directories. cp source destination mv Moves or renames files and directories. mv oldname newname rm Removes files or directories. rm filename cat Displays the content of a file. cat filename grep Searches for a specific pattern in a file. grep 'word' filename chmod Changes the permissions of a file or directory. chmod 755 filename chown Changes the ownership of a file or directory. chown username:group filename ps Shows the currently running processes. ps top Displays real-time system information including CPU usage, memory usage, and running processes. top df Displays disk usage. df du Estimates file and directory space usage. du ping Checks network connectivity. ping www.example.com","title":"Base image"},{"location":"user-guide/workspace/base-image/#user","text":"The workspace is initially set to the user 'abc', who belongs to the sudo group. However, you have the option to switch to the root user by using the command sudo su root .","title":"User"},{"location":"user-guide/workspace/base-image/#project-dir","text":"The /home/project directory is designated as the default working directory where you can store code repositories, data files, artifacts, and so on. The alias cd ~p can be used to quickly navigate to this project folder.","title":"Project dir"},{"location":"user-guide/workspace/base-image/#processes","text":"Docker is typically used to run a single process within a container. However, workspaces have multiple processes and, for this reason, they leverage supervisord. Supervisord ensures that as soon as a workspace container is initiated, all the necessary persistent services also start running.","title":"Processes"},{"location":"user-guide/workspace/base-image/#cron","text":"Cron, a time-based job scheduling system, can schedule jobs (commands or scripts) to run periodically at fixed times, dates, or intervals. It is commonly used to automate system maintenance or administration tasks, such as disk backups, system updates, checking and reporting, etc. Cron is pre-configured in the workspace, and its daemon service automatically starts upon the starting of the workspace. To schedule an execution of a task edit crontab file: <font color=\"#5EA702\">crontab</font> -e Example of cron job definition: .---------------- minute (0 - 59) | .------------- hour (0 - 23) | | .---------- day of month (1 - 31) | | | .------- month (1 - 12) OR jan,feb,mar,apr ... | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat | | | | | * * * * * command to be executed For example to schedule a task that will every minute append username at the end of the text file /home/project/my-username.txt you would add to the crontab the following line: * * * * * echo $(whoami) >> /home/project/my-username.txt","title":"Cron"},{"location":"user-guide/workspace/docker/","text":"Docker Run workspace Alnoda workspaces come in the form of Docker images that can be executed just like any other Docker container. Use the following command to run them: docker run --name workspace-1 -d -p 8020 -8040:8020-8040 --restart = always alnoda-workspace:latest Once it's running, you can access the Workspace UI by navigating to http://localhost:8020 in your web browser. Other ports Alnoda workspaces requires the availability of 20 ports, mapped internally to the range 8020-8040. If you need to designate a different range of ports, include an environmental variable, WRK_HOME_PORT, set equal to the first port in the new range. For example: docker run --name workspace-2 -d -p 7020 -7040:8020-8040 -e WRK_HOME_PORT = 7020 --restart = always alnoda-workspace:latest Now Workspace UI will be available on http://localhost:7020 Start, stop, restart You have the flexibility to manage workspaces just as you would with any Docker images and containers. This includes operations such as starting, stopping, and deleting. To stop a workspace, use: docker stop workspace-1 To start a workspace, use: docker start workspace-1 Note You also have the option to restart a workspace directly from within the workspace terminal using the wrk kill command. Info Every application initialized as a resilient service is designed to launch automatically whenever the workspace is rebooted. Save workspace Workspaces can be backed up by generating new images from current workspaces. It's not necessary to stop a workspace for this process, as backups can be made while the workspace is operational: docker commit workspace-1 workspace-1-backup-image:2023-05-01 It is possible to start a new workspace using the backup: docker run --name workspace-1 -d -p 8020 -8040:8020-8040 --restart = always workspace-1-backup-image:2023-05-01 Saving a workspace backup as a file offers several benefits. It ensures the backup's security against unintended removal during purges of old Docker images. It also provides the flexibility to transfer the backup file to a cloud storage service like S3 or Google Drive. Additionally, it facilitates sharing of the backup file to another computer, allowing the workspace to be launched there. Save workspace backup image to a file: docker save workspace-1-backup-image:2023-05-01 > workspace-1-backup-image-2023-05-01.tar Load workspace image from the tar file: docker load < workspace-1-backup-image-2023-05-01.tar Tip Another even better approach is to utilize a private Docker registry as a repository for your workspace backups.","title":"Docker"},{"location":"user-guide/workspace/docker/#docker","text":"","title":"Docker"},{"location":"user-guide/workspace/docker/#run-workspace","text":"Alnoda workspaces come in the form of Docker images that can be executed just like any other Docker container. Use the following command to run them: docker run --name workspace-1 -d -p 8020 -8040:8020-8040 --restart = always alnoda-workspace:latest Once it's running, you can access the Workspace UI by navigating to http://localhost:8020 in your web browser.","title":"Run workspace"},{"location":"user-guide/workspace/docker/#other-ports","text":"Alnoda workspaces requires the availability of 20 ports, mapped internally to the range 8020-8040. If you need to designate a different range of ports, include an environmental variable, WRK_HOME_PORT, set equal to the first port in the new range. For example: docker run --name workspace-2 -d -p 7020 -7040:8020-8040 -e WRK_HOME_PORT = 7020 --restart = always alnoda-workspace:latest Now Workspace UI will be available on http://localhost:7020","title":"Other ports"},{"location":"user-guide/workspace/docker/#start-stop-restart","text":"You have the flexibility to manage workspaces just as you would with any Docker images and containers. This includes operations such as starting, stopping, and deleting. To stop a workspace, use: docker stop workspace-1 To start a workspace, use: docker start workspace-1 Note You also have the option to restart a workspace directly from within the workspace terminal using the wrk kill command. Info Every application initialized as a resilient service is designed to launch automatically whenever the workspace is rebooted.","title":"Start, stop, restart"},{"location":"user-guide/workspace/docker/#save-workspace","text":"Workspaces can be backed up by generating new images from current workspaces. It's not necessary to stop a workspace for this process, as backups can be made while the workspace is operational: docker commit workspace-1 workspace-1-backup-image:2023-05-01 It is possible to start a new workspace using the backup: docker run --name workspace-1 -d -p 8020 -8040:8020-8040 --restart = always workspace-1-backup-image:2023-05-01 Saving a workspace backup as a file offers several benefits. It ensures the backup's security against unintended removal during purges of old Docker images. It also provides the flexibility to transfer the backup file to a cloud storage service like S3 or Google Drive. Additionally, it facilitates sharing of the backup file to another computer, allowing the workspace to be launched there. Save workspace backup image to a file: docker save workspace-1-backup-image:2023-05-01 > workspace-1-backup-image-2023-05-01.tar Load workspace image from the tar file: docker load < workspace-1-backup-image-2023-05-01.tar Tip Another even better approach is to utilize a private Docker registry as a repository for your workspace backups.","title":"Save workspace"},{"location":"user-guide/workspace/pre-installed-apps/","text":"Pre-installed applications Workspaces come with an array of pre-installed applications, designed to streamline user interaction and reduce the time needed to configure a new workspace each time. The base Alnoda workspace by default includes two browser-based applications: a terminal and a file browser, and lultiple ommand-line applications. Terminal The browser-based terminal eliminates the need to SSH into the Docker image, providing a consistent user experience whether you're operating the workspace locally or in the cloud. File browser The minimalist file browser simplifies file and folder management within the workspace. It eliminates the need to mount local folders as docker volumes in the workspace container for file transfer between the workspace and the user's computer. Since the file browser has browser-based UI, it ensures a consistent experience regardless of whether the workspace is being used locally or in the cloud. Furthermore, the file browser features a text editor with code highlighting, offering users a basic but practical code editing tool. CLI tools The following CLI tools are pre-installed in the base Alnoda workspace: z shell ( zsh ) - shell that offers a more user-friendly and interactive command-line experience. git text editors: nano , vim , tilde , mcedit tools for managing packages and software dependencies: apt , nix , asdf , pipx tools for interacting with servers and downloading files over the internet: curl , wget tools for archiving and compressing files: tar , zip process monitor: htop disk usage analyzer: ncdu utility to multiplex several virtual consoles: tmux file manager with terminal user interface: mc utility for better file printing: rich-cli (command rich file.py or p file.py ) Python Alnoda workspaces come with the default Python and Pip pre-installed. If you need other versions of Python, you can easily install them from the Alnoda Hub. Nodeenv Alnoda workspaces have nodeenv pre-installed, allowing you to create local Node.js environments. This enhances the workspace's utility by enabling effortless installation of Node.js browser-based applications, benefiting from vast collection of Node.js projects. Static file server Workspaces come with a minimalist Python static file server by default. This tool is highly useful when you need to serve browser-based applications or view HTML reports generated by other applications, as it can serve folders or individual HTML websites. For instance, you can serve the /home/project folder with the Python static file server as follows: <font color=\"#5EA702\">cd</font> /home/project; <font color=\"#5EA702\">python</font> -m http.server 8026 Now you can open \"My app on port 8026\" from the Workspace UI \"My apps\" tab.","title":"Pre-installed apps"},{"location":"user-guide/workspace/pre-installed-apps/#pre-installed-applications","text":"Workspaces come with an array of pre-installed applications, designed to streamline user interaction and reduce the time needed to configure a new workspace each time. The base Alnoda workspace by default includes two browser-based applications: a terminal and a file browser, and lultiple ommand-line applications.","title":"Pre-installed applications"},{"location":"user-guide/workspace/pre-installed-apps/#terminal","text":"The browser-based terminal eliminates the need to SSH into the Docker image, providing a consistent user experience whether you're operating the workspace locally or in the cloud.","title":"Terminal"},{"location":"user-guide/workspace/pre-installed-apps/#file-browser","text":"The minimalist file browser simplifies file and folder management within the workspace. It eliminates the need to mount local folders as docker volumes in the workspace container for file transfer between the workspace and the user's computer. Since the file browser has browser-based UI, it ensures a consistent experience regardless of whether the workspace is being used locally or in the cloud. Furthermore, the file browser features a text editor with code highlighting, offering users a basic but practical code editing tool.","title":"File browser"},{"location":"user-guide/workspace/pre-installed-apps/#cli-tools","text":"The following CLI tools are pre-installed in the base Alnoda workspace: z shell ( zsh ) - shell that offers a more user-friendly and interactive command-line experience. git text editors: nano , vim , tilde , mcedit tools for managing packages and software dependencies: apt , nix , asdf , pipx tools for interacting with servers and downloading files over the internet: curl , wget tools for archiving and compressing files: tar , zip process monitor: htop disk usage analyzer: ncdu utility to multiplex several virtual consoles: tmux file manager with terminal user interface: mc utility for better file printing: rich-cli (command rich file.py or p file.py )","title":"CLI tools"},{"location":"user-guide/workspace/pre-installed-apps/#python","text":"Alnoda workspaces come with the default Python and Pip pre-installed. If you need other versions of Python, you can easily install them from the Alnoda Hub.","title":"Python"},{"location":"user-guide/workspace/pre-installed-apps/#nodeenv","text":"Alnoda workspaces have nodeenv pre-installed, allowing you to create local Node.js environments. This enhances the workspace's utility by enabling effortless installation of Node.js browser-based applications, benefiting from vast collection of Node.js projects.","title":"Nodeenv"},{"location":"user-guide/workspace/pre-installed-apps/#static-file-server","text":"Workspaces come with a minimalist Python static file server by default. This tool is highly useful when you need to serve browser-based applications or view HTML reports generated by other applications, as it can serve folders or individual HTML websites. For instance, you can serve the /home/project folder with the Python static file server as follows: <font color=\"#5EA702\">cd</font> /home/project; <font color=\"#5EA702\">python</font> -m http.server 8026 Now you can open \"My app on port 8026\" from the Workspace UI \"My apps\" tab.","title":"Static file server"},{"location":"user-guide/workspace/ui/","text":"Workspace UI Alnoda workspaces have browser-based user interface. It allows you to access workspace applications, review workspace metadata, and display notes related to the project, including project descriptions, project links, and shortcuts for common project commands. Home This tab provides shortcuts to the primary applications within the workspace. My Apps This tab comprises shortcuts to applications that are set to listen on several predetermined ports. These ports can also be used to run your custom applications. Admin This tab is designed for quick access to Workspace Admin App and other admin applications such as process monitors, network monitoring, task schedulers, and so on About This tab provides meta-information about the workspace including the workspace version, project description, images this workspace is built upon, services currently running, and installed applications. Links This tab hosts a list of internet links that are pertinent to the project. These links can be created and modified via the Workspace Admin App . Cheatsheet This section hosts a compilation of project-relevant commands that users can maintain and modify through the Workspace Admin App .","title":"User interface"},{"location":"user-guide/workspace/ui/#workspace-ui","text":"Alnoda workspaces have browser-based user interface. It allows you to access workspace applications, review workspace metadata, and display notes related to the project, including project descriptions, project links, and shortcuts for common project commands.","title":"Workspace UI"},{"location":"user-guide/workspace/ui/#home","text":"This tab provides shortcuts to the primary applications within the workspace.","title":"Home"},{"location":"user-guide/workspace/ui/#my-apps","text":"This tab comprises shortcuts to applications that are set to listen on several predetermined ports. These ports can also be used to run your custom applications.","title":"My Apps"},{"location":"user-guide/workspace/ui/#admin","text":"This tab is designed for quick access to Workspace Admin App and other admin applications such as process monitors, network monitoring, task schedulers, and so on","title":"Admin"},{"location":"user-guide/workspace/ui/#about","text":"This tab provides meta-information about the workspace including the workspace version, project description, images this workspace is built upon, services currently running, and installed applications.","title":"About"},{"location":"user-guide/workspace/ui/#links","text":"This tab hosts a list of internet links that are pertinent to the project. These links can be created and modified via the Workspace Admin App .","title":"Links"},{"location":"user-guide/workspace/ui/#cheatsheet","text":"This section hosts a compilation of project-relevant commands that users can maintain and modify through the Workspace Admin App .","title":"Cheatsheet"},{"location":"user-guide/wrk/info/","text":"Wrk wrk is a command-line interface (CLI) tool that offers an alternative to using Workspace Admin for managing workspace features. The wrk tool can be utilized for creating workspace provisioning scripts, within Dockerfiles, and in Alnoda Hub app installation scripts. id Command : wrk id Description: Display the workspace id $ wrk id dhfoeahbslahinbk signin Command: : wrk signin '[security token]' Description: Authenticate workspace at alnoda.org Parameters: token (str): personal security token from Alnoda Hub $ wrk signin 'hf$HvypaBw&)U!^1Y%Kgp&$4TjT98dh^7))SMB79' \u2728 Hello username! Warning Wrap your token with single quotes signout Command: : wrk signout Description: Log out workspace from alnoda.org $ wrk signout \ud83d\udc4b Goodbye! descr Command: wrk descr Description: Edit interactively the workspace description using the command-line text editor, mcedit. update Command: wrk update [what] '[new value]' Description: Update workspace meta (name, version, author or description) Parameters: what (str): element of metadata to update. Allowed values: name , version , author , description (default) value (str): new value $ wrk update name 'My awesome workspace' \u2705 Done! start Command: wrk start [service name] '[start command]' Description: Start persisten application or service (as a daemon). Parameters: name (str) - service name cmd (str) - command to start a service $ wrk start statichome 'cd /home/project/; python -m http.server 8026' \u2705 Done! \u2757 Service activation requires workspace reboot! stop Command: wrk stop [service name] Description: Stop service. Parameters: name (str) - service name $ wrk stop statichome \u2705 Done! \u2757 Workspace reboot is required! apps Command: wrk apps Description: Display installed apps from Alnoda Hub. $ wrk apps \u2747\ufe0f code-server Name: Code-server Version: 4.13.0 Description: VS Code IDE (code editor) in browser \u2747\ufe0f poetry Name: Poetry Version: 1.4.0 Description: Python packaging and dependency management made easy install Command: wrk install [app name] [tab] Description: Install an app from Alnoda Hub. Parameters: application (str) - application name from Alnoda Hub tab (str) - workspace UI tab where the app shortcut will be placed, default - Home tab. $ wrk install postgresql \u2728 starting... \u26a0\ufe0f Please DO NOT close this terminal window untill app is fully installed! \u27a1\ufe0f checking workspace compatibility... \u27a1\ufe0f checking app compatibility... \u27a1\ufe0f executing installation script... \u2714\ufe0f app installed \u27a1\ufe0f setting startup configuration... ------------------------------------------------------------- - \u26a0\ufe0f application will start after workspace is restarted \u26a0\ufe0f - --- restart workspace with 'wrk kill' --- ------------------------------------------------------------- \u27a1\ufe0f adding workspace tags... \u2757 Could not update workspace app history at alnoda.org: Not authenticated at alnoda.org \u270d\ufe0f If app is not working try restarting terminal window or entire workspace \ud83d\ude80 done R E S T A R T T E R M I N A L N O W (CTRL+D) !!!!!!!! *********************************************** psql *********************************************** setvar Command: wrk setvar [name] '[value]' Description: Set terminal shell (zsh) environmental variable. Same as 'wrk env'. Parameters: name (str) - name of the environmental variable value (str) - value of the environmental variable $ wrk setvar MY_NEW_VAR 'my new environmental variable' \u2705 Done! \u2757 Terminal reload is required! Warning Wrap variable value with single quotes! env Command: wrk env [name] '[value]' Description: Set terminal shell (zsh) environmental variable. Same as 'wrk setvar'. Parameters: name (str) - name of the environmental variable value (str) - value of the environmental variable $ wrk env MY_NEW_VAR 'my new environmental variable' \u2705 Done! \u2757 Terminal reload is required! addpath Command: wrk addpath '[folder]' Description: Add a folder to PATH, only applies to terminal zsh shell. Parameters: folder (str) - folder that should be added to PATH. $ wrk addpath '/home/project/' \u2705 Done! \u2757 Workspace reboot is required! alias Command: wrk alias [name] '[cmd]' Description: Set alias for zsh terminal shell (name='value'). Parameters: name (str) - alias cmd (str) - command $ wrk alias ps 'ps axf' \u2705 Done! \u2757 Workspace reboot is required! cheatsec Command: wrk cheatsec '[name]' Description: Add a section to the cheatsheet tab. $ wrk cheatsec 'React' \u2705 Done! cheat Command: wrk cheat '[section]' '[cmd]' '[description]' Description: Add cheatsheet command to some section. Parameters: section (str) - section to add note to cmd (str) - command description (str) - description $ wrk cheat React 'npx create-react-app my-app' 'bootstrap a new React application in a directory named my-app.' \u2705 Done! linksec Command: wrk linksec '[name]' Description: Add a section to the links. Parameters: name (str) - Name of a new section on the Links tab. $ wrk linksec 'React' \u2705 Done! link Command: wrk link '[section]' '[url]' '[name]' '[description]' Description: Add new link to the existing link section. Parameters: section (str) - section name url (str) - link URL name (str) - link name description (str) - description $ wrk link 'React' 'https://react.dev/learn' 'React docs' 'React documentation' \u2705 Done! kill Command: wrk kill Description: Kill (and restart) the workspace. $ wrk kill \u26a0\ufe0f WARNING: this will stop the workspace. Do you want to continue\u2753 [y/N]: upgrade Command: wrk upgrade Description: Upgrade wrk version. $ wrk upgrade Current version 0.4.21 New version available 0.4.22. Do you want to upgrade\u2753 [y/N]: help Command: wrk --help Description: Show the help documentation for wrk tool in the terminal shell.","title":"Wrk tool"},{"location":"user-guide/wrk/info/#wrk","text":"wrk is a command-line interface (CLI) tool that offers an alternative to using Workspace Admin for managing workspace features. The wrk tool can be utilized for creating workspace provisioning scripts, within Dockerfiles, and in Alnoda Hub app installation scripts.","title":"Wrk"},{"location":"user-guide/wrk/info/#id","text":"Command : wrk id Description: Display the workspace id $ wrk id dhfoeahbslahinbk","title":"id"},{"location":"user-guide/wrk/info/#signin","text":"Command: : wrk signin '[security token]' Description: Authenticate workspace at alnoda.org Parameters: token (str): personal security token from Alnoda Hub $ wrk signin 'hf$HvypaBw&)U!^1Y%Kgp&$4TjT98dh^7))SMB79' \u2728 Hello username! Warning Wrap your token with single quotes","title":"signin"},{"location":"user-guide/wrk/info/#signout","text":"Command: : wrk signout Description: Log out workspace from alnoda.org $ wrk signout \ud83d\udc4b Goodbye!","title":"signout"},{"location":"user-guide/wrk/info/#descr","text":"Command: wrk descr Description: Edit interactively the workspace description using the command-line text editor, mcedit.","title":"descr"},{"location":"user-guide/wrk/info/#update","text":"Command: wrk update [what] '[new value]' Description: Update workspace meta (name, version, author or description) Parameters: what (str): element of metadata to update. Allowed values: name , version , author , description (default) value (str): new value $ wrk update name 'My awesome workspace' \u2705 Done!","title":"update"},{"location":"user-guide/wrk/info/#start","text":"Command: wrk start [service name] '[start command]' Description: Start persisten application or service (as a daemon). Parameters: name (str) - service name cmd (str) - command to start a service $ wrk start statichome 'cd /home/project/; python -m http.server 8026' \u2705 Done! \u2757 Service activation requires workspace reboot!","title":"start"},{"location":"user-guide/wrk/info/#stop","text":"Command: wrk stop [service name] Description: Stop service. Parameters: name (str) - service name $ wrk stop statichome \u2705 Done! \u2757 Workspace reboot is required!","title":"stop"},{"location":"user-guide/wrk/info/#apps","text":"Command: wrk apps Description: Display installed apps from Alnoda Hub. $ wrk apps \u2747\ufe0f code-server Name: Code-server Version: 4.13.0 Description: VS Code IDE (code editor) in browser \u2747\ufe0f poetry Name: Poetry Version: 1.4.0 Description: Python packaging and dependency management made easy","title":"apps"},{"location":"user-guide/wrk/info/#install","text":"Command: wrk install [app name] [tab] Description: Install an app from Alnoda Hub. Parameters: application (str) - application name from Alnoda Hub tab (str) - workspace UI tab where the app shortcut will be placed, default - Home tab. $ wrk install postgresql \u2728 starting... \u26a0\ufe0f Please DO NOT close this terminal window untill app is fully installed! \u27a1\ufe0f checking workspace compatibility... \u27a1\ufe0f checking app compatibility... \u27a1\ufe0f executing installation script... \u2714\ufe0f app installed \u27a1\ufe0f setting startup configuration... ------------------------------------------------------------- - \u26a0\ufe0f application will start after workspace is restarted \u26a0\ufe0f - --- restart workspace with 'wrk kill' --- ------------------------------------------------------------- \u27a1\ufe0f adding workspace tags... \u2757 Could not update workspace app history at alnoda.org: Not authenticated at alnoda.org \u270d\ufe0f If app is not working try restarting terminal window or entire workspace \ud83d\ude80 done R E S T A R T T E R M I N A L N O W (CTRL+D) !!!!!!!! *********************************************** psql ***********************************************","title":"install"},{"location":"user-guide/wrk/info/#setvar","text":"Command: wrk setvar [name] '[value]' Description: Set terminal shell (zsh) environmental variable. Same as 'wrk env'. Parameters: name (str) - name of the environmental variable value (str) - value of the environmental variable $ wrk setvar MY_NEW_VAR 'my new environmental variable' \u2705 Done! \u2757 Terminal reload is required! Warning Wrap variable value with single quotes!","title":"setvar"},{"location":"user-guide/wrk/info/#env","text":"Command: wrk env [name] '[value]' Description: Set terminal shell (zsh) environmental variable. Same as 'wrk setvar'. Parameters: name (str) - name of the environmental variable value (str) - value of the environmental variable $ wrk env MY_NEW_VAR 'my new environmental variable' \u2705 Done! \u2757 Terminal reload is required!","title":"env"},{"location":"user-guide/wrk/info/#addpath","text":"Command: wrk addpath '[folder]' Description: Add a folder to PATH, only applies to terminal zsh shell. Parameters: folder (str) - folder that should be added to PATH. $ wrk addpath '/home/project/' \u2705 Done! \u2757 Workspace reboot is required!","title":"addpath"},{"location":"user-guide/wrk/info/#alias","text":"Command: wrk alias [name] '[cmd]' Description: Set alias for zsh terminal shell (name='value'). Parameters: name (str) - alias cmd (str) - command $ wrk alias ps 'ps axf' \u2705 Done! \u2757 Workspace reboot is required!","title":"alias"},{"location":"user-guide/wrk/info/#cheatsec","text":"Command: wrk cheatsec '[name]' Description: Add a section to the cheatsheet tab. $ wrk cheatsec 'React' \u2705 Done!","title":"cheatsec"},{"location":"user-guide/wrk/info/#cheat","text":"Command: wrk cheat '[section]' '[cmd]' '[description]' Description: Add cheatsheet command to some section. Parameters: section (str) - section to add note to cmd (str) - command description (str) - description $ wrk cheat React 'npx create-react-app my-app' 'bootstrap a new React application in a directory named my-app.' \u2705 Done!","title":"cheat"},{"location":"user-guide/wrk/info/#linksec","text":"Command: wrk linksec '[name]' Description: Add a section to the links. Parameters: name (str) - Name of a new section on the Links tab. $ wrk linksec 'React' \u2705 Done!","title":"linksec"},{"location":"user-guide/wrk/info/#link","text":"Command: wrk link '[section]' '[url]' '[name]' '[description]' Description: Add new link to the existing link section. Parameters: section (str) - section name url (str) - link URL name (str) - link name description (str) - description $ wrk link 'React' 'https://react.dev/learn' 'React docs' 'React documentation' \u2705 Done!","title":"link"},{"location":"user-guide/wrk/info/#kill","text":"Command: wrk kill Description: Kill (and restart) the workspace. $ wrk kill \u26a0\ufe0f WARNING: this will stop the workspace. Do you want to continue\u2753 [y/N]:","title":"kill"},{"location":"user-guide/wrk/info/#upgrade","text":"Command: wrk upgrade Description: Upgrade wrk version. $ wrk upgrade Current version 0.4.21 New version available 0.4.22. Do you want to upgrade\u2753 [y/N]:","title":"upgrade"},{"location":"user-guide/wrk/info/#help","text":"Command: wrk --help Description: Show the help documentation for wrk tool in the terminal shell.","title":"help"}]}